/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// SSETypes Server side events sent when streaming a conversation response.
type SSETypes string

// List of SSETypes
const (
	SSETYPES_CONVERSATION_RESPONSE_STARTED SSETypes = "conversation.response.started"
	SSETYPES_CONVERSATION_RESPONSE_DONE SSETypes = "conversation.response.done"
	SSETYPES_CONVERSATION_RESPONSE_ERROR SSETypes = "conversation.response.error"
	SSETYPES_MESSAGE_OUTPUT_DELTA SSETypes = "message.output.delta"
	SSETYPES_TOOL_EXECUTION_STARTED SSETypes = "tool.execution.started"
	SSETYPES_TOOL_EXECUTION_DELTA SSETypes = "tool.execution.delta"
	SSETYPES_TOOL_EXECUTION_DONE SSETypes = "tool.execution.done"
	SSETYPES_AGENT_HANDOFF_STARTED SSETypes = "agent.handoff.started"
	SSETYPES_AGENT_HANDOFF_DONE SSETypes = "agent.handoff.done"
	SSETYPES_FUNCTION_CALL_DELTA SSETypes = "function.call.delta"
)

// All allowed values of SSETypes enum
var AllowedSSETypesEnumValues = []SSETypes{
	"conversation.response.started",
	"conversation.response.done",
	"conversation.response.error",
	"message.output.delta",
	"tool.execution.started",
	"tool.execution.delta",
	"tool.execution.done",
	"agent.handoff.started",
	"agent.handoff.done",
	"function.call.delta",
}

func (v *SSETypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SSETypes(value)
	for _, existing := range AllowedSSETypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SSETypes", value)
}

// NewSSETypesFromValue returns a pointer to a valid SSETypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSSETypesFromValue(v string) (*SSETypes, error) {
	ev := SSETypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SSETypes: valid values are %v", v, AllowedSSETypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SSETypes) IsValid() bool {
	for _, existing := range AllowedSSETypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SSETypes value
func (v SSETypes) Ptr() *SSETypes {
	return &v
}

type NullableSSETypes struct {
	value *SSETypes
	isSet bool
}

func (v NullableSSETypes) Get() *SSETypes {
	return v.value
}

func (v *NullableSSETypes) Set(val *SSETypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSSETypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSSETypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSSETypes(val *SSETypes) *NullableSSETypes {
	return &NullableSSETypes{value: val, isSet: true}
}

func (v NullableSSETypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSSETypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

