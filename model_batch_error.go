/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatchError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchError{}

// BatchError struct for BatchError
type BatchError struct {
	Message string `json:"message"`
	Count *int32 `json:"count,omitempty"`
}

type _BatchError BatchError

// NewBatchError instantiates a new BatchError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchError(message string) *BatchError {
	this := BatchError{}
	this.Message = message
	var count int32 = 1
	this.Count = &count
	return &this
}

// NewBatchErrorWithDefaults instantiates a new BatchError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchErrorWithDefaults() *BatchError {
	this := BatchError{}
	var count int32 = 1
	this.Count = &count
	return &this
}

// GetMessage returns the Message field value
func (o *BatchError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *BatchError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *BatchError) SetMessage(v string) {
	o.Message = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *BatchError) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchError) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *BatchError) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *BatchError) SetCount(v int32) {
	o.Count = &v
}

func (o BatchError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["message"] = o.Message
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	return toSerialize, nil
}

func (o *BatchError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatchError := _BatchError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatchError)

	if err != nil {
		return err
	}

	*o = BatchError(varBatchError)

	return err
}

type NullableBatchError struct {
	value *BatchError
	isSet bool
}

func (v NullableBatchError) Get() *BatchError {
	return v.value
}

func (v *NullableBatchError) Set(val *BatchError) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchError) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchError(val *BatchError) *NullableBatchError {
	return &NullableBatchError{value: val, isSet: true}
}

func (v NullableBatchError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


