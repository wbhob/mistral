/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// Tools struct for Tools
type Tools struct {
	ArrayOfTool *[]Tool
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Tools) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into ArrayOfTool
	err = json.Unmarshal(data, &dst.ArrayOfTool);
	if err == nil {
		jsonArrayOfTool, _ := json.Marshal(dst.ArrayOfTool)
		if string(jsonArrayOfTool) == "{}" { // empty struct
			dst.ArrayOfTool = nil
		} else {
			return nil // data stored in dst.ArrayOfTool, return on the first match
		}
	} else {
		dst.ArrayOfTool = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Tools)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Tools) MarshalJSON() ([]byte, error) {
	if src.ArrayOfTool != nil {
		return json.Marshal(&src.ArrayOfTool)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTools struct {
	value *Tools
	isSet bool
}

func (v NullableTools) Get() *Tools {
	return v.value
}

func (v *NullableTools) Set(val *Tools) {
	v.value = val
	v.isSet = true
}

func (v NullableTools) IsSet() bool {
	return v.isSet
}

func (v *NullableTools) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTools(val *Tools) *NullableTools {
	return &NullableTools{value: val, isSet: true}
}

func (v NullableTools) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTools) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


