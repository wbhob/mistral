/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// ChatClassificationRequestInputs Chat to classify
type ChatClassificationRequestInputs struct {
	InstructRequest *InstructRequest
	ArrayOfInstructRequest *[]InstructRequest
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ChatClassificationRequestInputs) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into InstructRequest
	err = json.Unmarshal(data, &dst.InstructRequest);
	if err == nil {
		jsonInstructRequest, _ := json.Marshal(dst.InstructRequest)
		if string(jsonInstructRequest) == "{}" { // empty struct
			dst.InstructRequest = nil
		} else {
			return nil // data stored in dst.InstructRequest, return on the first match
		}
	} else {
		dst.InstructRequest = nil
	}

	// try to unmarshal JSON data into ArrayOfInstructRequest
	err = json.Unmarshal(data, &dst.ArrayOfInstructRequest);
	if err == nil {
		jsonArrayOfInstructRequest, _ := json.Marshal(dst.ArrayOfInstructRequest)
		if string(jsonArrayOfInstructRequest) == "{}" { // empty struct
			dst.ArrayOfInstructRequest = nil
		} else {
			return nil // data stored in dst.ArrayOfInstructRequest, return on the first match
		}
	} else {
		dst.ArrayOfInstructRequest = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ChatClassificationRequestInputs)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ChatClassificationRequestInputs) MarshalJSON() ([]byte, error) {
	if src.InstructRequest != nil {
		return json.Marshal(&src.InstructRequest)
	}

	if src.ArrayOfInstructRequest != nil {
		return json.Marshal(&src.ArrayOfInstructRequest)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableChatClassificationRequestInputs struct {
	value *ChatClassificationRequestInputs
	isSet bool
}

func (v NullableChatClassificationRequestInputs) Get() *ChatClassificationRequestInputs {
	return v.value
}

func (v *NullableChatClassificationRequestInputs) Set(val *ChatClassificationRequestInputs) {
	v.value = val
	v.isSet = true
}

func (v NullableChatClassificationRequestInputs) IsSet() bool {
	return v.isSet
}

func (v *NullableChatClassificationRequestInputs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatClassificationRequestInputs(val *ChatClassificationRequestInputs) *NullableChatClassificationRequestInputs {
	return &NullableChatClassificationRequestInputs{value: val, isSet: true}
}

func (v NullableChatClassificationRequestInputs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatClassificationRequestInputs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


