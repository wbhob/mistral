/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// ConversationResponseOutputsInner struct for ConversationResponseOutputsInner
type ConversationResponseOutputsInner struct {
	AgentHandoffEntry *AgentHandoffEntry
	FunctionCallEntry *FunctionCallEntry
	MessageOutputEntry *MessageOutputEntry
	ToolExecutionEntry *ToolExecutionEntry
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ConversationResponseOutputsInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AgentHandoffEntry
	err = json.Unmarshal(data, &dst.AgentHandoffEntry);
	if err == nil {
		jsonAgentHandoffEntry, _ := json.Marshal(dst.AgentHandoffEntry)
		if string(jsonAgentHandoffEntry) == "{}" { // empty struct
			dst.AgentHandoffEntry = nil
		} else {
			return nil // data stored in dst.AgentHandoffEntry, return on the first match
		}
	} else {
		dst.AgentHandoffEntry = nil
	}

	// try to unmarshal JSON data into FunctionCallEntry
	err = json.Unmarshal(data, &dst.FunctionCallEntry);
	if err == nil {
		jsonFunctionCallEntry, _ := json.Marshal(dst.FunctionCallEntry)
		if string(jsonFunctionCallEntry) == "{}" { // empty struct
			dst.FunctionCallEntry = nil
		} else {
			return nil // data stored in dst.FunctionCallEntry, return on the first match
		}
	} else {
		dst.FunctionCallEntry = nil
	}

	// try to unmarshal JSON data into MessageOutputEntry
	err = json.Unmarshal(data, &dst.MessageOutputEntry);
	if err == nil {
		jsonMessageOutputEntry, _ := json.Marshal(dst.MessageOutputEntry)
		if string(jsonMessageOutputEntry) == "{}" { // empty struct
			dst.MessageOutputEntry = nil
		} else {
			return nil // data stored in dst.MessageOutputEntry, return on the first match
		}
	} else {
		dst.MessageOutputEntry = nil
	}

	// try to unmarshal JSON data into ToolExecutionEntry
	err = json.Unmarshal(data, &dst.ToolExecutionEntry);
	if err == nil {
		jsonToolExecutionEntry, _ := json.Marshal(dst.ToolExecutionEntry)
		if string(jsonToolExecutionEntry) == "{}" { // empty struct
			dst.ToolExecutionEntry = nil
		} else {
			return nil // data stored in dst.ToolExecutionEntry, return on the first match
		}
	} else {
		dst.ToolExecutionEntry = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ConversationResponseOutputsInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConversationResponseOutputsInner) MarshalJSON() ([]byte, error) {
	if src.AgentHandoffEntry != nil {
		return json.Marshal(&src.AgentHandoffEntry)
	}

	if src.FunctionCallEntry != nil {
		return json.Marshal(&src.FunctionCallEntry)
	}

	if src.MessageOutputEntry != nil {
		return json.Marshal(&src.MessageOutputEntry)
	}

	if src.ToolExecutionEntry != nil {
		return json.Marshal(&src.ToolExecutionEntry)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableConversationResponseOutputsInner struct {
	value *ConversationResponseOutputsInner
	isSet bool
}

func (v NullableConversationResponseOutputsInner) Get() *ConversationResponseOutputsInner {
	return v.value
}

func (v *NullableConversationResponseOutputsInner) Set(val *ConversationResponseOutputsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationResponseOutputsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationResponseOutputsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationResponseOutputsInner(val *ConversationResponseOutputsInner) *NullableConversationResponseOutputsInner {
	return &NullableConversationResponseOutputsInner{value: val, isSet: true}
}

func (v NullableConversationResponseOutputsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationResponseOutputsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


