/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// JobOutRepositoriesInner - struct for JobOutRepositoriesInner
type JobOutRepositoriesInner struct {
	GithubRepositoryOut *GithubRepositoryOut
}

// GithubRepositoryOutAsJobOutRepositoriesInner is a convenience function that returns GithubRepositoryOut wrapped in JobOutRepositoriesInner
func GithubRepositoryOutAsJobOutRepositoriesInner(v *GithubRepositoryOut) JobOutRepositoriesInner {
	return JobOutRepositoriesInner{
		GithubRepositoryOut: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JobOutRepositoriesInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into GithubRepositoryOut
	err = newStrictDecoder(data).Decode(&dst.GithubRepositoryOut)
	if err == nil {
		jsonGithubRepositoryOut, _ := json.Marshal(dst.GithubRepositoryOut)
		if string(jsonGithubRepositoryOut) == "{}" { // empty struct
			dst.GithubRepositoryOut = nil
		} else {
			if err = validator.Validate(dst.GithubRepositoryOut); err != nil {
				dst.GithubRepositoryOut = nil
			} else {
				match++
			}
		}
	} else {
		dst.GithubRepositoryOut = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GithubRepositoryOut = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JobOutRepositoriesInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JobOutRepositoriesInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JobOutRepositoriesInner) MarshalJSON() ([]byte, error) {
	if src.GithubRepositoryOut != nil {
		return json.Marshal(&src.GithubRepositoryOut)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JobOutRepositoriesInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GithubRepositoryOut != nil {
		return obj.GithubRepositoryOut
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj JobOutRepositoriesInner) GetActualInstanceValue() (interface{}) {
	if obj.GithubRepositoryOut != nil {
		return *obj.GithubRepositoryOut
	}

	// all schemas are nil
	return nil
}

type NullableJobOutRepositoriesInner struct {
	value *JobOutRepositoriesInner
	isSet bool
}

func (v NullableJobOutRepositoriesInner) Get() *JobOutRepositoriesInner {
	return v.value
}

func (v *NullableJobOutRepositoriesInner) Set(val *JobOutRepositoriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableJobOutRepositoriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableJobOutRepositoriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobOutRepositoriesInner(val *JobOutRepositoriesInner) *NullableJobOutRepositoriesInner {
	return &NullableJobOutRepositoriesInner{value: val, isSet: true}
}

func (v NullableJobOutRepositoriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobOutRepositoriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


