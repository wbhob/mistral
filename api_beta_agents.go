/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type BetaAgentsAPI interface {

	/*
	AgentsApiV1AgentsCreate Create a agent that can be used within a conversation.

	Create a new agent giving it instructions, tools, description. The agent is then available to be used as a regular assistant in a conversation or as part of an agent pool from which it can be used.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAgentsApiV1AgentsCreateRequest
	*/
	AgentsApiV1AgentsCreate(ctx context.Context) ApiAgentsApiV1AgentsCreateRequest

	// AgentsApiV1AgentsCreateExecute executes the request
	//  @return Agent
	AgentsApiV1AgentsCreateExecute(r ApiAgentsApiV1AgentsCreateRequest) (*Agent, *http.Response, error)

	/*
	AgentsApiV1AgentsGet Retrieve an agent entity.

	Given an agent retrieve an agent entity with its attributes.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentId
	@return ApiAgentsApiV1AgentsGetRequest
	*/
	AgentsApiV1AgentsGet(ctx context.Context, agentId string) ApiAgentsApiV1AgentsGetRequest

	// AgentsApiV1AgentsGetExecute executes the request
	//  @return Agent
	AgentsApiV1AgentsGetExecute(r ApiAgentsApiV1AgentsGetRequest) (*Agent, *http.Response, error)

	/*
	AgentsApiV1AgentsList List agent entities.

	Retrieve a list of agent entities sorted by creation time.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAgentsApiV1AgentsListRequest
	*/
	AgentsApiV1AgentsList(ctx context.Context) ApiAgentsApiV1AgentsListRequest

	// AgentsApiV1AgentsListExecute executes the request
	//  @return []Agent
	AgentsApiV1AgentsListExecute(r ApiAgentsApiV1AgentsListRequest) ([]Agent, *http.Response, error)

	/*
	AgentsApiV1AgentsUpdate Update an agent entity.

	Update an agent attributes and create a new version.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentId
	@return ApiAgentsApiV1AgentsUpdateRequest
	*/
	AgentsApiV1AgentsUpdate(ctx context.Context, agentId string) ApiAgentsApiV1AgentsUpdateRequest

	// AgentsApiV1AgentsUpdateExecute executes the request
	//  @return Agent
	AgentsApiV1AgentsUpdateExecute(r ApiAgentsApiV1AgentsUpdateRequest) (*Agent, *http.Response, error)

	/*
	AgentsApiV1AgentsUpdateVersion Update an agent version.

	Switch the version of an agent.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param agentId
	@return ApiAgentsApiV1AgentsUpdateVersionRequest
	*/
	AgentsApiV1AgentsUpdateVersion(ctx context.Context, agentId string) ApiAgentsApiV1AgentsUpdateVersionRequest

	// AgentsApiV1AgentsUpdateVersionExecute executes the request
	//  @return Agent
	AgentsApiV1AgentsUpdateVersionExecute(r ApiAgentsApiV1AgentsUpdateVersionRequest) (*Agent, *http.Response, error)
}

// BetaAgentsAPIService BetaAgentsAPI service
type BetaAgentsAPIService service

type ApiAgentsApiV1AgentsCreateRequest struct {
	ctx context.Context
	ApiService BetaAgentsAPI
	agentCreationRequest *AgentCreationRequest
}

func (r ApiAgentsApiV1AgentsCreateRequest) AgentCreationRequest(agentCreationRequest AgentCreationRequest) ApiAgentsApiV1AgentsCreateRequest {
	r.agentCreationRequest = &agentCreationRequest
	return r
}

func (r ApiAgentsApiV1AgentsCreateRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.AgentsApiV1AgentsCreateExecute(r)
}

/*
AgentsApiV1AgentsCreate Create a agent that can be used within a conversation.

Create a new agent giving it instructions, tools, description. The agent is then available to be used as a regular assistant in a conversation or as part of an agent pool from which it can be used.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentsApiV1AgentsCreateRequest
*/
func (a *BetaAgentsAPIService) AgentsApiV1AgentsCreate(ctx context.Context) ApiAgentsApiV1AgentsCreateRequest {
	return ApiAgentsApiV1AgentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Agent
func (a *BetaAgentsAPIService) AgentsApiV1AgentsCreateExecute(r ApiAgentsApiV1AgentsCreateRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAgentsAPIService.AgentsApiV1AgentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/agents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentCreationRequest == nil {
		return localVarReturnValue, nil, reportError("agentCreationRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agentCreationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentsApiV1AgentsGetRequest struct {
	ctx context.Context
	ApiService BetaAgentsAPI
	agentId string
}

func (r ApiAgentsApiV1AgentsGetRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.AgentsApiV1AgentsGetExecute(r)
}

/*
AgentsApiV1AgentsGet Retrieve an agent entity.

Given an agent retrieve an agent entity with its attributes.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId
 @return ApiAgentsApiV1AgentsGetRequest
*/
func (a *BetaAgentsAPIService) AgentsApiV1AgentsGet(ctx context.Context, agentId string) ApiAgentsApiV1AgentsGetRequest {
	return ApiAgentsApiV1AgentsGetRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return Agent
func (a *BetaAgentsAPIService) AgentsApiV1AgentsGetExecute(r ApiAgentsApiV1AgentsGetRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAgentsAPIService.AgentsApiV1AgentsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/agents/{agent_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentsApiV1AgentsListRequest struct {
	ctx context.Context
	ApiService BetaAgentsAPI
	page *int32
	pageSize *int32
}

func (r ApiAgentsApiV1AgentsListRequest) Page(page int32) ApiAgentsApiV1AgentsListRequest {
	r.page = &page
	return r
}

func (r ApiAgentsApiV1AgentsListRequest) PageSize(pageSize int32) ApiAgentsApiV1AgentsListRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiAgentsApiV1AgentsListRequest) Execute() ([]Agent, *http.Response, error) {
	return r.ApiService.AgentsApiV1AgentsListExecute(r)
}

/*
AgentsApiV1AgentsList List agent entities.

Retrieve a list of agent entities sorted by creation time.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAgentsApiV1AgentsListRequest
*/
func (a *BetaAgentsAPIService) AgentsApiV1AgentsList(ctx context.Context) ApiAgentsApiV1AgentsListRequest {
	return ApiAgentsApiV1AgentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []Agent
func (a *BetaAgentsAPIService) AgentsApiV1AgentsListExecute(r ApiAgentsApiV1AgentsListRequest) ([]Agent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAgentsAPIService.AgentsApiV1AgentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/agents"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 20
		r.pageSize = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentsApiV1AgentsUpdateRequest struct {
	ctx context.Context
	ApiService BetaAgentsAPI
	agentId string
	agentUpdateRequest *AgentUpdateRequest
}

func (r ApiAgentsApiV1AgentsUpdateRequest) AgentUpdateRequest(agentUpdateRequest AgentUpdateRequest) ApiAgentsApiV1AgentsUpdateRequest {
	r.agentUpdateRequest = &agentUpdateRequest
	return r
}

func (r ApiAgentsApiV1AgentsUpdateRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.AgentsApiV1AgentsUpdateExecute(r)
}

/*
AgentsApiV1AgentsUpdate Update an agent entity.

Update an agent attributes and create a new version.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId
 @return ApiAgentsApiV1AgentsUpdateRequest
*/
func (a *BetaAgentsAPIService) AgentsApiV1AgentsUpdate(ctx context.Context, agentId string) ApiAgentsApiV1AgentsUpdateRequest {
	return ApiAgentsApiV1AgentsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return Agent
func (a *BetaAgentsAPIService) AgentsApiV1AgentsUpdateExecute(r ApiAgentsApiV1AgentsUpdateRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAgentsAPIService.AgentsApiV1AgentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/agents/{agent_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.agentUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("agentUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.agentUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgentsApiV1AgentsUpdateVersionRequest struct {
	ctx context.Context
	ApiService BetaAgentsAPI
	agentId string
	version *int32
}

func (r ApiAgentsApiV1AgentsUpdateVersionRequest) Version(version int32) ApiAgentsApiV1AgentsUpdateVersionRequest {
	r.version = &version
	return r
}

func (r ApiAgentsApiV1AgentsUpdateVersionRequest) Execute() (*Agent, *http.Response, error) {
	return r.ApiService.AgentsApiV1AgentsUpdateVersionExecute(r)
}

/*
AgentsApiV1AgentsUpdateVersion Update an agent version.

Switch the version of an agent.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agentId
 @return ApiAgentsApiV1AgentsUpdateVersionRequest
*/
func (a *BetaAgentsAPIService) AgentsApiV1AgentsUpdateVersion(ctx context.Context, agentId string) ApiAgentsApiV1AgentsUpdateVersionRequest {
	return ApiAgentsApiV1AgentsUpdateVersionRequest{
		ApiService: a,
		ctx: ctx,
		agentId: agentId,
	}
}

// Execute executes the request
//  @return Agent
func (a *BetaAgentsAPIService) AgentsApiV1AgentsUpdateVersionExecute(r ApiAgentsApiV1AgentsUpdateVersionRequest) (*Agent, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Agent
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BetaAgentsAPIService.AgentsApiV1AgentsUpdateVersion")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/agents/{agent_id}/version"
	localVarPath = strings.Replace(localVarPath, "{"+"agent_id"+"}", url.PathEscape(parameterValueToString(r.agentId, "agentId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.version == nil {
		return localVarReturnValue, nil, reportError("version is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "version", r.version, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
