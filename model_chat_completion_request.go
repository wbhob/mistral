/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the ChatCompletionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatCompletionRequest{}

// ChatCompletionRequest struct for ChatCompletionRequest
type ChatCompletionRequest struct {
	// ID of the model to use. You can use the [List Available Models](/api/#tag/models/operation/list_models_v1_models_get) API to see all of your available models, or see our [Model overview](/models) for model descriptions.
	Model string `json:"model"`
	Temperature *Temperature `json:"temperature,omitempty"`
	// Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered. We generally recommend altering this or `temperature` but not both.
	TopP *float32 `json:"top_p,omitempty"`
	MaxTokens *MaxTokens `json:"max_tokens,omitempty"`
	// Whether to stream back partial progress. If set, tokens will be sent as data-only server-side events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
	Stream *bool `json:"stream,omitempty"`
	Stop *Stop `json:"stop,omitempty"`
	RandomSeed *RandomSeed `json:"random_seed,omitempty"`
	// The prompt(s) to generate completions for, encoded as a list of dict with role and content.
	Messages []MessagesInner `json:"messages"`
	ResponseFormat *ResponseFormat `json:"response_format,omitempty"`
	Tools *Tools `json:"tools,omitempty"`
	ToolChoice *ToolChoice `json:"tool_choice,omitempty"`
	// presence_penalty determines how much the model penalizes the repetition of words or phrases. A higher presence penalty encourages the model to use a wider variety of words and phrases, making the output more diverse and creative.
	PresencePenalty *float32 `json:"presence_penalty,omitempty"`
	// frequency_penalty penalizes the repetition of words based on their frequency in the generated text. A higher frequency penalty discourages the model from repeating words that have already appeared frequently in the output, promoting diversity and reducing repetition.
	FrequencyPenalty *float32 `json:"frequency_penalty,omitempty"`
	N *N `json:"n,omitempty"`
	// Enable users to specify expected results, optimizing response times by leveraging known or predictable content. This approach is especially effective for updating text documents or code files with minimal changes, reducing latency while maintaining high-quality results.
	Prediction *Prediction `json:"prediction,omitempty"`
	ParallelToolCalls *bool `json:"parallel_tool_calls,omitempty"`
	// Whether to inject a safety prompt before all conversations.
	SafePrompt *bool `json:"safe_prompt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChatCompletionRequest ChatCompletionRequest

// NewChatCompletionRequest instantiates a new ChatCompletionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatCompletionRequest(model string, messages []MessagesInner) *ChatCompletionRequest {
	this := ChatCompletionRequest{}
	this.Model = model
	var topP float32 = 1.0
	this.TopP = &topP
	var stream bool = false
	this.Stream = &stream
	this.Messages = messages
	var toolChoice ToolChoice = auto
	this.ToolChoice = &toolChoice
	var presencePenalty float32 = 0.0
	this.PresencePenalty = &presencePenalty
	var frequencyPenalty float32 = 0.0
	this.FrequencyPenalty = &frequencyPenalty
	var parallelToolCalls bool = true
	this.ParallelToolCalls = &parallelToolCalls
	var safePrompt bool = false
	this.SafePrompt = &safePrompt
	return &this
}

// NewChatCompletionRequestWithDefaults instantiates a new ChatCompletionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatCompletionRequestWithDefaults() *ChatCompletionRequest {
	this := ChatCompletionRequest{}
	var topP float32 = 1.0
	this.TopP = &topP
	var stream bool = false
	this.Stream = &stream
	var toolChoice ToolChoice = auto
	this.ToolChoice = &toolChoice
	var presencePenalty float32 = 0.0
	this.PresencePenalty = &presencePenalty
	var frequencyPenalty float32 = 0.0
	this.FrequencyPenalty = &frequencyPenalty
	var parallelToolCalls bool = true
	this.ParallelToolCalls = &parallelToolCalls
	var safePrompt bool = false
	this.SafePrompt = &safePrompt
	return &this
}

// GetModel returns the Model field value
func (o *ChatCompletionRequest) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ChatCompletionRequest) SetModel(v string) {
	o.Model = v
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTemperature() Temperature {
	if o == nil || IsNil(o.Temperature) {
		var ret Temperature
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetTemperatureOk() (*Temperature, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given Temperature and assigns it to the Temperature field.
func (o *ChatCompletionRequest) SetTemperature(v Temperature) {
	o.Temperature = &v
}

// GetTopP returns the TopP field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTopP() float32 {
	if o == nil || IsNil(o.TopP) {
		var ret float32
		return ret
	}
	return *o.TopP
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetTopPOk() (*float32, bool) {
	if o == nil || IsNil(o.TopP) {
		return nil, false
	}
	return o.TopP, true
}

// HasTopP returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTopP() bool {
	if o != nil && !IsNil(o.TopP) {
		return true
	}

	return false
}

// SetTopP gets a reference to the given float32 and assigns it to the TopP field.
func (o *ChatCompletionRequest) SetTopP(v float32) {
	o.TopP = &v
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetMaxTokens() MaxTokens {
	if o == nil || IsNil(o.MaxTokens) {
		var ret MaxTokens
		return ret
	}
	return *o.MaxTokens
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetMaxTokensOk() (*MaxTokens, bool) {
	if o == nil || IsNil(o.MaxTokens) {
		return nil, false
	}
	return o.MaxTokens, true
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasMaxTokens() bool {
	if o != nil && !IsNil(o.MaxTokens) {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given MaxTokens and assigns it to the MaxTokens field.
func (o *ChatCompletionRequest) SetMaxTokens(v MaxTokens) {
	o.MaxTokens = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *ChatCompletionRequest) SetStream(v bool) {
	o.Stream = &v
}

// GetStop returns the Stop field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetStop() Stop {
	if o == nil || IsNil(o.Stop) {
		var ret Stop
		return ret
	}
	return *o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetStopOk() (*Stop, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given Stop and assigns it to the Stop field.
func (o *ChatCompletionRequest) SetStop(v Stop) {
	o.Stop = &v
}

// GetRandomSeed returns the RandomSeed field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetRandomSeed() RandomSeed {
	if o == nil || IsNil(o.RandomSeed) {
		var ret RandomSeed
		return ret
	}
	return *o.RandomSeed
}

// GetRandomSeedOk returns a tuple with the RandomSeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetRandomSeedOk() (*RandomSeed, bool) {
	if o == nil || IsNil(o.RandomSeed) {
		return nil, false
	}
	return o.RandomSeed, true
}

// HasRandomSeed returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasRandomSeed() bool {
	if o != nil && !IsNil(o.RandomSeed) {
		return true
	}

	return false
}

// SetRandomSeed gets a reference to the given RandomSeed and assigns it to the RandomSeed field.
func (o *ChatCompletionRequest) SetRandomSeed(v RandomSeed) {
	o.RandomSeed = &v
}

// GetMessages returns the Messages field value
func (o *ChatCompletionRequest) GetMessages() []MessagesInner {
	if o == nil {
		var ret []MessagesInner
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetMessagesOk() ([]MessagesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *ChatCompletionRequest) SetMessages(v []MessagesInner) {
	o.Messages = v
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetResponseFormat() ResponseFormat {
	if o == nil || IsNil(o.ResponseFormat) {
		var ret ResponseFormat
		return ret
	}
	return *o.ResponseFormat
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetResponseFormatOk() (*ResponseFormat, bool) {
	if o == nil || IsNil(o.ResponseFormat) {
		return nil, false
	}
	return o.ResponseFormat, true
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasResponseFormat() bool {
	if o != nil && !IsNil(o.ResponseFormat) {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given ResponseFormat and assigns it to the ResponseFormat field.
func (o *ChatCompletionRequest) SetResponseFormat(v ResponseFormat) {
	o.ResponseFormat = &v
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetTools() Tools {
	if o == nil || IsNil(o.Tools) {
		var ret Tools
		return ret
	}
	return *o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolsOk() (*Tools, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given Tools and assigns it to the Tools field.
func (o *ChatCompletionRequest) SetTools(v Tools) {
	o.Tools = &v
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetToolChoice() ToolChoice {
	if o == nil || IsNil(o.ToolChoice) {
		var ret ToolChoice
		return ret
	}
	return *o.ToolChoice
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetToolChoiceOk() (*ToolChoice, bool) {
	if o == nil || IsNil(o.ToolChoice) {
		return nil, false
	}
	return o.ToolChoice, true
}

// HasToolChoice returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasToolChoice() bool {
	if o != nil && !IsNil(o.ToolChoice) {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given ToolChoice and assigns it to the ToolChoice field.
func (o *ChatCompletionRequest) SetToolChoice(v ToolChoice) {
	o.ToolChoice = &v
}

// GetPresencePenalty returns the PresencePenalty field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetPresencePenalty() float32 {
	if o == nil || IsNil(o.PresencePenalty) {
		var ret float32
		return ret
	}
	return *o.PresencePenalty
}

// GetPresencePenaltyOk returns a tuple with the PresencePenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetPresencePenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.PresencePenalty) {
		return nil, false
	}
	return o.PresencePenalty, true
}

// HasPresencePenalty returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasPresencePenalty() bool {
	if o != nil && !IsNil(o.PresencePenalty) {
		return true
	}

	return false
}

// SetPresencePenalty gets a reference to the given float32 and assigns it to the PresencePenalty field.
func (o *ChatCompletionRequest) SetPresencePenalty(v float32) {
	o.PresencePenalty = &v
}

// GetFrequencyPenalty returns the FrequencyPenalty field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetFrequencyPenalty() float32 {
	if o == nil || IsNil(o.FrequencyPenalty) {
		var ret float32
		return ret
	}
	return *o.FrequencyPenalty
}

// GetFrequencyPenaltyOk returns a tuple with the FrequencyPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetFrequencyPenaltyOk() (*float32, bool) {
	if o == nil || IsNil(o.FrequencyPenalty) {
		return nil, false
	}
	return o.FrequencyPenalty, true
}

// HasFrequencyPenalty returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasFrequencyPenalty() bool {
	if o != nil && !IsNil(o.FrequencyPenalty) {
		return true
	}

	return false
}

// SetFrequencyPenalty gets a reference to the given float32 and assigns it to the FrequencyPenalty field.
func (o *ChatCompletionRequest) SetFrequencyPenalty(v float32) {
	o.FrequencyPenalty = &v
}

// GetN returns the N field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetN() N {
	if o == nil || IsNil(o.N) {
		var ret N
		return ret
	}
	return *o.N
}

// GetNOk returns a tuple with the N field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetNOk() (*N, bool) {
	if o == nil || IsNil(o.N) {
		return nil, false
	}
	return o.N, true
}

// HasN returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasN() bool {
	if o != nil && !IsNil(o.N) {
		return true
	}

	return false
}

// SetN gets a reference to the given N and assigns it to the N field.
func (o *ChatCompletionRequest) SetN(v N) {
	o.N = &v
}

// GetPrediction returns the Prediction field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetPrediction() Prediction {
	if o == nil || IsNil(o.Prediction) {
		var ret Prediction
		return ret
	}
	return *o.Prediction
}

// GetPredictionOk returns a tuple with the Prediction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetPredictionOk() (*Prediction, bool) {
	if o == nil || IsNil(o.Prediction) {
		return nil, false
	}
	return o.Prediction, true
}

// HasPrediction returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasPrediction() bool {
	if o != nil && !IsNil(o.Prediction) {
		return true
	}

	return false
}

// SetPrediction gets a reference to the given Prediction and assigns it to the Prediction field.
func (o *ChatCompletionRequest) SetPrediction(v Prediction) {
	o.Prediction = &v
}

// GetParallelToolCalls returns the ParallelToolCalls field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetParallelToolCalls() bool {
	if o == nil || IsNil(o.ParallelToolCalls) {
		var ret bool
		return ret
	}
	return *o.ParallelToolCalls
}

// GetParallelToolCallsOk returns a tuple with the ParallelToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetParallelToolCallsOk() (*bool, bool) {
	if o == nil || IsNil(o.ParallelToolCalls) {
		return nil, false
	}
	return o.ParallelToolCalls, true
}

// HasParallelToolCalls returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasParallelToolCalls() bool {
	if o != nil && !IsNil(o.ParallelToolCalls) {
		return true
	}

	return false
}

// SetParallelToolCalls gets a reference to the given bool and assigns it to the ParallelToolCalls field.
func (o *ChatCompletionRequest) SetParallelToolCalls(v bool) {
	o.ParallelToolCalls = &v
}

// GetSafePrompt returns the SafePrompt field value if set, zero value otherwise.
func (o *ChatCompletionRequest) GetSafePrompt() bool {
	if o == nil || IsNil(o.SafePrompt) {
		var ret bool
		return ret
	}
	return *o.SafePrompt
}

// GetSafePromptOk returns a tuple with the SafePrompt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatCompletionRequest) GetSafePromptOk() (*bool, bool) {
	if o == nil || IsNil(o.SafePrompt) {
		return nil, false
	}
	return o.SafePrompt, true
}

// HasSafePrompt returns a boolean if a field has been set.
func (o *ChatCompletionRequest) HasSafePrompt() bool {
	if o != nil && !IsNil(o.SafePrompt) {
		return true
	}

	return false
}

// SetSafePrompt gets a reference to the given bool and assigns it to the SafePrompt field.
func (o *ChatCompletionRequest) SetSafePrompt(v bool) {
	o.SafePrompt = &v
}

func (o ChatCompletionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatCompletionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if !IsNil(o.TopP) {
		toSerialize["top_p"] = o.TopP
	}
	if !IsNil(o.MaxTokens) {
		toSerialize["max_tokens"] = o.MaxTokens
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Stop) {
		toSerialize["stop"] = o.Stop
	}
	if !IsNil(o.RandomSeed) {
		toSerialize["random_seed"] = o.RandomSeed
	}
	toSerialize["messages"] = o.Messages
	if !IsNil(o.ResponseFormat) {
		toSerialize["response_format"] = o.ResponseFormat
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	if !IsNil(o.ToolChoice) {
		toSerialize["tool_choice"] = o.ToolChoice
	}
	if !IsNil(o.PresencePenalty) {
		toSerialize["presence_penalty"] = o.PresencePenalty
	}
	if !IsNil(o.FrequencyPenalty) {
		toSerialize["frequency_penalty"] = o.FrequencyPenalty
	}
	if !IsNil(o.N) {
		toSerialize["n"] = o.N
	}
	if !IsNil(o.Prediction) {
		toSerialize["prediction"] = o.Prediction
	}
	if !IsNil(o.ParallelToolCalls) {
		toSerialize["parallel_tool_calls"] = o.ParallelToolCalls
	}
	if !IsNil(o.SafePrompt) {
		toSerialize["safe_prompt"] = o.SafePrompt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChatCompletionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatCompletionRequest := _ChatCompletionRequest{}

	err = json.Unmarshal(data, &varChatCompletionRequest)

	if err != nil {
		return err
	}

	*o = ChatCompletionRequest(varChatCompletionRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "top_p")
		delete(additionalProperties, "max_tokens")
		delete(additionalProperties, "stream")
		delete(additionalProperties, "stop")
		delete(additionalProperties, "random_seed")
		delete(additionalProperties, "messages")
		delete(additionalProperties, "response_format")
		delete(additionalProperties, "tools")
		delete(additionalProperties, "tool_choice")
		delete(additionalProperties, "presence_penalty")
		delete(additionalProperties, "frequency_penalty")
		delete(additionalProperties, "n")
		delete(additionalProperties, "prediction")
		delete(additionalProperties, "parallel_tool_calls")
		delete(additionalProperties, "safe_prompt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChatCompletionRequest struct {
	value *ChatCompletionRequest
	isSet bool
}

func (v NullableChatCompletionRequest) Get() *ChatCompletionRequest {
	return v.value
}

func (v *NullableChatCompletionRequest) Set(val *ChatCompletionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableChatCompletionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableChatCompletionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatCompletionRequest(val *ChatCompletionRequest) *NullableChatCompletionRequest {
	return &NullableChatCompletionRequest{value: val, isSet: true}
}

func (v NullableChatCompletionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatCompletionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


