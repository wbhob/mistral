/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnarchiveFTModelOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnarchiveFTModelOut{}

// UnarchiveFTModelOut struct for UnarchiveFTModelOut
type UnarchiveFTModelOut struct {
	Id string `json:"id"`
	Object *string `json:"object,omitempty"`
	Archived *bool `json:"archived,omitempty"`
}

type _UnarchiveFTModelOut UnarchiveFTModelOut

// NewUnarchiveFTModelOut instantiates a new UnarchiveFTModelOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnarchiveFTModelOut(id string) *UnarchiveFTModelOut {
	this := UnarchiveFTModelOut{}
	this.Id = id
	var object string = "model"
	this.Object = &object
	var archived bool = false
	this.Archived = &archived
	return &this
}

// NewUnarchiveFTModelOutWithDefaults instantiates a new UnarchiveFTModelOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnarchiveFTModelOutWithDefaults() *UnarchiveFTModelOut {
	this := UnarchiveFTModelOut{}
	var object string = "model"
	this.Object = &object
	var archived bool = false
	this.Archived = &archived
	return &this
}

// GetId returns the Id field value
func (o *UnarchiveFTModelOut) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UnarchiveFTModelOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UnarchiveFTModelOut) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *UnarchiveFTModelOut) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnarchiveFTModelOut) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *UnarchiveFTModelOut) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *UnarchiveFTModelOut) SetObject(v string) {
	o.Object = &v
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *UnarchiveFTModelOut) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnarchiveFTModelOut) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *UnarchiveFTModelOut) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *UnarchiveFTModelOut) SetArchived(v bool) {
	o.Archived = &v
}

func (o UnarchiveFTModelOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnarchiveFTModelOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	return toSerialize, nil
}

func (o *UnarchiveFTModelOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnarchiveFTModelOut := _UnarchiveFTModelOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnarchiveFTModelOut)

	if err != nil {
		return err
	}

	*o = UnarchiveFTModelOut(varUnarchiveFTModelOut)

	return err
}

type NullableUnarchiveFTModelOut struct {
	value *UnarchiveFTModelOut
	isSet bool
}

func (v NullableUnarchiveFTModelOut) Get() *UnarchiveFTModelOut {
	return v.value
}

func (v *NullableUnarchiveFTModelOut) Set(val *UnarchiveFTModelOut) {
	v.value = val
	v.isSet = true
}

func (v NullableUnarchiveFTModelOut) IsSet() bool {
	return v.isSet
}

func (v *NullableUnarchiveFTModelOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnarchiveFTModelOut(val *UnarchiveFTModelOut) *NullableUnarchiveFTModelOut {
	return &NullableUnarchiveFTModelOut{value: val, isSet: true}
}

func (v NullableUnarchiveFTModelOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnarchiveFTModelOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


