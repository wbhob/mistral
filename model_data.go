/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Data - struct for Data
type Data struct {
	AgentHandoffDoneEvent *AgentHandoffDoneEvent
	AgentHandoffStartedEvent *AgentHandoffStartedEvent
	FunctionCallEvent *FunctionCallEvent
	MessageOutputEvent *MessageOutputEvent
	ResponseDoneEvent *ResponseDoneEvent
	ResponseErrorEvent *ResponseErrorEvent
	ResponseStartedEvent *ResponseStartedEvent
	ToolExecutionDeltaEvent *ToolExecutionDeltaEvent
	ToolExecutionDoneEvent *ToolExecutionDoneEvent
	ToolExecutionStartedEvent *ToolExecutionStartedEvent
}

// AgentHandoffDoneEventAsData is a convenience function that returns AgentHandoffDoneEvent wrapped in Data
func AgentHandoffDoneEventAsData(v *AgentHandoffDoneEvent) Data {
	return Data{
		AgentHandoffDoneEvent: v,
	}
}

// AgentHandoffStartedEventAsData is a convenience function that returns AgentHandoffStartedEvent wrapped in Data
func AgentHandoffStartedEventAsData(v *AgentHandoffStartedEvent) Data {
	return Data{
		AgentHandoffStartedEvent: v,
	}
}

// FunctionCallEventAsData is a convenience function that returns FunctionCallEvent wrapped in Data
func FunctionCallEventAsData(v *FunctionCallEvent) Data {
	return Data{
		FunctionCallEvent: v,
	}
}

// MessageOutputEventAsData is a convenience function that returns MessageOutputEvent wrapped in Data
func MessageOutputEventAsData(v *MessageOutputEvent) Data {
	return Data{
		MessageOutputEvent: v,
	}
}

// ResponseDoneEventAsData is a convenience function that returns ResponseDoneEvent wrapped in Data
func ResponseDoneEventAsData(v *ResponseDoneEvent) Data {
	return Data{
		ResponseDoneEvent: v,
	}
}

// ResponseErrorEventAsData is a convenience function that returns ResponseErrorEvent wrapped in Data
func ResponseErrorEventAsData(v *ResponseErrorEvent) Data {
	return Data{
		ResponseErrorEvent: v,
	}
}

// ResponseStartedEventAsData is a convenience function that returns ResponseStartedEvent wrapped in Data
func ResponseStartedEventAsData(v *ResponseStartedEvent) Data {
	return Data{
		ResponseStartedEvent: v,
	}
}

// ToolExecutionDeltaEventAsData is a convenience function that returns ToolExecutionDeltaEvent wrapped in Data
func ToolExecutionDeltaEventAsData(v *ToolExecutionDeltaEvent) Data {
	return Data{
		ToolExecutionDeltaEvent: v,
	}
}

// ToolExecutionDoneEventAsData is a convenience function that returns ToolExecutionDoneEvent wrapped in Data
func ToolExecutionDoneEventAsData(v *ToolExecutionDoneEvent) Data {
	return Data{
		ToolExecutionDoneEvent: v,
	}
}

// ToolExecutionStartedEventAsData is a convenience function that returns ToolExecutionStartedEvent wrapped in Data
func ToolExecutionStartedEventAsData(v *ToolExecutionStartedEvent) Data {
	return Data{
		ToolExecutionStartedEvent: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Data) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AgentHandoffDoneEvent
	err = newStrictDecoder(data).Decode(&dst.AgentHandoffDoneEvent)
	if err == nil {
		jsonAgentHandoffDoneEvent, _ := json.Marshal(dst.AgentHandoffDoneEvent)
		if string(jsonAgentHandoffDoneEvent) == "{}" { // empty struct
			dst.AgentHandoffDoneEvent = nil
		} else {
			if err = validator.Validate(dst.AgentHandoffDoneEvent); err != nil {
				dst.AgentHandoffDoneEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentHandoffDoneEvent = nil
	}

	// try to unmarshal data into AgentHandoffStartedEvent
	err = newStrictDecoder(data).Decode(&dst.AgentHandoffStartedEvent)
	if err == nil {
		jsonAgentHandoffStartedEvent, _ := json.Marshal(dst.AgentHandoffStartedEvent)
		if string(jsonAgentHandoffStartedEvent) == "{}" { // empty struct
			dst.AgentHandoffStartedEvent = nil
		} else {
			if err = validator.Validate(dst.AgentHandoffStartedEvent); err != nil {
				dst.AgentHandoffStartedEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.AgentHandoffStartedEvent = nil
	}

	// try to unmarshal data into FunctionCallEvent
	err = newStrictDecoder(data).Decode(&dst.FunctionCallEvent)
	if err == nil {
		jsonFunctionCallEvent, _ := json.Marshal(dst.FunctionCallEvent)
		if string(jsonFunctionCallEvent) == "{}" { // empty struct
			dst.FunctionCallEvent = nil
		} else {
			if err = validator.Validate(dst.FunctionCallEvent); err != nil {
				dst.FunctionCallEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.FunctionCallEvent = nil
	}

	// try to unmarshal data into MessageOutputEvent
	err = newStrictDecoder(data).Decode(&dst.MessageOutputEvent)
	if err == nil {
		jsonMessageOutputEvent, _ := json.Marshal(dst.MessageOutputEvent)
		if string(jsonMessageOutputEvent) == "{}" { // empty struct
			dst.MessageOutputEvent = nil
		} else {
			if err = validator.Validate(dst.MessageOutputEvent); err != nil {
				dst.MessageOutputEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.MessageOutputEvent = nil
	}

	// try to unmarshal data into ResponseDoneEvent
	err = newStrictDecoder(data).Decode(&dst.ResponseDoneEvent)
	if err == nil {
		jsonResponseDoneEvent, _ := json.Marshal(dst.ResponseDoneEvent)
		if string(jsonResponseDoneEvent) == "{}" { // empty struct
			dst.ResponseDoneEvent = nil
		} else {
			if err = validator.Validate(dst.ResponseDoneEvent); err != nil {
				dst.ResponseDoneEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseDoneEvent = nil
	}

	// try to unmarshal data into ResponseErrorEvent
	err = newStrictDecoder(data).Decode(&dst.ResponseErrorEvent)
	if err == nil {
		jsonResponseErrorEvent, _ := json.Marshal(dst.ResponseErrorEvent)
		if string(jsonResponseErrorEvent) == "{}" { // empty struct
			dst.ResponseErrorEvent = nil
		} else {
			if err = validator.Validate(dst.ResponseErrorEvent); err != nil {
				dst.ResponseErrorEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseErrorEvent = nil
	}

	// try to unmarshal data into ResponseStartedEvent
	err = newStrictDecoder(data).Decode(&dst.ResponseStartedEvent)
	if err == nil {
		jsonResponseStartedEvent, _ := json.Marshal(dst.ResponseStartedEvent)
		if string(jsonResponseStartedEvent) == "{}" { // empty struct
			dst.ResponseStartedEvent = nil
		} else {
			if err = validator.Validate(dst.ResponseStartedEvent); err != nil {
				dst.ResponseStartedEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ResponseStartedEvent = nil
	}

	// try to unmarshal data into ToolExecutionDeltaEvent
	err = newStrictDecoder(data).Decode(&dst.ToolExecutionDeltaEvent)
	if err == nil {
		jsonToolExecutionDeltaEvent, _ := json.Marshal(dst.ToolExecutionDeltaEvent)
		if string(jsonToolExecutionDeltaEvent) == "{}" { // empty struct
			dst.ToolExecutionDeltaEvent = nil
		} else {
			if err = validator.Validate(dst.ToolExecutionDeltaEvent); err != nil {
				dst.ToolExecutionDeltaEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolExecutionDeltaEvent = nil
	}

	// try to unmarshal data into ToolExecutionDoneEvent
	err = newStrictDecoder(data).Decode(&dst.ToolExecutionDoneEvent)
	if err == nil {
		jsonToolExecutionDoneEvent, _ := json.Marshal(dst.ToolExecutionDoneEvent)
		if string(jsonToolExecutionDoneEvent) == "{}" { // empty struct
			dst.ToolExecutionDoneEvent = nil
		} else {
			if err = validator.Validate(dst.ToolExecutionDoneEvent); err != nil {
				dst.ToolExecutionDoneEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolExecutionDoneEvent = nil
	}

	// try to unmarshal data into ToolExecutionStartedEvent
	err = newStrictDecoder(data).Decode(&dst.ToolExecutionStartedEvent)
	if err == nil {
		jsonToolExecutionStartedEvent, _ := json.Marshal(dst.ToolExecutionStartedEvent)
		if string(jsonToolExecutionStartedEvent) == "{}" { // empty struct
			dst.ToolExecutionStartedEvent = nil
		} else {
			if err = validator.Validate(dst.ToolExecutionStartedEvent); err != nil {
				dst.ToolExecutionStartedEvent = nil
			} else {
				match++
			}
		}
	} else {
		dst.ToolExecutionStartedEvent = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AgentHandoffDoneEvent = nil
		dst.AgentHandoffStartedEvent = nil
		dst.FunctionCallEvent = nil
		dst.MessageOutputEvent = nil
		dst.ResponseDoneEvent = nil
		dst.ResponseErrorEvent = nil
		dst.ResponseStartedEvent = nil
		dst.ToolExecutionDeltaEvent = nil
		dst.ToolExecutionDoneEvent = nil
		dst.ToolExecutionStartedEvent = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Data)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Data)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Data) MarshalJSON() ([]byte, error) {
	if src.AgentHandoffDoneEvent != nil {
		return json.Marshal(&src.AgentHandoffDoneEvent)
	}

	if src.AgentHandoffStartedEvent != nil {
		return json.Marshal(&src.AgentHandoffStartedEvent)
	}

	if src.FunctionCallEvent != nil {
		return json.Marshal(&src.FunctionCallEvent)
	}

	if src.MessageOutputEvent != nil {
		return json.Marshal(&src.MessageOutputEvent)
	}

	if src.ResponseDoneEvent != nil {
		return json.Marshal(&src.ResponseDoneEvent)
	}

	if src.ResponseErrorEvent != nil {
		return json.Marshal(&src.ResponseErrorEvent)
	}

	if src.ResponseStartedEvent != nil {
		return json.Marshal(&src.ResponseStartedEvent)
	}

	if src.ToolExecutionDeltaEvent != nil {
		return json.Marshal(&src.ToolExecutionDeltaEvent)
	}

	if src.ToolExecutionDoneEvent != nil {
		return json.Marshal(&src.ToolExecutionDoneEvent)
	}

	if src.ToolExecutionStartedEvent != nil {
		return json.Marshal(&src.ToolExecutionStartedEvent)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Data) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AgentHandoffDoneEvent != nil {
		return obj.AgentHandoffDoneEvent
	}

	if obj.AgentHandoffStartedEvent != nil {
		return obj.AgentHandoffStartedEvent
	}

	if obj.FunctionCallEvent != nil {
		return obj.FunctionCallEvent
	}

	if obj.MessageOutputEvent != nil {
		return obj.MessageOutputEvent
	}

	if obj.ResponseDoneEvent != nil {
		return obj.ResponseDoneEvent
	}

	if obj.ResponseErrorEvent != nil {
		return obj.ResponseErrorEvent
	}

	if obj.ResponseStartedEvent != nil {
		return obj.ResponseStartedEvent
	}

	if obj.ToolExecutionDeltaEvent != nil {
		return obj.ToolExecutionDeltaEvent
	}

	if obj.ToolExecutionDoneEvent != nil {
		return obj.ToolExecutionDoneEvent
	}

	if obj.ToolExecutionStartedEvent != nil {
		return obj.ToolExecutionStartedEvent
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Data) GetActualInstanceValue() (interface{}) {
	if obj.AgentHandoffDoneEvent != nil {
		return *obj.AgentHandoffDoneEvent
	}

	if obj.AgentHandoffStartedEvent != nil {
		return *obj.AgentHandoffStartedEvent
	}

	if obj.FunctionCallEvent != nil {
		return *obj.FunctionCallEvent
	}

	if obj.MessageOutputEvent != nil {
		return *obj.MessageOutputEvent
	}

	if obj.ResponseDoneEvent != nil {
		return *obj.ResponseDoneEvent
	}

	if obj.ResponseErrorEvent != nil {
		return *obj.ResponseErrorEvent
	}

	if obj.ResponseStartedEvent != nil {
		return *obj.ResponseStartedEvent
	}

	if obj.ToolExecutionDeltaEvent != nil {
		return *obj.ToolExecutionDeltaEvent
	}

	if obj.ToolExecutionDoneEvent != nil {
		return *obj.ToolExecutionDoneEvent
	}

	if obj.ToolExecutionStartedEvent != nil {
		return *obj.ToolExecutionStartedEvent
	}

	// all schemas are nil
	return nil
}

type NullableData struct {
	value *Data
	isSet bool
}

func (v NullableData) Get() *Data {
	return v.value
}

func (v *NullableData) Set(val *Data) {
	v.value = val
	v.isSet = true
}

func (v NullableData) IsSet() bool {
	return v.isSet
}

func (v *NullableData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableData(val *Data) *NullableData {
	return &NullableData{value: val, isSet: true}
}

func (v NullableData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


