/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// Connectors struct for Connectors
type Connectors struct {
	Any *interface{}
	MapmapOfStringint32 *map[string]int32
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Connectors) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into Any
	err = json.Unmarshal(data, &dst.Any);
	if err == nil {
		jsonAny, _ := json.Marshal(dst.Any)
		if string(jsonAny) == "{}" { // empty struct
			dst.Any = nil
		} else {
			return nil // data stored in dst.Any, return on the first match
		}
	} else {
		dst.Any = nil
	}

	// try to unmarshal JSON data into MapmapOfStringint32
	err = json.Unmarshal(data, &dst.MapmapOfStringint32);
	if err == nil {
		jsonMapmapOfStringint32, _ := json.Marshal(dst.MapmapOfStringint32)
		if string(jsonMapmapOfStringint32) == "{}" { // empty struct
			dst.MapmapOfStringint32 = nil
		} else {
			return nil // data stored in dst.MapmapOfStringint32, return on the first match
		}
	} else {
		dst.MapmapOfStringint32 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Connectors)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Connectors) MarshalJSON() ([]byte, error) {
	if src.Any != nil {
		return json.Marshal(&src.Any)
	}

	if src.MapmapOfStringint32 != nil {
		return json.Marshal(&src.MapmapOfStringint32)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableConnectors struct {
	value *Connectors
	isSet bool
}

func (v NullableConnectors) Get() *Connectors {
	return v.value
}

func (v *NullableConnectors) Set(val *Connectors) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectors) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectors(val *Connectors) *NullableConnectors {
	return &NullableConnectors{value: val, isSet: true}
}

func (v NullableConnectors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


