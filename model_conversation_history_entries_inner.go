/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// ConversationHistoryEntriesInner struct for ConversationHistoryEntriesInner
type ConversationHistoryEntriesInner struct {
	AgentHandoffEntry *AgentHandoffEntry
	FunctionCallEntry *FunctionCallEntry
	FunctionResultEntry *FunctionResultEntry
	MessageInputEntry *MessageInputEntry
	MessageOutputEntry *MessageOutputEntry
	ToolExecutionEntry *ToolExecutionEntry
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ConversationHistoryEntriesInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into AgentHandoffEntry
	err = json.Unmarshal(data, &dst.AgentHandoffEntry);
	if err == nil {
		jsonAgentHandoffEntry, _ := json.Marshal(dst.AgentHandoffEntry)
		if string(jsonAgentHandoffEntry) == "{}" { // empty struct
			dst.AgentHandoffEntry = nil
		} else {
			return nil // data stored in dst.AgentHandoffEntry, return on the first match
		}
	} else {
		dst.AgentHandoffEntry = nil
	}

	// try to unmarshal JSON data into FunctionCallEntry
	err = json.Unmarshal(data, &dst.FunctionCallEntry);
	if err == nil {
		jsonFunctionCallEntry, _ := json.Marshal(dst.FunctionCallEntry)
		if string(jsonFunctionCallEntry) == "{}" { // empty struct
			dst.FunctionCallEntry = nil
		} else {
			return nil // data stored in dst.FunctionCallEntry, return on the first match
		}
	} else {
		dst.FunctionCallEntry = nil
	}

	// try to unmarshal JSON data into FunctionResultEntry
	err = json.Unmarshal(data, &dst.FunctionResultEntry);
	if err == nil {
		jsonFunctionResultEntry, _ := json.Marshal(dst.FunctionResultEntry)
		if string(jsonFunctionResultEntry) == "{}" { // empty struct
			dst.FunctionResultEntry = nil
		} else {
			return nil // data stored in dst.FunctionResultEntry, return on the first match
		}
	} else {
		dst.FunctionResultEntry = nil
	}

	// try to unmarshal JSON data into MessageInputEntry
	err = json.Unmarshal(data, &dst.MessageInputEntry);
	if err == nil {
		jsonMessageInputEntry, _ := json.Marshal(dst.MessageInputEntry)
		if string(jsonMessageInputEntry) == "{}" { // empty struct
			dst.MessageInputEntry = nil
		} else {
			return nil // data stored in dst.MessageInputEntry, return on the first match
		}
	} else {
		dst.MessageInputEntry = nil
	}

	// try to unmarshal JSON data into MessageOutputEntry
	err = json.Unmarshal(data, &dst.MessageOutputEntry);
	if err == nil {
		jsonMessageOutputEntry, _ := json.Marshal(dst.MessageOutputEntry)
		if string(jsonMessageOutputEntry) == "{}" { // empty struct
			dst.MessageOutputEntry = nil
		} else {
			return nil // data stored in dst.MessageOutputEntry, return on the first match
		}
	} else {
		dst.MessageOutputEntry = nil
	}

	// try to unmarshal JSON data into ToolExecutionEntry
	err = json.Unmarshal(data, &dst.ToolExecutionEntry);
	if err == nil {
		jsonToolExecutionEntry, _ := json.Marshal(dst.ToolExecutionEntry)
		if string(jsonToolExecutionEntry) == "{}" { // empty struct
			dst.ToolExecutionEntry = nil
		} else {
			return nil // data stored in dst.ToolExecutionEntry, return on the first match
		}
	} else {
		dst.ToolExecutionEntry = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ConversationHistoryEntriesInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ConversationHistoryEntriesInner) MarshalJSON() ([]byte, error) {
	if src.AgentHandoffEntry != nil {
		return json.Marshal(&src.AgentHandoffEntry)
	}

	if src.FunctionCallEntry != nil {
		return json.Marshal(&src.FunctionCallEntry)
	}

	if src.FunctionResultEntry != nil {
		return json.Marshal(&src.FunctionResultEntry)
	}

	if src.MessageInputEntry != nil {
		return json.Marshal(&src.MessageInputEntry)
	}

	if src.MessageOutputEntry != nil {
		return json.Marshal(&src.MessageOutputEntry)
	}

	if src.ToolExecutionEntry != nil {
		return json.Marshal(&src.ToolExecutionEntry)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableConversationHistoryEntriesInner struct {
	value *ConversationHistoryEntriesInner
	isSet bool
}

func (v NullableConversationHistoryEntriesInner) Get() *ConversationHistoryEntriesInner {
	return v.value
}

func (v *NullableConversationHistoryEntriesInner) Set(val *ConversationHistoryEntriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationHistoryEntriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationHistoryEntriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationHistoryEntriesInner(val *ConversationHistoryEntriesInner) *NullableConversationHistoryEntriesInner {
	return &NullableConversationHistoryEntriesInner{value: val, isSet: true}
}

func (v NullableConversationHistoryEntriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationHistoryEntriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


