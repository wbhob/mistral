/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ModelConversation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelConversation{}

// ModelConversation struct for ModelConversation
type ModelConversation struct {
	Instructions NullableString `json:"instructions,omitempty"`
	// List of tools which are available to the model during the conversation.
	Tools []AgentToolsInner `json:"tools,omitempty"`
	// Completion arguments that will be used to generate assistant responses. Can be overridden at each message request.
	CompletionArgs *CompletionArgs `json:"completion_args,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Object *string `json:"object,omitempty"`
	Id string `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Model string `json:"model"`
	AdditionalProperties map[string]interface{}
}

type _ModelConversation ModelConversation

// NewModelConversation instantiates a new ModelConversation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelConversation(id string, createdAt time.Time, updatedAt time.Time, model string) *ModelConversation {
	this := ModelConversation{}
	var object string = "conversation"
	this.Object = &object
	this.Id = id
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	this.Model = model
	return &this
}

// NewModelConversationWithDefaults instantiates a new ModelConversation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelConversationWithDefaults() *ModelConversation {
	this := ModelConversation{}
	var object string = "conversation"
	this.Object = &object
	return &this
}

// GetInstructions returns the Instructions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelConversation) GetInstructions() string {
	if o == nil || IsNil(o.Instructions.Get()) {
		var ret string
		return ret
	}
	return *o.Instructions.Get()
}

// GetInstructionsOk returns a tuple with the Instructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelConversation) GetInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instructions.Get(), o.Instructions.IsSet()
}

// HasInstructions returns a boolean if a field has been set.
func (o *ModelConversation) HasInstructions() bool {
	if o != nil && o.Instructions.IsSet() {
		return true
	}

	return false
}

// SetInstructions gets a reference to the given NullableString and assigns it to the Instructions field.
func (o *ModelConversation) SetInstructions(v string) {
	o.Instructions.Set(&v)
}
// SetInstructionsNil sets the value for Instructions to be an explicit nil
func (o *ModelConversation) SetInstructionsNil() {
	o.Instructions.Set(nil)
}

// UnsetInstructions ensures that no value is present for Instructions, not even an explicit nil
func (o *ModelConversation) UnsetInstructions() {
	o.Instructions.Unset()
}

// GetTools returns the Tools field value if set, zero value otherwise.
func (o *ModelConversation) GetTools() []AgentToolsInner {
	if o == nil || IsNil(o.Tools) {
		var ret []AgentToolsInner
		return ret
	}
	return o.Tools
}

// GetToolsOk returns a tuple with the Tools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConversation) GetToolsOk() ([]AgentToolsInner, bool) {
	if o == nil || IsNil(o.Tools) {
		return nil, false
	}
	return o.Tools, true
}

// HasTools returns a boolean if a field has been set.
func (o *ModelConversation) HasTools() bool {
	if o != nil && !IsNil(o.Tools) {
		return true
	}

	return false
}

// SetTools gets a reference to the given []AgentToolsInner and assigns it to the Tools field.
func (o *ModelConversation) SetTools(v []AgentToolsInner) {
	o.Tools = v
}

// GetCompletionArgs returns the CompletionArgs field value if set, zero value otherwise.
func (o *ModelConversation) GetCompletionArgs() CompletionArgs {
	if o == nil || IsNil(o.CompletionArgs) {
		var ret CompletionArgs
		return ret
	}
	return *o.CompletionArgs
}

// GetCompletionArgsOk returns a tuple with the CompletionArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConversation) GetCompletionArgsOk() (*CompletionArgs, bool) {
	if o == nil || IsNil(o.CompletionArgs) {
		return nil, false
	}
	return o.CompletionArgs, true
}

// HasCompletionArgs returns a boolean if a field has been set.
func (o *ModelConversation) HasCompletionArgs() bool {
	if o != nil && !IsNil(o.CompletionArgs) {
		return true
	}

	return false
}

// SetCompletionArgs gets a reference to the given CompletionArgs and assigns it to the CompletionArgs field.
func (o *ModelConversation) SetCompletionArgs(v CompletionArgs) {
	o.CompletionArgs = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelConversation) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelConversation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ModelConversation) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ModelConversation) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ModelConversation) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ModelConversation) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelConversation) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelConversation) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelConversation) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ModelConversation) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ModelConversation) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ModelConversation) UnsetDescription() {
	o.Description.Unset()
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ModelConversation) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelConversation) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ModelConversation) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ModelConversation) SetObject(v string) {
	o.Object = &v
}

// GetId returns the Id field value
func (o *ModelConversation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelConversation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelConversation) SetId(v string) {
	o.Id = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ModelConversation) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ModelConversation) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ModelConversation) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ModelConversation) GetUpdatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ModelConversation) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ModelConversation) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = v
}

// GetModel returns the Model field value
func (o *ModelConversation) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ModelConversation) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ModelConversation) SetModel(v string) {
	o.Model = v
}

func (o ModelConversation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelConversation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Instructions.IsSet() {
		toSerialize["instructions"] = o.Instructions.Get()
	}
	if !IsNil(o.Tools) {
		toSerialize["tools"] = o.Tools
	}
	if !IsNil(o.CompletionArgs) {
		toSerialize["completion_args"] = o.CompletionArgs
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["id"] = o.Id
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["model"] = o.Model

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelConversation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created_at",
		"updated_at",
		"model",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelConversation := _ModelConversation{}

	err = json.Unmarshal(data, &varModelConversation)

	if err != nil {
		return err
	}

	*o = ModelConversation(varModelConversation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "instructions")
		delete(additionalProperties, "tools")
		delete(additionalProperties, "completion_args")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "object")
		delete(additionalProperties, "id")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "updated_at")
		delete(additionalProperties, "model")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelConversation struct {
	value *ModelConversation
	isSet bool
}

func (v NullableModelConversation) Get() *ModelConversation {
	return v.value
}

func (v *NullableModelConversation) Set(val *ModelConversation) {
	v.value = val
	v.isSet = true
}

func (v NullableModelConversation) IsSet() bool {
	return v.isSet
}

func (v *NullableModelConversation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelConversation(val *ModelConversation) *NullableModelConversation {
	return &NullableModelConversation{value: val, isSet: true}
}

func (v NullableModelConversation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelConversation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


