/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrainingFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrainingFile{}

// TrainingFile struct for TrainingFile
type TrainingFile struct {
	FileId string `json:"file_id"`
	Weight *float32 `json:"weight,omitempty"`
}

type _TrainingFile TrainingFile

// NewTrainingFile instantiates a new TrainingFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrainingFile(fileId string) *TrainingFile {
	this := TrainingFile{}
	this.FileId = fileId
	var weight float32 = 1.0
	this.Weight = &weight
	return &this
}

// NewTrainingFileWithDefaults instantiates a new TrainingFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrainingFileWithDefaults() *TrainingFile {
	this := TrainingFile{}
	var weight float32 = 1.0
	this.Weight = &weight
	return &this
}

// GetFileId returns the FileId field value
func (o *TrainingFile) GetFileId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value
// and a boolean to check if the value has been set.
func (o *TrainingFile) GetFileIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileId, true
}

// SetFileId sets field value
func (o *TrainingFile) SetFileId(v string) {
	o.FileId = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *TrainingFile) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrainingFile) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *TrainingFile) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *TrainingFile) SetWeight(v float32) {
	o.Weight = &v
}

func (o TrainingFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrainingFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_id"] = o.FileId
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

func (o *TrainingFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrainingFile := _TrainingFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrainingFile)

	if err != nil {
		return err
	}

	*o = TrainingFile(varTrainingFile)

	return err
}

type NullableTrainingFile struct {
	value *TrainingFile
	isSet bool
}

func (v NullableTrainingFile) Get() *TrainingFile {
	return v.value
}

func (v *NullableTrainingFile) Set(val *TrainingFile) {
	v.value = val
	v.isSet = true
}

func (v NullableTrainingFile) IsSet() bool {
	return v.isSet
}

func (v *NullableTrainingFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrainingFile(val *TrainingFile) *NullableTrainingFile {
	return &NullableTrainingFile{value: val, isSet: true}
}

func (v NullableTrainingFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrainingFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


