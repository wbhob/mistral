/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the DocumentOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentOut{}

// DocumentOut struct for DocumentOut
type DocumentOut struct {
	Id string `json:"id"`
	LibraryId string `json:"library_id"`
	Hash string `json:"hash"`
	MimeType string `json:"mime_type"`
	Extension string `json:"extension"`
	Size int32 `json:"size"`
	Name string `json:"name"`
	Summary NullableString `json:"summary,omitempty"`
	CreatedAt time.Time `json:"created_at"`
	LastProcessedAt NullableTime `json:"last_processed_at,omitempty"`
	NumberOfPages NullableInt32 `json:"number_of_pages,omitempty"`
	ProcessingStatus string `json:"processing_status"`
	UploadedById string `json:"uploaded_by_id"`
	UploadedByType string `json:"uploaded_by_type"`
	TokensProcessingMainContent NullableInt32 `json:"tokens_processing_main_content,omitempty"`
	TokensProcessingSummary NullableInt32 `json:"tokens_processing_summary,omitempty"`
	TokensProcessingTotal int32 `json:"tokens_processing_total"`
}

type _DocumentOut DocumentOut

// NewDocumentOut instantiates a new DocumentOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentOut(id string, libraryId string, hash string, mimeType string, extension string, size int32, name string, createdAt time.Time, processingStatus string, uploadedById string, uploadedByType string, tokensProcessingTotal int32) *DocumentOut {
	this := DocumentOut{}
	this.Id = id
	this.LibraryId = libraryId
	this.Hash = hash
	this.MimeType = mimeType
	this.Extension = extension
	this.Size = size
	this.Name = name
	this.CreatedAt = createdAt
	this.ProcessingStatus = processingStatus
	this.UploadedById = uploadedById
	this.UploadedByType = uploadedByType
	this.TokensProcessingTotal = tokensProcessingTotal
	return &this
}

// NewDocumentOutWithDefaults instantiates a new DocumentOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentOutWithDefaults() *DocumentOut {
	this := DocumentOut{}
	return &this
}

// GetId returns the Id field value
func (o *DocumentOut) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DocumentOut) SetId(v string) {
	o.Id = v
}

// GetLibraryId returns the LibraryId field value
func (o *DocumentOut) GetLibraryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LibraryId
}

// GetLibraryIdOk returns a tuple with the LibraryId field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetLibraryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LibraryId, true
}

// SetLibraryId sets field value
func (o *DocumentOut) SetLibraryId(v string) {
	o.LibraryId = v
}

// GetHash returns the Hash field value
func (o *DocumentOut) GetHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hash, true
}

// SetHash sets field value
func (o *DocumentOut) SetHash(v string) {
	o.Hash = v
}

// GetMimeType returns the MimeType field value
func (o *DocumentOut) GetMimeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetMimeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MimeType, true
}

// SetMimeType sets field value
func (o *DocumentOut) SetMimeType(v string) {
	o.MimeType = v
}

// GetExtension returns the Extension field value
func (o *DocumentOut) GetExtension() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Extension
}

// GetExtensionOk returns a tuple with the Extension field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetExtensionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Extension, true
}

// SetExtension sets field value
func (o *DocumentOut) SetExtension(v string) {
	o.Extension = v
}

// GetSize returns the Size field value
func (o *DocumentOut) GetSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Size
}

// GetSizeOk returns a tuple with the Size field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Size, true
}

// SetSize sets field value
func (o *DocumentOut) SetSize(v int32) {
	o.Size = v
}

// GetName returns the Name field value
func (o *DocumentOut) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DocumentOut) SetName(v string) {
	o.Name = v
}

// GetSummary returns the Summary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentOut) GetSummary() string {
	if o == nil || IsNil(o.Summary.Get()) {
		var ret string
		return ret
	}
	return *o.Summary.Get()
}

// GetSummaryOk returns a tuple with the Summary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentOut) GetSummaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summary.Get(), o.Summary.IsSet()
}

// HasSummary returns a boolean if a field has been set.
func (o *DocumentOut) HasSummary() bool {
	if o != nil && o.Summary.IsSet() {
		return true
	}

	return false
}

// SetSummary gets a reference to the given NullableString and assigns it to the Summary field.
func (o *DocumentOut) SetSummary(v string) {
	o.Summary.Set(&v)
}
// SetSummaryNil sets the value for Summary to be an explicit nil
func (o *DocumentOut) SetSummaryNil() {
	o.Summary.Set(nil)
}

// UnsetSummary ensures that no value is present for Summary, not even an explicit nil
func (o *DocumentOut) UnsetSummary() {
	o.Summary.Unset()
}

// GetCreatedAt returns the CreatedAt field value
func (o *DocumentOut) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *DocumentOut) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetLastProcessedAt returns the LastProcessedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentOut) GetLastProcessedAt() time.Time {
	if o == nil || IsNil(o.LastProcessedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.LastProcessedAt.Get()
}

// GetLastProcessedAtOk returns a tuple with the LastProcessedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentOut) GetLastProcessedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastProcessedAt.Get(), o.LastProcessedAt.IsSet()
}

// HasLastProcessedAt returns a boolean if a field has been set.
func (o *DocumentOut) HasLastProcessedAt() bool {
	if o != nil && o.LastProcessedAt.IsSet() {
		return true
	}

	return false
}

// SetLastProcessedAt gets a reference to the given NullableTime and assigns it to the LastProcessedAt field.
func (o *DocumentOut) SetLastProcessedAt(v time.Time) {
	o.LastProcessedAt.Set(&v)
}
// SetLastProcessedAtNil sets the value for LastProcessedAt to be an explicit nil
func (o *DocumentOut) SetLastProcessedAtNil() {
	o.LastProcessedAt.Set(nil)
}

// UnsetLastProcessedAt ensures that no value is present for LastProcessedAt, not even an explicit nil
func (o *DocumentOut) UnsetLastProcessedAt() {
	o.LastProcessedAt.Unset()
}

// GetNumberOfPages returns the NumberOfPages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentOut) GetNumberOfPages() int32 {
	if o == nil || IsNil(o.NumberOfPages.Get()) {
		var ret int32
		return ret
	}
	return *o.NumberOfPages.Get()
}

// GetNumberOfPagesOk returns a tuple with the NumberOfPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentOut) GetNumberOfPagesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberOfPages.Get(), o.NumberOfPages.IsSet()
}

// HasNumberOfPages returns a boolean if a field has been set.
func (o *DocumentOut) HasNumberOfPages() bool {
	if o != nil && o.NumberOfPages.IsSet() {
		return true
	}

	return false
}

// SetNumberOfPages gets a reference to the given NullableInt32 and assigns it to the NumberOfPages field.
func (o *DocumentOut) SetNumberOfPages(v int32) {
	o.NumberOfPages.Set(&v)
}
// SetNumberOfPagesNil sets the value for NumberOfPages to be an explicit nil
func (o *DocumentOut) SetNumberOfPagesNil() {
	o.NumberOfPages.Set(nil)
}

// UnsetNumberOfPages ensures that no value is present for NumberOfPages, not even an explicit nil
func (o *DocumentOut) UnsetNumberOfPages() {
	o.NumberOfPages.Unset()
}

// GetProcessingStatus returns the ProcessingStatus field value
func (o *DocumentOut) GetProcessingStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessingStatus
}

// GetProcessingStatusOk returns a tuple with the ProcessingStatus field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetProcessingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessingStatus, true
}

// SetProcessingStatus sets field value
func (o *DocumentOut) SetProcessingStatus(v string) {
	o.ProcessingStatus = v
}

// GetUploadedById returns the UploadedById field value
func (o *DocumentOut) GetUploadedById() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadedById
}

// GetUploadedByIdOk returns a tuple with the UploadedById field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetUploadedByIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedById, true
}

// SetUploadedById sets field value
func (o *DocumentOut) SetUploadedById(v string) {
	o.UploadedById = v
}

// GetUploadedByType returns the UploadedByType field value
func (o *DocumentOut) GetUploadedByType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UploadedByType
}

// GetUploadedByTypeOk returns a tuple with the UploadedByType field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetUploadedByTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UploadedByType, true
}

// SetUploadedByType sets field value
func (o *DocumentOut) SetUploadedByType(v string) {
	o.UploadedByType = v
}

// GetTokensProcessingMainContent returns the TokensProcessingMainContent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentOut) GetTokensProcessingMainContent() int32 {
	if o == nil || IsNil(o.TokensProcessingMainContent.Get()) {
		var ret int32
		return ret
	}
	return *o.TokensProcessingMainContent.Get()
}

// GetTokensProcessingMainContentOk returns a tuple with the TokensProcessingMainContent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentOut) GetTokensProcessingMainContentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokensProcessingMainContent.Get(), o.TokensProcessingMainContent.IsSet()
}

// HasTokensProcessingMainContent returns a boolean if a field has been set.
func (o *DocumentOut) HasTokensProcessingMainContent() bool {
	if o != nil && o.TokensProcessingMainContent.IsSet() {
		return true
	}

	return false
}

// SetTokensProcessingMainContent gets a reference to the given NullableInt32 and assigns it to the TokensProcessingMainContent field.
func (o *DocumentOut) SetTokensProcessingMainContent(v int32) {
	o.TokensProcessingMainContent.Set(&v)
}
// SetTokensProcessingMainContentNil sets the value for TokensProcessingMainContent to be an explicit nil
func (o *DocumentOut) SetTokensProcessingMainContentNil() {
	o.TokensProcessingMainContent.Set(nil)
}

// UnsetTokensProcessingMainContent ensures that no value is present for TokensProcessingMainContent, not even an explicit nil
func (o *DocumentOut) UnsetTokensProcessingMainContent() {
	o.TokensProcessingMainContent.Unset()
}

// GetTokensProcessingSummary returns the TokensProcessingSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentOut) GetTokensProcessingSummary() int32 {
	if o == nil || IsNil(o.TokensProcessingSummary.Get()) {
		var ret int32
		return ret
	}
	return *o.TokensProcessingSummary.Get()
}

// GetTokensProcessingSummaryOk returns a tuple with the TokensProcessingSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentOut) GetTokensProcessingSummaryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TokensProcessingSummary.Get(), o.TokensProcessingSummary.IsSet()
}

// HasTokensProcessingSummary returns a boolean if a field has been set.
func (o *DocumentOut) HasTokensProcessingSummary() bool {
	if o != nil && o.TokensProcessingSummary.IsSet() {
		return true
	}

	return false
}

// SetTokensProcessingSummary gets a reference to the given NullableInt32 and assigns it to the TokensProcessingSummary field.
func (o *DocumentOut) SetTokensProcessingSummary(v int32) {
	o.TokensProcessingSummary.Set(&v)
}
// SetTokensProcessingSummaryNil sets the value for TokensProcessingSummary to be an explicit nil
func (o *DocumentOut) SetTokensProcessingSummaryNil() {
	o.TokensProcessingSummary.Set(nil)
}

// UnsetTokensProcessingSummary ensures that no value is present for TokensProcessingSummary, not even an explicit nil
func (o *DocumentOut) UnsetTokensProcessingSummary() {
	o.TokensProcessingSummary.Unset()
}

// GetTokensProcessingTotal returns the TokensProcessingTotal field value
func (o *DocumentOut) GetTokensProcessingTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TokensProcessingTotal
}

// GetTokensProcessingTotalOk returns a tuple with the TokensProcessingTotal field value
// and a boolean to check if the value has been set.
func (o *DocumentOut) GetTokensProcessingTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TokensProcessingTotal, true
}

// SetTokensProcessingTotal sets field value
func (o *DocumentOut) SetTokensProcessingTotal(v int32) {
	o.TokensProcessingTotal = v
}

func (o DocumentOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["library_id"] = o.LibraryId
	toSerialize["hash"] = o.Hash
	toSerialize["mime_type"] = o.MimeType
	toSerialize["extension"] = o.Extension
	toSerialize["size"] = o.Size
	toSerialize["name"] = o.Name
	if o.Summary.IsSet() {
		toSerialize["summary"] = o.Summary.Get()
	}
	toSerialize["created_at"] = o.CreatedAt
	if o.LastProcessedAt.IsSet() {
		toSerialize["last_processed_at"] = o.LastProcessedAt.Get()
	}
	if o.NumberOfPages.IsSet() {
		toSerialize["number_of_pages"] = o.NumberOfPages.Get()
	}
	toSerialize["processing_status"] = o.ProcessingStatus
	toSerialize["uploaded_by_id"] = o.UploadedById
	toSerialize["uploaded_by_type"] = o.UploadedByType
	if o.TokensProcessingMainContent.IsSet() {
		toSerialize["tokens_processing_main_content"] = o.TokensProcessingMainContent.Get()
	}
	if o.TokensProcessingSummary.IsSet() {
		toSerialize["tokens_processing_summary"] = o.TokensProcessingSummary.Get()
	}
	toSerialize["tokens_processing_total"] = o.TokensProcessingTotal
	return toSerialize, nil
}

func (o *DocumentOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"library_id",
		"hash",
		"mime_type",
		"extension",
		"size",
		"name",
		"created_at",
		"processing_status",
		"uploaded_by_id",
		"uploaded_by_type",
		"tokens_processing_total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentOut := _DocumentOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentOut)

	if err != nil {
		return err
	}

	*o = DocumentOut(varDocumentOut)

	return err
}

type NullableDocumentOut struct {
	value *DocumentOut
	isSet bool
}

func (v NullableDocumentOut) Get() *DocumentOut {
	return v.value
}

func (v *NullableDocumentOut) Set(val *DocumentOut) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentOut) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentOut(val *DocumentOut) *NullableDocumentOut {
	return &NullableDocumentOut{value: val, isSet: true}
}

func (v NullableDocumentOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


