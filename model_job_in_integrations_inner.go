/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// JobInIntegrationsInner - struct for JobInIntegrationsInner
type JobInIntegrationsInner struct {
	WandbIntegration *WandbIntegration
}

// WandbIntegrationAsJobInIntegrationsInner is a convenience function that returns WandbIntegration wrapped in JobInIntegrationsInner
func WandbIntegrationAsJobInIntegrationsInner(v *WandbIntegration) JobInIntegrationsInner {
	return JobInIntegrationsInner{
		WandbIntegration: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *JobInIntegrationsInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into WandbIntegration
	err = newStrictDecoder(data).Decode(&dst.WandbIntegration)
	if err == nil {
		jsonWandbIntegration, _ := json.Marshal(dst.WandbIntegration)
		if string(jsonWandbIntegration) == "{}" { // empty struct
			dst.WandbIntegration = nil
		} else {
			if err = validator.Validate(dst.WandbIntegration); err != nil {
				dst.WandbIntegration = nil
			} else {
				match++
			}
		}
	} else {
		dst.WandbIntegration = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.WandbIntegration = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JobInIntegrationsInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JobInIntegrationsInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JobInIntegrationsInner) MarshalJSON() ([]byte, error) {
	if src.WandbIntegration != nil {
		return json.Marshal(&src.WandbIntegration)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JobInIntegrationsInner) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.WandbIntegration != nil {
		return obj.WandbIntegration
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj JobInIntegrationsInner) GetActualInstanceValue() (interface{}) {
	if obj.WandbIntegration != nil {
		return *obj.WandbIntegration
	}

	// all schemas are nil
	return nil
}

type NullableJobInIntegrationsInner struct {
	value *JobInIntegrationsInner
	isSet bool
}

func (v NullableJobInIntegrationsInner) Get() *JobInIntegrationsInner {
	return v.value
}

func (v *NullableJobInIntegrationsInner) Set(val *JobInIntegrationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableJobInIntegrationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableJobInIntegrationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobInIntegrationsInner(val *JobInIntegrationsInner) *NullableJobInIntegrationsInner {
	return &NullableJobInIntegrationsInner{value: val, isSet: true}
}

func (v NullableJobInIntegrationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobInIntegrationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


