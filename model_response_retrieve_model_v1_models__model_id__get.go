/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ResponseRetrieveModelV1ModelsModelIdGet - struct for ResponseRetrieveModelV1ModelsModelIdGet
type ResponseRetrieveModelV1ModelsModelIdGet struct {
	BaseModelCard *BaseModelCard
	FTModelCard *FTModelCard
}

// BaseModelCardAsResponseRetrieveModelV1ModelsModelIdGet is a convenience function that returns BaseModelCard wrapped in ResponseRetrieveModelV1ModelsModelIdGet
func BaseModelCardAsResponseRetrieveModelV1ModelsModelIdGet(v *BaseModelCard) ResponseRetrieveModelV1ModelsModelIdGet {
	return ResponseRetrieveModelV1ModelsModelIdGet{
		BaseModelCard: v,
	}
}

// FTModelCardAsResponseRetrieveModelV1ModelsModelIdGet is a convenience function that returns FTModelCard wrapped in ResponseRetrieveModelV1ModelsModelIdGet
func FTModelCardAsResponseRetrieveModelV1ModelsModelIdGet(v *FTModelCard) ResponseRetrieveModelV1ModelsModelIdGet {
	return ResponseRetrieveModelV1ModelsModelIdGet{
		FTModelCard: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ResponseRetrieveModelV1ModelsModelIdGet) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into BaseModelCard
	err = newStrictDecoder(data).Decode(&dst.BaseModelCard)
	if err == nil {
		jsonBaseModelCard, _ := json.Marshal(dst.BaseModelCard)
		if string(jsonBaseModelCard) == "{}" { // empty struct
			dst.BaseModelCard = nil
		} else {
			if err = validator.Validate(dst.BaseModelCard); err != nil {
				dst.BaseModelCard = nil
			} else {
				match++
			}
		}
	} else {
		dst.BaseModelCard = nil
	}

	// try to unmarshal data into FTModelCard
	err = newStrictDecoder(data).Decode(&dst.FTModelCard)
	if err == nil {
		jsonFTModelCard, _ := json.Marshal(dst.FTModelCard)
		if string(jsonFTModelCard) == "{}" { // empty struct
			dst.FTModelCard = nil
		} else {
			if err = validator.Validate(dst.FTModelCard); err != nil {
				dst.FTModelCard = nil
			} else {
				match++
			}
		}
	} else {
		dst.FTModelCard = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.BaseModelCard = nil
		dst.FTModelCard = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ResponseRetrieveModelV1ModelsModelIdGet)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ResponseRetrieveModelV1ModelsModelIdGet)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ResponseRetrieveModelV1ModelsModelIdGet) MarshalJSON() ([]byte, error) {
	if src.BaseModelCard != nil {
		return json.Marshal(&src.BaseModelCard)
	}

	if src.FTModelCard != nil {
		return json.Marshal(&src.FTModelCard)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ResponseRetrieveModelV1ModelsModelIdGet) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.BaseModelCard != nil {
		return obj.BaseModelCard
	}

	if obj.FTModelCard != nil {
		return obj.FTModelCard
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ResponseRetrieveModelV1ModelsModelIdGet) GetActualInstanceValue() (interface{}) {
	if obj.BaseModelCard != nil {
		return *obj.BaseModelCard
	}

	if obj.FTModelCard != nil {
		return *obj.FTModelCard
	}

	// all schemas are nil
	return nil
}

type NullableResponseRetrieveModelV1ModelsModelIdGet struct {
	value *ResponseRetrieveModelV1ModelsModelIdGet
	isSet bool
}

func (v NullableResponseRetrieveModelV1ModelsModelIdGet) Get() *ResponseRetrieveModelV1ModelsModelIdGet {
	return v.value
}

func (v *NullableResponseRetrieveModelV1ModelsModelIdGet) Set(val *ResponseRetrieveModelV1ModelsModelIdGet) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseRetrieveModelV1ModelsModelIdGet) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseRetrieveModelV1ModelsModelIdGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseRetrieveModelV1ModelsModelIdGet(val *ResponseRetrieveModelV1ModelsModelIdGet) *NullableResponseRetrieveModelV1ModelsModelIdGet {
	return &NullableResponseRetrieveModelV1ModelsModelIdGet{value: val, isSet: true}
}

func (v NullableResponseRetrieveModelV1ModelsModelIdGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseRetrieveModelV1ModelsModelIdGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


