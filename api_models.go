/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type ModelsAPI interface {

	/*
	DeleteModelV1ModelsModelIdDelete Delete Model

	Delete a fine-tuned model.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId The ID of the model to delete.
	@return ApiDeleteModelV1ModelsModelIdDeleteRequest
	*/
	DeleteModelV1ModelsModelIdDelete(ctx context.Context, modelId string) ApiDeleteModelV1ModelsModelIdDeleteRequest

	// DeleteModelV1ModelsModelIdDeleteExecute executes the request
	//  @return DeleteModelOut
	DeleteModelV1ModelsModelIdDeleteExecute(r ApiDeleteModelV1ModelsModelIdDeleteRequest) (*DeleteModelOut, *http.Response, error)

	/*
	JobsApiRoutesFineTuningArchiveFineTunedModel Archive Fine Tuned Model

	Archive a fine-tuned model.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId The ID of the model to archive.
	@return ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest
	*/
	JobsApiRoutesFineTuningArchiveFineTunedModel(ctx context.Context, modelId string) ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest

	// JobsApiRoutesFineTuningArchiveFineTunedModelExecute executes the request
	//  @return ArchiveFTModelOut
	JobsApiRoutesFineTuningArchiveFineTunedModelExecute(r ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest) (*ArchiveFTModelOut, *http.Response, error)

	/*
	JobsApiRoutesFineTuningUnarchiveFineTunedModel Unarchive Fine Tuned Model

	Un-archive a fine-tuned model.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId The ID of the model to unarchive.
	@return ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest
	*/
	JobsApiRoutesFineTuningUnarchiveFineTunedModel(ctx context.Context, modelId string) ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest

	// JobsApiRoutesFineTuningUnarchiveFineTunedModelExecute executes the request
	//  @return UnarchiveFTModelOut
	JobsApiRoutesFineTuningUnarchiveFineTunedModelExecute(r ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest) (*UnarchiveFTModelOut, *http.Response, error)

	/*
	JobsApiRoutesFineTuningUpdateFineTunedModel Update Fine Tuned Model

	Update a model name or description.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId The ID of the model to update.
	@return ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest
	*/
	JobsApiRoutesFineTuningUpdateFineTunedModel(ctx context.Context, modelId string) ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest

	// JobsApiRoutesFineTuningUpdateFineTunedModelExecute executes the request
	//  @return FTModelOut
	JobsApiRoutesFineTuningUpdateFineTunedModelExecute(r ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest) (*FTModelOut, *http.Response, error)

	/*
	ListModelsV1ModelsGet List Models

	List all models available to the user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListModelsV1ModelsGetRequest
	*/
	ListModelsV1ModelsGet(ctx context.Context) ApiListModelsV1ModelsGetRequest

	// ListModelsV1ModelsGetExecute executes the request
	//  @return ModelList
	ListModelsV1ModelsGetExecute(r ApiListModelsV1ModelsGetRequest) (*ModelList, *http.Response, error)

	/*
	RetrieveModelV1ModelsModelIdGet Retrieve Model

	Retrieve a model information.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param modelId The ID of the model to retrieve.
	@return ApiRetrieveModelV1ModelsModelIdGetRequest
	*/
	RetrieveModelV1ModelsModelIdGet(ctx context.Context, modelId string) ApiRetrieveModelV1ModelsModelIdGetRequest

	// RetrieveModelV1ModelsModelIdGetExecute executes the request
	//  @return ResponseRetrieveModelV1ModelsModelIdGet
	RetrieveModelV1ModelsModelIdGetExecute(r ApiRetrieveModelV1ModelsModelIdGetRequest) (*ResponseRetrieveModelV1ModelsModelIdGet, *http.Response, error)
}

// ModelsAPIService ModelsAPI service
type ModelsAPIService service

type ApiDeleteModelV1ModelsModelIdDeleteRequest struct {
	ctx context.Context
	ApiService ModelsAPI
	modelId string
}

func (r ApiDeleteModelV1ModelsModelIdDeleteRequest) Execute() (*DeleteModelOut, *http.Response, error) {
	return r.ApiService.DeleteModelV1ModelsModelIdDeleteExecute(r)
}

/*
DeleteModelV1ModelsModelIdDelete Delete Model

Delete a fine-tuned model.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param modelId The ID of the model to delete.
 @return ApiDeleteModelV1ModelsModelIdDeleteRequest
*/
func (a *ModelsAPIService) DeleteModelV1ModelsModelIdDelete(ctx context.Context, modelId string) ApiDeleteModelV1ModelsModelIdDeleteRequest {
	return ApiDeleteModelV1ModelsModelIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return DeleteModelOut
func (a *ModelsAPIService) DeleteModelV1ModelsModelIdDeleteExecute(r ApiDeleteModelV1ModelsModelIdDeleteRequest) (*DeleteModelOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteModelOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ModelsAPIService.DeleteModelV1ModelsModelIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/models/{model_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest struct {
	ctx context.Context
	ApiService ModelsAPI
	modelId string
}

func (r ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest) Execute() (*ArchiveFTModelOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningArchiveFineTunedModelExecute(r)
}

/*
JobsApiRoutesFineTuningArchiveFineTunedModel Archive Fine Tuned Model

Archive a fine-tuned model.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param modelId The ID of the model to archive.
 @return ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest
*/
func (a *ModelsAPIService) JobsApiRoutesFineTuningArchiveFineTunedModel(ctx context.Context, modelId string) ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest {
	return ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest{
		ApiService: a,
		ctx: ctx,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return ArchiveFTModelOut
func (a *ModelsAPIService) JobsApiRoutesFineTuningArchiveFineTunedModelExecute(r ApiJobsApiRoutesFineTuningArchiveFineTunedModelRequest) (*ArchiveFTModelOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ArchiveFTModelOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ModelsAPIService.JobsApiRoutesFineTuningArchiveFineTunedModel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/models/{model_id}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest struct {
	ctx context.Context
	ApiService ModelsAPI
	modelId string
}

func (r ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest) Execute() (*UnarchiveFTModelOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningUnarchiveFineTunedModelExecute(r)
}

/*
JobsApiRoutesFineTuningUnarchiveFineTunedModel Unarchive Fine Tuned Model

Un-archive a fine-tuned model.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param modelId The ID of the model to unarchive.
 @return ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest
*/
func (a *ModelsAPIService) JobsApiRoutesFineTuningUnarchiveFineTunedModel(ctx context.Context, modelId string) ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest {
	return ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest{
		ApiService: a,
		ctx: ctx,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return UnarchiveFTModelOut
func (a *ModelsAPIService) JobsApiRoutesFineTuningUnarchiveFineTunedModelExecute(r ApiJobsApiRoutesFineTuningUnarchiveFineTunedModelRequest) (*UnarchiveFTModelOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UnarchiveFTModelOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ModelsAPIService.JobsApiRoutesFineTuningUnarchiveFineTunedModel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/models/{model_id}/archive"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest struct {
	ctx context.Context
	ApiService ModelsAPI
	modelId string
	updateFTModelIn *UpdateFTModelIn
}

func (r ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest) UpdateFTModelIn(updateFTModelIn UpdateFTModelIn) ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest {
	r.updateFTModelIn = &updateFTModelIn
	return r
}

func (r ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest) Execute() (*FTModelOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningUpdateFineTunedModelExecute(r)
}

/*
JobsApiRoutesFineTuningUpdateFineTunedModel Update Fine Tuned Model

Update a model name or description.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param modelId The ID of the model to update.
 @return ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest
*/
func (a *ModelsAPIService) JobsApiRoutesFineTuningUpdateFineTunedModel(ctx context.Context, modelId string) ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest {
	return ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest{
		ApiService: a,
		ctx: ctx,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return FTModelOut
func (a *ModelsAPIService) JobsApiRoutesFineTuningUpdateFineTunedModelExecute(r ApiJobsApiRoutesFineTuningUpdateFineTunedModelRequest) (*FTModelOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FTModelOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ModelsAPIService.JobsApiRoutesFineTuningUpdateFineTunedModel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/models/{model_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateFTModelIn == nil {
		return localVarReturnValue, nil, reportError("updateFTModelIn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateFTModelIn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListModelsV1ModelsGetRequest struct {
	ctx context.Context
	ApiService ModelsAPI
}

func (r ApiListModelsV1ModelsGetRequest) Execute() (*ModelList, *http.Response, error) {
	return r.ApiService.ListModelsV1ModelsGetExecute(r)
}

/*
ListModelsV1ModelsGet List Models

List all models available to the user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiListModelsV1ModelsGetRequest
*/
func (a *ModelsAPIService) ListModelsV1ModelsGet(ctx context.Context) ApiListModelsV1ModelsGetRequest {
	return ApiListModelsV1ModelsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelList
func (a *ModelsAPIService) ListModelsV1ModelsGetExecute(r ApiListModelsV1ModelsGetRequest) (*ModelList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ModelsAPIService.ListModelsV1ModelsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/models"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRetrieveModelV1ModelsModelIdGetRequest struct {
	ctx context.Context
	ApiService ModelsAPI
	modelId string
}

func (r ApiRetrieveModelV1ModelsModelIdGetRequest) Execute() (*ResponseRetrieveModelV1ModelsModelIdGet, *http.Response, error) {
	return r.ApiService.RetrieveModelV1ModelsModelIdGetExecute(r)
}

/*
RetrieveModelV1ModelsModelIdGet Retrieve Model

Retrieve a model information.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param modelId The ID of the model to retrieve.
 @return ApiRetrieveModelV1ModelsModelIdGetRequest
*/
func (a *ModelsAPIService) RetrieveModelV1ModelsModelIdGet(ctx context.Context, modelId string) ApiRetrieveModelV1ModelsModelIdGetRequest {
	return ApiRetrieveModelV1ModelsModelIdGetRequest{
		ApiService: a,
		ctx: ctx,
		modelId: modelId,
	}
}

// Execute executes the request
//  @return ResponseRetrieveModelV1ModelsModelIdGet
func (a *ModelsAPIService) RetrieveModelV1ModelsModelIdGetExecute(r ApiRetrieveModelV1ModelsModelIdGetRequest) (*ResponseRetrieveModelV1ModelsModelIdGet, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseRetrieveModelV1ModelsModelIdGet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ModelsAPIService.RetrieveModelV1ModelsModelIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/models/{model_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"model_id"+"}", url.PathEscape(parameterValueToString(r.modelId, "modelId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
