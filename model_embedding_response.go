/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EmbeddingResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingResponse{}

// EmbeddingResponse struct for EmbeddingResponse
type EmbeddingResponse struct {
	Id *string `json:"id,omitempty"`
	Object *string `json:"object,omitempty"`
	Model *string `json:"model,omitempty"`
	Usage *UsageInfo `json:"usage,omitempty"`
	Data []interface{} `json:"data"`
}

type _EmbeddingResponse EmbeddingResponse

// NewEmbeddingResponse instantiates a new EmbeddingResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingResponse(data []interface{}) *EmbeddingResponse {
	this := EmbeddingResponse{}
	this.Data = data
	return &this
}

// NewEmbeddingResponseWithDefaults instantiates a new EmbeddingResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingResponseWithDefaults() *EmbeddingResponse {
	this := EmbeddingResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EmbeddingResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EmbeddingResponse) SetId(v string) {
	o.Id = &v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *EmbeddingResponse) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *EmbeddingResponse) SetObject(v string) {
	o.Object = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *EmbeddingResponse) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *EmbeddingResponse) SetModel(v string) {
	o.Model = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *EmbeddingResponse) GetUsage() UsageInfo {
	if o == nil || IsNil(o.Usage) {
		var ret UsageInfo
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetUsageOk() (*UsageInfo, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *EmbeddingResponse) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given UsageInfo and assigns it to the Usage field.
func (o *EmbeddingResponse) SetUsage(v UsageInfo) {
	o.Usage = &v
}

// GetData returns the Data field value
func (o *EmbeddingResponse) GetData() []interface{} {
	if o == nil {
		var ret []interface{}
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *EmbeddingResponse) GetDataOk() ([]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *EmbeddingResponse) SetData(v []interface{}) {
	o.Data = v
}

func (o EmbeddingResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	toSerialize["data"] = o.Data
	return toSerialize, nil
}

func (o *EmbeddingResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingResponse := _EmbeddingResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEmbeddingResponse)

	if err != nil {
		return err
	}

	*o = EmbeddingResponse(varEmbeddingResponse)

	return err
}

type NullableEmbeddingResponse struct {
	value *EmbeddingResponse
	isSet bool
}

func (v NullableEmbeddingResponse) Get() *EmbeddingResponse {
	return v.value
}

func (v *NullableEmbeddingResponse) Set(val *EmbeddingResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingResponse(val *EmbeddingResponse) *NullableEmbeddingResponse {
	return &NullableEmbeddingResponse{value: val, isSet: true}
}

func (v NullableEmbeddingResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


