/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"os"
	"reflect"
)


type FilesAPI interface {

	/*
	FilesApiRoutesDeleteFile Delete File

	Delete a file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fileId
	@return ApiFilesApiRoutesDeleteFileRequest
	*/
	FilesApiRoutesDeleteFile(ctx context.Context, fileId string) ApiFilesApiRoutesDeleteFileRequest

	// FilesApiRoutesDeleteFileExecute executes the request
	//  @return DeleteFileOut
	FilesApiRoutesDeleteFileExecute(r ApiFilesApiRoutesDeleteFileRequest) (*DeleteFileOut, *http.Response, error)

	/*
	FilesApiRoutesDownloadFile Download File

	Download a file

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fileId
	@return ApiFilesApiRoutesDownloadFileRequest
	*/
	FilesApiRoutesDownloadFile(ctx context.Context, fileId string) ApiFilesApiRoutesDownloadFileRequest

	// FilesApiRoutesDownloadFileExecute executes the request
	//  @return *os.File
	FilesApiRoutesDownloadFileExecute(r ApiFilesApiRoutesDownloadFileRequest) (*os.File, *http.Response, error)

	/*
	FilesApiRoutesGetSignedUrl Get Signed Url

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fileId
	@return ApiFilesApiRoutesGetSignedUrlRequest
	*/
	FilesApiRoutesGetSignedUrl(ctx context.Context, fileId string) ApiFilesApiRoutesGetSignedUrlRequest

	// FilesApiRoutesGetSignedUrlExecute executes the request
	//  @return FileSignedURL
	FilesApiRoutesGetSignedUrlExecute(r ApiFilesApiRoutesGetSignedUrlRequest) (*FileSignedURL, *http.Response, error)

	/*
	FilesApiRoutesListFiles List Files

	Returns a list of files that belong to the user's organization.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFilesApiRoutesListFilesRequest
	*/
	FilesApiRoutesListFiles(ctx context.Context) ApiFilesApiRoutesListFilesRequest

	// FilesApiRoutesListFilesExecute executes the request
	//  @return ListFilesOut
	FilesApiRoutesListFilesExecute(r ApiFilesApiRoutesListFilesRequest) (*ListFilesOut, *http.Response, error)

	/*
	FilesApiRoutesRetrieveFile Retrieve File

	Returns information about a specific file.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param fileId
	@return ApiFilesApiRoutesRetrieveFileRequest
	*/
	FilesApiRoutesRetrieveFile(ctx context.Context, fileId string) ApiFilesApiRoutesRetrieveFileRequest

	// FilesApiRoutesRetrieveFileExecute executes the request
	//  @return RetrieveFileOut
	FilesApiRoutesRetrieveFileExecute(r ApiFilesApiRoutesRetrieveFileRequest) (*RetrieveFileOut, *http.Response, error)

	/*
	FilesApiRoutesUploadFile Upload File

	Upload a file that can be used across various endpoints.

The size of individual files can be a maximum of 512 MB. The Fine-tuning API only supports .jsonl files.

Please contact us if you need to increase these storage limits.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiFilesApiRoutesUploadFileRequest
	*/
	FilesApiRoutesUploadFile(ctx context.Context) ApiFilesApiRoutesUploadFileRequest

	// FilesApiRoutesUploadFileExecute executes the request
	//  @return UploadFileOut
	FilesApiRoutesUploadFileExecute(r ApiFilesApiRoutesUploadFileRequest) (*UploadFileOut, *http.Response, error)
}

// FilesAPIService FilesAPI service
type FilesAPIService service

type ApiFilesApiRoutesDeleteFileRequest struct {
	ctx context.Context
	ApiService FilesAPI
	fileId string
}

func (r ApiFilesApiRoutesDeleteFileRequest) Execute() (*DeleteFileOut, *http.Response, error) {
	return r.ApiService.FilesApiRoutesDeleteFileExecute(r)
}

/*
FilesApiRoutesDeleteFile Delete File

Delete a file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileId
 @return ApiFilesApiRoutesDeleteFileRequest
*/
func (a *FilesAPIService) FilesApiRoutesDeleteFile(ctx context.Context, fileId string) ApiFilesApiRoutesDeleteFileRequest {
	return ApiFilesApiRoutesDeleteFileRequest{
		ApiService: a,
		ctx: ctx,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return DeleteFileOut
func (a *FilesAPIService) FilesApiRoutesDeleteFileExecute(r ApiFilesApiRoutesDeleteFileRequest) (*DeleteFileOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DeleteFileOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesAPIService.FilesApiRoutesDeleteFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesApiRoutesDownloadFileRequest struct {
	ctx context.Context
	ApiService FilesAPI
	fileId string
}

func (r ApiFilesApiRoutesDownloadFileRequest) Execute() (*os.File, *http.Response, error) {
	return r.ApiService.FilesApiRoutesDownloadFileExecute(r)
}

/*
FilesApiRoutesDownloadFile Download File

Download a file

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileId
 @return ApiFilesApiRoutesDownloadFileRequest
*/
func (a *FilesAPIService) FilesApiRoutesDownloadFile(ctx context.Context, fileId string) ApiFilesApiRoutesDownloadFileRequest {
	return ApiFilesApiRoutesDownloadFileRequest{
		ApiService: a,
		ctx: ctx,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *FilesAPIService) FilesApiRoutesDownloadFileExecute(r ApiFilesApiRoutesDownloadFileRequest) (*os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesAPIService.FilesApiRoutesDownloadFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/files/{file_id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesApiRoutesGetSignedUrlRequest struct {
	ctx context.Context
	ApiService FilesAPI
	fileId string
	expiry *int32
}

// Number of hours before the url becomes invalid. Defaults to 24h
func (r ApiFilesApiRoutesGetSignedUrlRequest) Expiry(expiry int32) ApiFilesApiRoutesGetSignedUrlRequest {
	r.expiry = &expiry
	return r
}

func (r ApiFilesApiRoutesGetSignedUrlRequest) Execute() (*FileSignedURL, *http.Response, error) {
	return r.ApiService.FilesApiRoutesGetSignedUrlExecute(r)
}

/*
FilesApiRoutesGetSignedUrl Get Signed Url

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileId
 @return ApiFilesApiRoutesGetSignedUrlRequest
*/
func (a *FilesAPIService) FilesApiRoutesGetSignedUrl(ctx context.Context, fileId string) ApiFilesApiRoutesGetSignedUrlRequest {
	return ApiFilesApiRoutesGetSignedUrlRequest{
		ApiService: a,
		ctx: ctx,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return FileSignedURL
func (a *FilesAPIService) FilesApiRoutesGetSignedUrlExecute(r ApiFilesApiRoutesGetSignedUrlRequest) (*FileSignedURL, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FileSignedURL
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesAPIService.FilesApiRoutesGetSignedUrl")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/files/{file_id}/url"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.expiry != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "expiry", r.expiry, "form", "")
	} else {
		var defaultValue int32 = 24
		r.expiry = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesApiRoutesListFilesRequest struct {
	ctx context.Context
	ApiService FilesAPI
	page *int32
	pageSize *int32
	sampleType *[]SampleType
	source *[]Source
	search *string
	purpose *FilePurpose
}

func (r ApiFilesApiRoutesListFilesRequest) Page(page int32) ApiFilesApiRoutesListFilesRequest {
	r.page = &page
	return r
}

func (r ApiFilesApiRoutesListFilesRequest) PageSize(pageSize int32) ApiFilesApiRoutesListFilesRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiFilesApiRoutesListFilesRequest) SampleType(sampleType []SampleType) ApiFilesApiRoutesListFilesRequest {
	r.sampleType = &sampleType
	return r
}

func (r ApiFilesApiRoutesListFilesRequest) Source(source []Source) ApiFilesApiRoutesListFilesRequest {
	r.source = &source
	return r
}

func (r ApiFilesApiRoutesListFilesRequest) Search(search string) ApiFilesApiRoutesListFilesRequest {
	r.search = &search
	return r
}

func (r ApiFilesApiRoutesListFilesRequest) Purpose(purpose FilePurpose) ApiFilesApiRoutesListFilesRequest {
	r.purpose = &purpose
	return r
}

func (r ApiFilesApiRoutesListFilesRequest) Execute() (*ListFilesOut, *http.Response, error) {
	return r.ApiService.FilesApiRoutesListFilesExecute(r)
}

/*
FilesApiRoutesListFiles List Files

Returns a list of files that belong to the user's organization.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesApiRoutesListFilesRequest
*/
func (a *FilesAPIService) FilesApiRoutesListFiles(ctx context.Context) ApiFilesApiRoutesListFilesRequest {
	return ApiFilesApiRoutesListFilesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListFilesOut
func (a *FilesAPIService) FilesApiRoutesListFilesExecute(r ApiFilesApiRoutesListFilesRequest) (*ListFilesOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListFilesOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesAPIService.FilesApiRoutesListFiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.sampleType != nil {
		t := *r.sampleType
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "sample_type", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "sample_type", t, "form", "multi")
		}
	}
	if r.source != nil {
		t := *r.source
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "source", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "source", t, "form", "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "form", "")
	}
	if r.purpose != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "purpose", r.purpose, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesApiRoutesRetrieveFileRequest struct {
	ctx context.Context
	ApiService FilesAPI
	fileId string
}

func (r ApiFilesApiRoutesRetrieveFileRequest) Execute() (*RetrieveFileOut, *http.Response, error) {
	return r.ApiService.FilesApiRoutesRetrieveFileExecute(r)
}

/*
FilesApiRoutesRetrieveFile Retrieve File

Returns information about a specific file.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param fileId
 @return ApiFilesApiRoutesRetrieveFileRequest
*/
func (a *FilesAPIService) FilesApiRoutesRetrieveFile(ctx context.Context, fileId string) ApiFilesApiRoutesRetrieveFileRequest {
	return ApiFilesApiRoutesRetrieveFileRequest{
		ApiService: a,
		ctx: ctx,
		fileId: fileId,
	}
}

// Execute executes the request
//  @return RetrieveFileOut
func (a *FilesAPIService) FilesApiRoutesRetrieveFileExecute(r ApiFilesApiRoutesRetrieveFileRequest) (*RetrieveFileOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RetrieveFileOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesAPIService.FilesApiRoutesRetrieveFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/files/{file_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"file_id"+"}", url.PathEscape(parameterValueToString(r.fileId, "fileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFilesApiRoutesUploadFileRequest struct {
	ctx context.Context
	ApiService FilesAPI
	file *os.File
	purpose *FilePurpose
}

// The File object (not file name) to be uploaded.  To upload a file and specify a custom file name you should format your request as such:  &#x60;&#x60;&#x60;bash  file&#x3D;@path/to/your/file.jsonl;filename&#x3D;custom_name.jsonl  &#x60;&#x60;&#x60;  Otherwise, you can just keep the original file name:  &#x60;&#x60;&#x60;bash  file&#x3D;@path/to/your/file.jsonl  &#x60;&#x60;&#x60;
func (r ApiFilesApiRoutesUploadFileRequest) File(file *os.File) ApiFilesApiRoutesUploadFileRequest {
	r.file = file
	return r
}

func (r ApiFilesApiRoutesUploadFileRequest) Purpose(purpose FilePurpose) ApiFilesApiRoutesUploadFileRequest {
	r.purpose = &purpose
	return r
}

func (r ApiFilesApiRoutesUploadFileRequest) Execute() (*UploadFileOut, *http.Response, error) {
	return r.ApiService.FilesApiRoutesUploadFileExecute(r)
}

/*
FilesApiRoutesUploadFile Upload File

Upload a file that can be used across various endpoints.

The size of individual files can be a maximum of 512 MB. The Fine-tuning API only supports .jsonl files.

Please contact us if you need to increase these storage limits.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFilesApiRoutesUploadFileRequest
*/
func (a *FilesAPIService) FilesApiRoutesUploadFile(ctx context.Context) ApiFilesApiRoutesUploadFileRequest {
	return ApiFilesApiRoutesUploadFileRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return UploadFileOut
func (a *FilesAPIService) FilesApiRoutesUploadFileExecute(r ApiFilesApiRoutesUploadFileRequest) (*UploadFileOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *UploadFileOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FilesAPIService.FilesApiRoutesUploadFile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/files"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.file == nil {
		return localVarReturnValue, nil, reportError("file is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var fileLocalVarFormFileName string
	var fileLocalVarFileName     string
	var fileLocalVarFileBytes    []byte

	fileLocalVarFormFileName = "file"
	fileLocalVarFile := r.file

	if fileLocalVarFile != nil {
		fbs, _ := io.ReadAll(fileLocalVarFile)

		fileLocalVarFileBytes = fbs
		fileLocalVarFileName = fileLocalVarFile.Name()
		fileLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: fileLocalVarFileBytes, fileName: fileLocalVarFileName, formFileName: fileLocalVarFormFileName})
	}
	if r.purpose != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "purpose", r.purpose, "", "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
