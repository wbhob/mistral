/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClassifierTargetIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClassifierTargetIn{}

// ClassifierTargetIn struct for ClassifierTargetIn
type ClassifierTargetIn struct {
	Name string `json:"name"`
	Labels []string `json:"labels"`
	Weight *float32 `json:"weight,omitempty"`
	LossFunction NullableFTClassifierLossFunction `json:"loss_function,omitempty"`
}

type _ClassifierTargetIn ClassifierTargetIn

// NewClassifierTargetIn instantiates a new ClassifierTargetIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassifierTargetIn(name string, labels []string) *ClassifierTargetIn {
	this := ClassifierTargetIn{}
	this.Name = name
	this.Labels = labels
	var weight float32 = 1.0
	this.Weight = &weight
	return &this
}

// NewClassifierTargetInWithDefaults instantiates a new ClassifierTargetIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassifierTargetInWithDefaults() *ClassifierTargetIn {
	this := ClassifierTargetIn{}
	var weight float32 = 1.0
	this.Weight = &weight
	return &this
}

// GetName returns the Name field value
func (o *ClassifierTargetIn) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClassifierTargetIn) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClassifierTargetIn) SetName(v string) {
	o.Name = v
}

// GetLabels returns the Labels field value
func (o *ClassifierTargetIn) GetLabels() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *ClassifierTargetIn) GetLabelsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Labels, true
}

// SetLabels sets field value
func (o *ClassifierTargetIn) SetLabels(v []string) {
	o.Labels = v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *ClassifierTargetIn) GetWeight() float32 {
	if o == nil || IsNil(o.Weight) {
		var ret float32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassifierTargetIn) GetWeightOk() (*float32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *ClassifierTargetIn) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given float32 and assigns it to the Weight field.
func (o *ClassifierTargetIn) SetWeight(v float32) {
	o.Weight = &v
}

// GetLossFunction returns the LossFunction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClassifierTargetIn) GetLossFunction() FTClassifierLossFunction {
	if o == nil || IsNil(o.LossFunction.Get()) {
		var ret FTClassifierLossFunction
		return ret
	}
	return *o.LossFunction.Get()
}

// GetLossFunctionOk returns a tuple with the LossFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClassifierTargetIn) GetLossFunctionOk() (*FTClassifierLossFunction, bool) {
	if o == nil {
		return nil, false
	}
	return o.LossFunction.Get(), o.LossFunction.IsSet()
}

// HasLossFunction returns a boolean if a field has been set.
func (o *ClassifierTargetIn) HasLossFunction() bool {
	if o != nil && o.LossFunction.IsSet() {
		return true
	}

	return false
}

// SetLossFunction gets a reference to the given NullableFTClassifierLossFunction and assigns it to the LossFunction field.
func (o *ClassifierTargetIn) SetLossFunction(v FTClassifierLossFunction) {
	o.LossFunction.Set(&v)
}
// SetLossFunctionNil sets the value for LossFunction to be an explicit nil
func (o *ClassifierTargetIn) SetLossFunctionNil() {
	o.LossFunction.Set(nil)
}

// UnsetLossFunction ensures that no value is present for LossFunction, not even an explicit nil
func (o *ClassifierTargetIn) UnsetLossFunction() {
	o.LossFunction.Unset()
}

func (o ClassifierTargetIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClassifierTargetIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["labels"] = o.Labels
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	if o.LossFunction.IsSet() {
		toSerialize["loss_function"] = o.LossFunction.Get()
	}
	return toSerialize, nil
}

func (o *ClassifierTargetIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"labels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClassifierTargetIn := _ClassifierTargetIn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClassifierTargetIn)

	if err != nil {
		return err
	}

	*o = ClassifierTargetIn(varClassifierTargetIn)

	return err
}

type NullableClassifierTargetIn struct {
	value *ClassifierTargetIn
	isSet bool
}

func (v NullableClassifierTargetIn) Get() *ClassifierTargetIn {
	return v.value
}

func (v *NullableClassifierTargetIn) Set(val *ClassifierTargetIn) {
	v.value = val
	v.isSet = true
}

func (v NullableClassifierTargetIn) IsSet() bool {
	return v.isSet
}

func (v *NullableClassifierTargetIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassifierTargetIn(val *ClassifierTargetIn) *NullableClassifierTargetIn {
	return &NullableClassifierTargetIn{value: val, isSet: true}
}

func (v NullableClassifierTargetIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassifierTargetIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


