/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the ConversationUsageInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversationUsageInfo{}

// ConversationUsageInfo struct for ConversationUsageInfo
type ConversationUsageInfo struct {
	PromptTokens *int32 `json:"prompt_tokens,omitempty"`
	CompletionTokens *int32 `json:"completion_tokens,omitempty"`
	TotalTokens *int32 `json:"total_tokens,omitempty"`
	ConnectorTokens *ConnectorTokens `json:"connector_tokens,omitempty"`
	Connectors *Connectors `json:"connectors,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ConversationUsageInfo ConversationUsageInfo

// NewConversationUsageInfo instantiates a new ConversationUsageInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationUsageInfo() *ConversationUsageInfo {
	this := ConversationUsageInfo{}
	var promptTokens int32 = 0
	this.PromptTokens = &promptTokens
	var completionTokens int32 = 0
	this.CompletionTokens = &completionTokens
	var totalTokens int32 = 0
	this.TotalTokens = &totalTokens
	return &this
}

// NewConversationUsageInfoWithDefaults instantiates a new ConversationUsageInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationUsageInfoWithDefaults() *ConversationUsageInfo {
	this := ConversationUsageInfo{}
	var promptTokens int32 = 0
	this.PromptTokens = &promptTokens
	var completionTokens int32 = 0
	this.CompletionTokens = &completionTokens
	var totalTokens int32 = 0
	this.TotalTokens = &totalTokens
	return &this
}

// GetPromptTokens returns the PromptTokens field value if set, zero value otherwise.
func (o *ConversationUsageInfo) GetPromptTokens() int32 {
	if o == nil || IsNil(o.PromptTokens) {
		var ret int32
		return ret
	}
	return *o.PromptTokens
}

// GetPromptTokensOk returns a tuple with the PromptTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationUsageInfo) GetPromptTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.PromptTokens) {
		return nil, false
	}
	return o.PromptTokens, true
}

// HasPromptTokens returns a boolean if a field has been set.
func (o *ConversationUsageInfo) HasPromptTokens() bool {
	if o != nil && !IsNil(o.PromptTokens) {
		return true
	}

	return false
}

// SetPromptTokens gets a reference to the given int32 and assigns it to the PromptTokens field.
func (o *ConversationUsageInfo) SetPromptTokens(v int32) {
	o.PromptTokens = &v
}

// GetCompletionTokens returns the CompletionTokens field value if set, zero value otherwise.
func (o *ConversationUsageInfo) GetCompletionTokens() int32 {
	if o == nil || IsNil(o.CompletionTokens) {
		var ret int32
		return ret
	}
	return *o.CompletionTokens
}

// GetCompletionTokensOk returns a tuple with the CompletionTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationUsageInfo) GetCompletionTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.CompletionTokens) {
		return nil, false
	}
	return o.CompletionTokens, true
}

// HasCompletionTokens returns a boolean if a field has been set.
func (o *ConversationUsageInfo) HasCompletionTokens() bool {
	if o != nil && !IsNil(o.CompletionTokens) {
		return true
	}

	return false
}

// SetCompletionTokens gets a reference to the given int32 and assigns it to the CompletionTokens field.
func (o *ConversationUsageInfo) SetCompletionTokens(v int32) {
	o.CompletionTokens = &v
}

// GetTotalTokens returns the TotalTokens field value if set, zero value otherwise.
func (o *ConversationUsageInfo) GetTotalTokens() int32 {
	if o == nil || IsNil(o.TotalTokens) {
		var ret int32
		return ret
	}
	return *o.TotalTokens
}

// GetTotalTokensOk returns a tuple with the TotalTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationUsageInfo) GetTotalTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalTokens) {
		return nil, false
	}
	return o.TotalTokens, true
}

// HasTotalTokens returns a boolean if a field has been set.
func (o *ConversationUsageInfo) HasTotalTokens() bool {
	if o != nil && !IsNil(o.TotalTokens) {
		return true
	}

	return false
}

// SetTotalTokens gets a reference to the given int32 and assigns it to the TotalTokens field.
func (o *ConversationUsageInfo) SetTotalTokens(v int32) {
	o.TotalTokens = &v
}

// GetConnectorTokens returns the ConnectorTokens field value if set, zero value otherwise.
func (o *ConversationUsageInfo) GetConnectorTokens() ConnectorTokens {
	if o == nil || IsNil(o.ConnectorTokens) {
		var ret ConnectorTokens
		return ret
	}
	return *o.ConnectorTokens
}

// GetConnectorTokensOk returns a tuple with the ConnectorTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationUsageInfo) GetConnectorTokensOk() (*ConnectorTokens, bool) {
	if o == nil || IsNil(o.ConnectorTokens) {
		return nil, false
	}
	return o.ConnectorTokens, true
}

// HasConnectorTokens returns a boolean if a field has been set.
func (o *ConversationUsageInfo) HasConnectorTokens() bool {
	if o != nil && !IsNil(o.ConnectorTokens) {
		return true
	}

	return false
}

// SetConnectorTokens gets a reference to the given ConnectorTokens and assigns it to the ConnectorTokens field.
func (o *ConversationUsageInfo) SetConnectorTokens(v ConnectorTokens) {
	o.ConnectorTokens = &v
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *ConversationUsageInfo) GetConnectors() Connectors {
	if o == nil || IsNil(o.Connectors) {
		var ret Connectors
		return ret
	}
	return *o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationUsageInfo) GetConnectorsOk() (*Connectors, bool) {
	if o == nil || IsNil(o.Connectors) {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *ConversationUsageInfo) HasConnectors() bool {
	if o != nil && !IsNil(o.Connectors) {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given Connectors and assigns it to the Connectors field.
func (o *ConversationUsageInfo) SetConnectors(v Connectors) {
	o.Connectors = &v
}

func (o ConversationUsageInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversationUsageInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PromptTokens) {
		toSerialize["prompt_tokens"] = o.PromptTokens
	}
	if !IsNil(o.CompletionTokens) {
		toSerialize["completion_tokens"] = o.CompletionTokens
	}
	if !IsNil(o.TotalTokens) {
		toSerialize["total_tokens"] = o.TotalTokens
	}
	if !IsNil(o.ConnectorTokens) {
		toSerialize["connector_tokens"] = o.ConnectorTokens
	}
	if !IsNil(o.Connectors) {
		toSerialize["connectors"] = o.Connectors
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConversationUsageInfo) UnmarshalJSON(data []byte) (err error) {
	varConversationUsageInfo := _ConversationUsageInfo{}

	err = json.Unmarshal(data, &varConversationUsageInfo)

	if err != nil {
		return err
	}

	*o = ConversationUsageInfo(varConversationUsageInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "prompt_tokens")
		delete(additionalProperties, "completion_tokens")
		delete(additionalProperties, "total_tokens")
		delete(additionalProperties, "connector_tokens")
		delete(additionalProperties, "connectors")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConversationUsageInfo struct {
	value *ConversationUsageInfo
	isSet bool
}

func (v NullableConversationUsageInfo) Get() *ConversationUsageInfo {
	return v.value
}

func (v *NullableConversationUsageInfo) Set(val *ConversationUsageInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationUsageInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationUsageInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationUsageInfo(val *ConversationUsageInfo) *NullableConversationUsageInfo {
	return &NullableConversationUsageInfo{value: val, isSet: true}
}

func (v NullableConversationUsageInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationUsageInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


