/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Response2 - struct for Response2
type Response2 struct {
	ClassifierFTModelOut *ClassifierFTModelOut
	CompletionFTModelOut *CompletionFTModelOut
}

// ClassifierFTModelOutAsResponse2 is a convenience function that returns ClassifierFTModelOut wrapped in Response2
func ClassifierFTModelOutAsResponse2(v *ClassifierFTModelOut) Response2 {
	return Response2{
		ClassifierFTModelOut: v,
	}
}

// CompletionFTModelOutAsResponse2 is a convenience function that returns CompletionFTModelOut wrapped in Response2
func CompletionFTModelOutAsResponse2(v *CompletionFTModelOut) Response2 {
	return Response2{
		CompletionFTModelOut: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Response2) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ClassifierFTModelOut
	err = newStrictDecoder(data).Decode(&dst.ClassifierFTModelOut)
	if err == nil {
		jsonClassifierFTModelOut, _ := json.Marshal(dst.ClassifierFTModelOut)
		if string(jsonClassifierFTModelOut) == "{}" { // empty struct
			dst.ClassifierFTModelOut = nil
		} else {
			if err = validator.Validate(dst.ClassifierFTModelOut); err != nil {
				dst.ClassifierFTModelOut = nil
			} else {
				match++
			}
		}
	} else {
		dst.ClassifierFTModelOut = nil
	}

	// try to unmarshal data into CompletionFTModelOut
	err = newStrictDecoder(data).Decode(&dst.CompletionFTModelOut)
	if err == nil {
		jsonCompletionFTModelOut, _ := json.Marshal(dst.CompletionFTModelOut)
		if string(jsonCompletionFTModelOut) == "{}" { // empty struct
			dst.CompletionFTModelOut = nil
		} else {
			if err = validator.Validate(dst.CompletionFTModelOut); err != nil {
				dst.CompletionFTModelOut = nil
			} else {
				match++
			}
		}
	} else {
		dst.CompletionFTModelOut = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ClassifierFTModelOut = nil
		dst.CompletionFTModelOut = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Response2)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Response2)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Response2) MarshalJSON() ([]byte, error) {
	if src.ClassifierFTModelOut != nil {
		return json.Marshal(&src.ClassifierFTModelOut)
	}

	if src.CompletionFTModelOut != nil {
		return json.Marshal(&src.CompletionFTModelOut)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Response2) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ClassifierFTModelOut != nil {
		return obj.ClassifierFTModelOut
	}

	if obj.CompletionFTModelOut != nil {
		return obj.CompletionFTModelOut
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Response2) GetActualInstanceValue() (interface{}) {
	if obj.ClassifierFTModelOut != nil {
		return *obj.ClassifierFTModelOut
	}

	if obj.CompletionFTModelOut != nil {
		return *obj.CompletionFTModelOut
	}

	// all schemas are nil
	return nil
}

type NullableResponse2 struct {
	value *Response2
	isSet bool
}

func (v NullableResponse2) Get() *Response2 {
	return v.value
}

func (v *NullableResponse2) Set(val *Response2) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse2) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse2(val *Response2) *NullableResponse2 {
	return &NullableResponse2{value: val, isSet: true}
}

func (v NullableResponse2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


