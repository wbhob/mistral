/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the CompletionArgs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionArgs{}

// CompletionArgs White-listed arguments from the completion API
type CompletionArgs struct {
	Stop NullableCompletionArgsStop `json:"stop,omitempty"`
	PresencePenalty NullableFloat32 `json:"presence_penalty,omitempty"`
	FrequencyPenalty NullableFloat32 `json:"frequency_penalty,omitempty"`
	Temperature *float32 `json:"temperature,omitempty"`
	TopP NullableFloat32 `json:"top_p,omitempty"`
	MaxTokens NullableInt32 `json:"max_tokens,omitempty"`
	RandomSeed NullableInt32 `json:"random_seed,omitempty"`
	Prediction NullablePrediction `json:"prediction,omitempty"`
	ResponseFormat NullableResponseFormat `json:"response_format,omitempty"`
	ToolChoice *ToolChoiceEnum `json:"tool_choice,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CompletionArgs CompletionArgs

// NewCompletionArgs instantiates a new CompletionArgs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionArgs() *CompletionArgs {
	this := CompletionArgs{}
	var temperature float32 = 0.3
	this.Temperature = &temperature
	return &this
}

// NewCompletionArgsWithDefaults instantiates a new CompletionArgs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionArgsWithDefaults() *CompletionArgs {
	this := CompletionArgs{}
	var temperature float32 = 0.3
	this.Temperature = &temperature
	return &this
}

// GetStop returns the Stop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetStop() CompletionArgsStop {
	if o == nil || IsNil(o.Stop.Get()) {
		var ret CompletionArgsStop
		return ret
	}
	return *o.Stop.Get()
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetStopOk() (*CompletionArgsStop, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stop.Get(), o.Stop.IsSet()
}

// HasStop returns a boolean if a field has been set.
func (o *CompletionArgs) HasStop() bool {
	if o != nil && o.Stop.IsSet() {
		return true
	}

	return false
}

// SetStop gets a reference to the given NullableCompletionArgsStop and assigns it to the Stop field.
func (o *CompletionArgs) SetStop(v CompletionArgsStop) {
	o.Stop.Set(&v)
}
// SetStopNil sets the value for Stop to be an explicit nil
func (o *CompletionArgs) SetStopNil() {
	o.Stop.Set(nil)
}

// UnsetStop ensures that no value is present for Stop, not even an explicit nil
func (o *CompletionArgs) UnsetStop() {
	o.Stop.Unset()
}

// GetPresencePenalty returns the PresencePenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetPresencePenalty() float32 {
	if o == nil || IsNil(o.PresencePenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.PresencePenalty.Get()
}

// GetPresencePenaltyOk returns a tuple with the PresencePenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetPresencePenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PresencePenalty.Get(), o.PresencePenalty.IsSet()
}

// HasPresencePenalty returns a boolean if a field has been set.
func (o *CompletionArgs) HasPresencePenalty() bool {
	if o != nil && o.PresencePenalty.IsSet() {
		return true
	}

	return false
}

// SetPresencePenalty gets a reference to the given NullableFloat32 and assigns it to the PresencePenalty field.
func (o *CompletionArgs) SetPresencePenalty(v float32) {
	o.PresencePenalty.Set(&v)
}
// SetPresencePenaltyNil sets the value for PresencePenalty to be an explicit nil
func (o *CompletionArgs) SetPresencePenaltyNil() {
	o.PresencePenalty.Set(nil)
}

// UnsetPresencePenalty ensures that no value is present for PresencePenalty, not even an explicit nil
func (o *CompletionArgs) UnsetPresencePenalty() {
	o.PresencePenalty.Unset()
}

// GetFrequencyPenalty returns the FrequencyPenalty field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetFrequencyPenalty() float32 {
	if o == nil || IsNil(o.FrequencyPenalty.Get()) {
		var ret float32
		return ret
	}
	return *o.FrequencyPenalty.Get()
}

// GetFrequencyPenaltyOk returns a tuple with the FrequencyPenalty field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetFrequencyPenaltyOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FrequencyPenalty.Get(), o.FrequencyPenalty.IsSet()
}

// HasFrequencyPenalty returns a boolean if a field has been set.
func (o *CompletionArgs) HasFrequencyPenalty() bool {
	if o != nil && o.FrequencyPenalty.IsSet() {
		return true
	}

	return false
}

// SetFrequencyPenalty gets a reference to the given NullableFloat32 and assigns it to the FrequencyPenalty field.
func (o *CompletionArgs) SetFrequencyPenalty(v float32) {
	o.FrequencyPenalty.Set(&v)
}
// SetFrequencyPenaltyNil sets the value for FrequencyPenalty to be an explicit nil
func (o *CompletionArgs) SetFrequencyPenaltyNil() {
	o.FrequencyPenalty.Set(nil)
}

// UnsetFrequencyPenalty ensures that no value is present for FrequencyPenalty, not even an explicit nil
func (o *CompletionArgs) UnsetFrequencyPenalty() {
	o.FrequencyPenalty.Unset()
}

// GetTemperature returns the Temperature field value if set, zero value otherwise.
func (o *CompletionArgs) GetTemperature() float32 {
	if o == nil || IsNil(o.Temperature) {
		var ret float32
		return ret
	}
	return *o.Temperature
}

// GetTemperatureOk returns a tuple with the Temperature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionArgs) GetTemperatureOk() (*float32, bool) {
	if o == nil || IsNil(o.Temperature) {
		return nil, false
	}
	return o.Temperature, true
}

// HasTemperature returns a boolean if a field has been set.
func (o *CompletionArgs) HasTemperature() bool {
	if o != nil && !IsNil(o.Temperature) {
		return true
	}

	return false
}

// SetTemperature gets a reference to the given float32 and assigns it to the Temperature field.
func (o *CompletionArgs) SetTemperature(v float32) {
	o.Temperature = &v
}

// GetTopP returns the TopP field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetTopP() float32 {
	if o == nil || IsNil(o.TopP.Get()) {
		var ret float32
		return ret
	}
	return *o.TopP.Get()
}

// GetTopPOk returns a tuple with the TopP field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetTopPOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TopP.Get(), o.TopP.IsSet()
}

// HasTopP returns a boolean if a field has been set.
func (o *CompletionArgs) HasTopP() bool {
	if o != nil && o.TopP.IsSet() {
		return true
	}

	return false
}

// SetTopP gets a reference to the given NullableFloat32 and assigns it to the TopP field.
func (o *CompletionArgs) SetTopP(v float32) {
	o.TopP.Set(&v)
}
// SetTopPNil sets the value for TopP to be an explicit nil
func (o *CompletionArgs) SetTopPNil() {
	o.TopP.Set(nil)
}

// UnsetTopP ensures that no value is present for TopP, not even an explicit nil
func (o *CompletionArgs) UnsetTopP() {
	o.TopP.Unset()
}

// GetMaxTokens returns the MaxTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetMaxTokens() int32 {
	if o == nil || IsNil(o.MaxTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxTokens.Get()
}

// GetMaxTokensOk returns a tuple with the MaxTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetMaxTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxTokens.Get(), o.MaxTokens.IsSet()
}

// HasMaxTokens returns a boolean if a field has been set.
func (o *CompletionArgs) HasMaxTokens() bool {
	if o != nil && o.MaxTokens.IsSet() {
		return true
	}

	return false
}

// SetMaxTokens gets a reference to the given NullableInt32 and assigns it to the MaxTokens field.
func (o *CompletionArgs) SetMaxTokens(v int32) {
	o.MaxTokens.Set(&v)
}
// SetMaxTokensNil sets the value for MaxTokens to be an explicit nil
func (o *CompletionArgs) SetMaxTokensNil() {
	o.MaxTokens.Set(nil)
}

// UnsetMaxTokens ensures that no value is present for MaxTokens, not even an explicit nil
func (o *CompletionArgs) UnsetMaxTokens() {
	o.MaxTokens.Unset()
}

// GetRandomSeed returns the RandomSeed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetRandomSeed() int32 {
	if o == nil || IsNil(o.RandomSeed.Get()) {
		var ret int32
		return ret
	}
	return *o.RandomSeed.Get()
}

// GetRandomSeedOk returns a tuple with the RandomSeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetRandomSeedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RandomSeed.Get(), o.RandomSeed.IsSet()
}

// HasRandomSeed returns a boolean if a field has been set.
func (o *CompletionArgs) HasRandomSeed() bool {
	if o != nil && o.RandomSeed.IsSet() {
		return true
	}

	return false
}

// SetRandomSeed gets a reference to the given NullableInt32 and assigns it to the RandomSeed field.
func (o *CompletionArgs) SetRandomSeed(v int32) {
	o.RandomSeed.Set(&v)
}
// SetRandomSeedNil sets the value for RandomSeed to be an explicit nil
func (o *CompletionArgs) SetRandomSeedNil() {
	o.RandomSeed.Set(nil)
}

// UnsetRandomSeed ensures that no value is present for RandomSeed, not even an explicit nil
func (o *CompletionArgs) UnsetRandomSeed() {
	o.RandomSeed.Unset()
}

// GetPrediction returns the Prediction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetPrediction() Prediction {
	if o == nil || IsNil(o.Prediction.Get()) {
		var ret Prediction
		return ret
	}
	return *o.Prediction.Get()
}

// GetPredictionOk returns a tuple with the Prediction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetPredictionOk() (*Prediction, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prediction.Get(), o.Prediction.IsSet()
}

// HasPrediction returns a boolean if a field has been set.
func (o *CompletionArgs) HasPrediction() bool {
	if o != nil && o.Prediction.IsSet() {
		return true
	}

	return false
}

// SetPrediction gets a reference to the given NullablePrediction and assigns it to the Prediction field.
func (o *CompletionArgs) SetPrediction(v Prediction) {
	o.Prediction.Set(&v)
}
// SetPredictionNil sets the value for Prediction to be an explicit nil
func (o *CompletionArgs) SetPredictionNil() {
	o.Prediction.Set(nil)
}

// UnsetPrediction ensures that no value is present for Prediction, not even an explicit nil
func (o *CompletionArgs) UnsetPrediction() {
	o.Prediction.Unset()
}

// GetResponseFormat returns the ResponseFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionArgs) GetResponseFormat() ResponseFormat {
	if o == nil || IsNil(o.ResponseFormat.Get()) {
		var ret ResponseFormat
		return ret
	}
	return *o.ResponseFormat.Get()
}

// GetResponseFormatOk returns a tuple with the ResponseFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionArgs) GetResponseFormatOk() (*ResponseFormat, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResponseFormat.Get(), o.ResponseFormat.IsSet()
}

// HasResponseFormat returns a boolean if a field has been set.
func (o *CompletionArgs) HasResponseFormat() bool {
	if o != nil && o.ResponseFormat.IsSet() {
		return true
	}

	return false
}

// SetResponseFormat gets a reference to the given NullableResponseFormat and assigns it to the ResponseFormat field.
func (o *CompletionArgs) SetResponseFormat(v ResponseFormat) {
	o.ResponseFormat.Set(&v)
}
// SetResponseFormatNil sets the value for ResponseFormat to be an explicit nil
func (o *CompletionArgs) SetResponseFormatNil() {
	o.ResponseFormat.Set(nil)
}

// UnsetResponseFormat ensures that no value is present for ResponseFormat, not even an explicit nil
func (o *CompletionArgs) UnsetResponseFormat() {
	o.ResponseFormat.Unset()
}

// GetToolChoice returns the ToolChoice field value if set, zero value otherwise.
func (o *CompletionArgs) GetToolChoice() ToolChoiceEnum {
	if o == nil || IsNil(o.ToolChoice) {
		var ret ToolChoiceEnum
		return ret
	}
	return *o.ToolChoice
}

// GetToolChoiceOk returns a tuple with the ToolChoice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionArgs) GetToolChoiceOk() (*ToolChoiceEnum, bool) {
	if o == nil || IsNil(o.ToolChoice) {
		return nil, false
	}
	return o.ToolChoice, true
}

// HasToolChoice returns a boolean if a field has been set.
func (o *CompletionArgs) HasToolChoice() bool {
	if o != nil && !IsNil(o.ToolChoice) {
		return true
	}

	return false
}

// SetToolChoice gets a reference to the given ToolChoiceEnum and assigns it to the ToolChoice field.
func (o *CompletionArgs) SetToolChoice(v ToolChoiceEnum) {
	o.ToolChoice = &v
}

func (o CompletionArgs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionArgs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Stop.IsSet() {
		toSerialize["stop"] = o.Stop.Get()
	}
	if o.PresencePenalty.IsSet() {
		toSerialize["presence_penalty"] = o.PresencePenalty.Get()
	}
	if o.FrequencyPenalty.IsSet() {
		toSerialize["frequency_penalty"] = o.FrequencyPenalty.Get()
	}
	if !IsNil(o.Temperature) {
		toSerialize["temperature"] = o.Temperature
	}
	if o.TopP.IsSet() {
		toSerialize["top_p"] = o.TopP.Get()
	}
	if o.MaxTokens.IsSet() {
		toSerialize["max_tokens"] = o.MaxTokens.Get()
	}
	if o.RandomSeed.IsSet() {
		toSerialize["random_seed"] = o.RandomSeed.Get()
	}
	if o.Prediction.IsSet() {
		toSerialize["prediction"] = o.Prediction.Get()
	}
	if o.ResponseFormat.IsSet() {
		toSerialize["response_format"] = o.ResponseFormat.Get()
	}
	if !IsNil(o.ToolChoice) {
		toSerialize["tool_choice"] = o.ToolChoice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompletionArgs) UnmarshalJSON(data []byte) (err error) {
	varCompletionArgs := _CompletionArgs{}

	err = json.Unmarshal(data, &varCompletionArgs)

	if err != nil {
		return err
	}

	*o = CompletionArgs(varCompletionArgs)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "stop")
		delete(additionalProperties, "presence_penalty")
		delete(additionalProperties, "frequency_penalty")
		delete(additionalProperties, "temperature")
		delete(additionalProperties, "top_p")
		delete(additionalProperties, "max_tokens")
		delete(additionalProperties, "random_seed")
		delete(additionalProperties, "prediction")
		delete(additionalProperties, "response_format")
		delete(additionalProperties, "tool_choice")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompletionArgs struct {
	value *CompletionArgs
	isSet bool
}

func (v NullableCompletionArgs) Get() *CompletionArgs {
	return v.value
}

func (v *NullableCompletionArgs) Set(val *CompletionArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionArgs(val *CompletionArgs) *NullableCompletionArgs {
	return &NullableCompletionArgs{value: val, isSet: true}
}

func (v NullableCompletionArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


