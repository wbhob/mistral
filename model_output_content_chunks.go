/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// OutputContentChunks struct for OutputContentChunks
type OutputContentChunks struct {
	DocumentURLChunk *DocumentURLChunk
	ImageURLChunk *ImageURLChunk
	TextChunk *TextChunk
	ToolFileChunk *ToolFileChunk
	ToolReferenceChunk *ToolReferenceChunk
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *OutputContentChunks) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into DocumentURLChunk
	err = json.Unmarshal(data, &dst.DocumentURLChunk);
	if err == nil {
		jsonDocumentURLChunk, _ := json.Marshal(dst.DocumentURLChunk)
		if string(jsonDocumentURLChunk) == "{}" { // empty struct
			dst.DocumentURLChunk = nil
		} else {
			return nil // data stored in dst.DocumentURLChunk, return on the first match
		}
	} else {
		dst.DocumentURLChunk = nil
	}

	// try to unmarshal JSON data into ImageURLChunk
	err = json.Unmarshal(data, &dst.ImageURLChunk);
	if err == nil {
		jsonImageURLChunk, _ := json.Marshal(dst.ImageURLChunk)
		if string(jsonImageURLChunk) == "{}" { // empty struct
			dst.ImageURLChunk = nil
		} else {
			return nil // data stored in dst.ImageURLChunk, return on the first match
		}
	} else {
		dst.ImageURLChunk = nil
	}

	// try to unmarshal JSON data into TextChunk
	err = json.Unmarshal(data, &dst.TextChunk);
	if err == nil {
		jsonTextChunk, _ := json.Marshal(dst.TextChunk)
		if string(jsonTextChunk) == "{}" { // empty struct
			dst.TextChunk = nil
		} else {
			return nil // data stored in dst.TextChunk, return on the first match
		}
	} else {
		dst.TextChunk = nil
	}

	// try to unmarshal JSON data into ToolFileChunk
	err = json.Unmarshal(data, &dst.ToolFileChunk);
	if err == nil {
		jsonToolFileChunk, _ := json.Marshal(dst.ToolFileChunk)
		if string(jsonToolFileChunk) == "{}" { // empty struct
			dst.ToolFileChunk = nil
		} else {
			return nil // data stored in dst.ToolFileChunk, return on the first match
		}
	} else {
		dst.ToolFileChunk = nil
	}

	// try to unmarshal JSON data into ToolReferenceChunk
	err = json.Unmarshal(data, &dst.ToolReferenceChunk);
	if err == nil {
		jsonToolReferenceChunk, _ := json.Marshal(dst.ToolReferenceChunk)
		if string(jsonToolReferenceChunk) == "{}" { // empty struct
			dst.ToolReferenceChunk = nil
		} else {
			return nil // data stored in dst.ToolReferenceChunk, return on the first match
		}
	} else {
		dst.ToolReferenceChunk = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(OutputContentChunks)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src OutputContentChunks) MarshalJSON() ([]byte, error) {
	if src.DocumentURLChunk != nil {
		return json.Marshal(&src.DocumentURLChunk)
	}

	if src.ImageURLChunk != nil {
		return json.Marshal(&src.ImageURLChunk)
	}

	if src.TextChunk != nil {
		return json.Marshal(&src.TextChunk)
	}

	if src.ToolFileChunk != nil {
		return json.Marshal(&src.ToolFileChunk)
	}

	if src.ToolReferenceChunk != nil {
		return json.Marshal(&src.ToolReferenceChunk)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableOutputContentChunks struct {
	value *OutputContentChunks
	isSet bool
}

func (v NullableOutputContentChunks) Get() *OutputContentChunks {
	return v.value
}

func (v *NullableOutputContentChunks) Set(val *OutputContentChunks) {
	v.value = val
	v.isSet = true
}

func (v NullableOutputContentChunks) IsSet() bool {
	return v.isSet
}

func (v *NullableOutputContentChunks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOutputContentChunks(val *OutputContentChunks) *NullableOutputContentChunks {
	return &NullableOutputContentChunks{value: val, isSet: true}
}

func (v NullableOutputContentChunks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOutputContentChunks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


