/*
Mistral AI API

Testing BetaConversationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistral

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/wbhob/mistral"
)

func Test_mistral_BetaConversationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsAppend", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsAppend(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsAppendStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsAppendStream(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsGet(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsHistory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsHistory(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsMessages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsMessages(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsRestart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsRestart(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsRestartStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var conversationId string

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsRestartStream(context.Background(), conversationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsStart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsStart(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaConversationsAPIService AgentsApiV1ConversationsStartStream", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.BetaConversationsAPI.AgentsApiV1ConversationsStartStream(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
