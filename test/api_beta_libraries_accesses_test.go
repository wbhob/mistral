/*
Mistral AI API

Testing BetaLibrariesAccessesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package mistral

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/wbhob/mistral"
)

func Test_mistral_BetaLibrariesAccessesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BetaLibrariesAccessesAPIService LibrariesShareCreateV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryId string

		resp, httpRes, err := apiClient.BetaLibrariesAccessesAPI.LibrariesShareCreateV1(context.Background(), libraryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaLibrariesAccessesAPIService LibrariesShareDeleteV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryId string

		resp, httpRes, err := apiClient.BetaLibrariesAccessesAPI.LibrariesShareDeleteV1(context.Background(), libraryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BetaLibrariesAccessesAPIService LibrariesShareListV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var libraryId string

		resp, httpRes, err := apiClient.BetaLibrariesAccessesAPI.LibrariesShareListV1(context.Background(), libraryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
