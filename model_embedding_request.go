/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the EmbeddingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmbeddingRequest{}

// EmbeddingRequest struct for EmbeddingRequest
type EmbeddingRequest struct {
	// ID of the model to use.
	Model string `json:"model"`
	Input Input2 `json:"input"`
	OutputDimension NullableInt32 `json:"output_dimension,omitempty"`
	// The data type of the output embeddings.
	OutputDtype *EmbeddingDtype `json:"output_dtype,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EmbeddingRequest EmbeddingRequest

// NewEmbeddingRequest instantiates a new EmbeddingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmbeddingRequest(model string, input Input2) *EmbeddingRequest {
	this := EmbeddingRequest{}
	this.Model = model
	this.Input = input
	return &this
}

// NewEmbeddingRequestWithDefaults instantiates a new EmbeddingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmbeddingRequestWithDefaults() *EmbeddingRequest {
	this := EmbeddingRequest{}
	return &this
}

// GetModel returns the Model field value
func (o *EmbeddingRequest) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *EmbeddingRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *EmbeddingRequest) SetModel(v string) {
	o.Model = v
}

// GetInput returns the Input field value
func (o *EmbeddingRequest) GetInput() Input2 {
	if o == nil {
		var ret Input2
		return ret
	}

	return o.Input
}

// GetInputOk returns a tuple with the Input field value
// and a boolean to check if the value has been set.
func (o *EmbeddingRequest) GetInputOk() (*Input2, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Input, true
}

// SetInput sets field value
func (o *EmbeddingRequest) SetInput(v Input2) {
	o.Input = v
}

// GetOutputDimension returns the OutputDimension field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmbeddingRequest) GetOutputDimension() int32 {
	if o == nil || IsNil(o.OutputDimension.Get()) {
		var ret int32
		return ret
	}
	return *o.OutputDimension.Get()
}

// GetOutputDimensionOk returns a tuple with the OutputDimension field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmbeddingRequest) GetOutputDimensionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutputDimension.Get(), o.OutputDimension.IsSet()
}

// HasOutputDimension returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasOutputDimension() bool {
	if o != nil && o.OutputDimension.IsSet() {
		return true
	}

	return false
}

// SetOutputDimension gets a reference to the given NullableInt32 and assigns it to the OutputDimension field.
func (o *EmbeddingRequest) SetOutputDimension(v int32) {
	o.OutputDimension.Set(&v)
}
// SetOutputDimensionNil sets the value for OutputDimension to be an explicit nil
func (o *EmbeddingRequest) SetOutputDimensionNil() {
	o.OutputDimension.Set(nil)
}

// UnsetOutputDimension ensures that no value is present for OutputDimension, not even an explicit nil
func (o *EmbeddingRequest) UnsetOutputDimension() {
	o.OutputDimension.Unset()
}

// GetOutputDtype returns the OutputDtype field value if set, zero value otherwise.
func (o *EmbeddingRequest) GetOutputDtype() EmbeddingDtype {
	if o == nil || IsNil(o.OutputDtype) {
		var ret EmbeddingDtype
		return ret
	}
	return *o.OutputDtype
}

// GetOutputDtypeOk returns a tuple with the OutputDtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmbeddingRequest) GetOutputDtypeOk() (*EmbeddingDtype, bool) {
	if o == nil || IsNil(o.OutputDtype) {
		return nil, false
	}
	return o.OutputDtype, true
}

// HasOutputDtype returns a boolean if a field has been set.
func (o *EmbeddingRequest) HasOutputDtype() bool {
	if o != nil && !IsNil(o.OutputDtype) {
		return true
	}

	return false
}

// SetOutputDtype gets a reference to the given EmbeddingDtype and assigns it to the OutputDtype field.
func (o *EmbeddingRequest) SetOutputDtype(v EmbeddingDtype) {
	o.OutputDtype = &v
}

func (o EmbeddingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmbeddingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	toSerialize["input"] = o.Input
	if o.OutputDimension.IsSet() {
		toSerialize["output_dimension"] = o.OutputDimension.Get()
	}
	if !IsNil(o.OutputDtype) {
		toSerialize["output_dtype"] = o.OutputDtype
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EmbeddingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"input",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEmbeddingRequest := _EmbeddingRequest{}

	err = json.Unmarshal(data, &varEmbeddingRequest)

	if err != nil {
		return err
	}

	*o = EmbeddingRequest(varEmbeddingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		delete(additionalProperties, "input")
		delete(additionalProperties, "output_dimension")
		delete(additionalProperties, "output_dtype")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEmbeddingRequest struct {
	value *EmbeddingRequest
	isSet bool
}

func (v NullableEmbeddingRequest) Get() *EmbeddingRequest {
	return v.value
}

func (v *NullableEmbeddingRequest) Set(val *EmbeddingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingRequest(val *EmbeddingRequest) *NullableEmbeddingRequest {
	return &NullableEmbeddingRequest{value: val, isSet: true}
}

func (v NullableEmbeddingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


