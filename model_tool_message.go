/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the ToolMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolMessage{}

// ToolMessage struct for ToolMessage
type ToolMessage struct {
	Content NullableContent `json:"content"`
	ToolCallId NullableString `json:"tool_call_id,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Role *string `json:"role,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ToolMessage ToolMessage

// NewToolMessage instantiates a new ToolMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolMessage(content NullableContent) *ToolMessage {
	this := ToolMessage{}
	this.Content = content
	var role string = "tool"
	this.Role = &role
	return &this
}

// NewToolMessageWithDefaults instantiates a new ToolMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolMessageWithDefaults() *ToolMessage {
	this := ToolMessage{}
	var role string = "tool"
	this.Role = &role
	return &this
}

// GetContent returns the Content field value
// If the value is explicit nil, the zero value for Content will be returned
func (o *ToolMessage) GetContent() Content {
	if o == nil || o.Content.Get() == nil {
		var ret Content
		return ret
	}

	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolMessage) GetContentOk() (*Content, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// SetContent sets field value
func (o *ToolMessage) SetContent(v Content) {
	o.Content.Set(&v)
}

// GetToolCallId returns the ToolCallId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolMessage) GetToolCallId() string {
	if o == nil || IsNil(o.ToolCallId.Get()) {
		var ret string
		return ret
	}
	return *o.ToolCallId.Get()
}

// GetToolCallIdOk returns a tuple with the ToolCallId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolMessage) GetToolCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToolCallId.Get(), o.ToolCallId.IsSet()
}

// HasToolCallId returns a boolean if a field has been set.
func (o *ToolMessage) HasToolCallId() bool {
	if o != nil && o.ToolCallId.IsSet() {
		return true
	}

	return false
}

// SetToolCallId gets a reference to the given NullableString and assigns it to the ToolCallId field.
func (o *ToolMessage) SetToolCallId(v string) {
	o.ToolCallId.Set(&v)
}
// SetToolCallIdNil sets the value for ToolCallId to be an explicit nil
func (o *ToolMessage) SetToolCallIdNil() {
	o.ToolCallId.Set(nil)
}

// UnsetToolCallId ensures that no value is present for ToolCallId, not even an explicit nil
func (o *ToolMessage) UnsetToolCallId() {
	o.ToolCallId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolMessage) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolMessage) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ToolMessage) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ToolMessage) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ToolMessage) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ToolMessage) UnsetName() {
	o.Name.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ToolMessage) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolMessage) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ToolMessage) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ToolMessage) SetRole(v string) {
	o.Role = &v
}

func (o ToolMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["content"] = o.Content.Get()
	if o.ToolCallId.IsSet() {
		toSerialize["tool_call_id"] = o.ToolCallId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToolMessage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"content",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolMessage := _ToolMessage{}

	err = json.Unmarshal(data, &varToolMessage)

	if err != nil {
		return err
	}

	*o = ToolMessage(varToolMessage)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "content")
		delete(additionalProperties, "tool_call_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToolMessage struct {
	value *ToolMessage
	isSet bool
}

func (v NullableToolMessage) Get() *ToolMessage {
	return v.value
}

func (v *NullableToolMessage) Set(val *ToolMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableToolMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableToolMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolMessage(val *ToolMessage) *NullableToolMessage {
	return &NullableToolMessage{value: val, isSet: true}
}

func (v NullableToolMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


