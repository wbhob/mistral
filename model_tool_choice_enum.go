/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// ToolChoiceEnum the model 'ToolChoiceEnum'
type ToolChoiceEnum string

// List of ToolChoiceEnum
const (
	TOOLCHOICEENUM_AUTO ToolChoiceEnum = "auto"
	TOOLCHOICEENUM_NONE ToolChoiceEnum = "none"
	TOOLCHOICEENUM_ANY ToolChoiceEnum = "any"
	TOOLCHOICEENUM_REQUIRED ToolChoiceEnum = "required"
)

// All allowed values of ToolChoiceEnum enum
var AllowedToolChoiceEnumEnumValues = []ToolChoiceEnum{
	"auto",
	"none",
	"any",
	"required",
}

func (v *ToolChoiceEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ToolChoiceEnum(value)
	for _, existing := range AllowedToolChoiceEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ToolChoiceEnum", value)
}

// NewToolChoiceEnumFromValue returns a pointer to a valid ToolChoiceEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewToolChoiceEnumFromValue(v string) (*ToolChoiceEnum, error) {
	ev := ToolChoiceEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ToolChoiceEnum: valid values are %v", v, AllowedToolChoiceEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ToolChoiceEnum) IsValid() bool {
	for _, existing := range AllowedToolChoiceEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ToolChoiceEnum value
func (v ToolChoiceEnum) Ptr() *ToolChoiceEnum {
	return &v
}

type NullableToolChoiceEnum struct {
	value *ToolChoiceEnum
	isSet bool
}

func (v NullableToolChoiceEnum) Get() *ToolChoiceEnum {
	return v.value
}

func (v *NullableToolChoiceEnum) Set(val *ToolChoiceEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableToolChoiceEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableToolChoiceEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolChoiceEnum(val *ToolChoiceEnum) *NullableToolChoiceEnum {
	return &NullableToolChoiceEnum{value: val, isSet: true}
}

func (v NullableToolChoiceEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolChoiceEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

