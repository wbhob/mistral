/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// ShareEnum the model 'ShareEnum'
type ShareEnum string

// List of ShareEnum
const (
	SHAREENUM_VIEWER ShareEnum = "Viewer"
	SHAREENUM_EDITOR ShareEnum = "Editor"
)

// All allowed values of ShareEnum enum
var AllowedShareEnumEnumValues = []ShareEnum{
	"Viewer",
	"Editor",
}

func (v *ShareEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShareEnum(value)
	for _, existing := range AllowedShareEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShareEnum", value)
}

// NewShareEnumFromValue returns a pointer to a valid ShareEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShareEnumFromValue(v string) (*ShareEnum, error) {
	ev := ShareEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShareEnum: valid values are %v", v, AllowedShareEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShareEnum) IsValid() bool {
	for _, existing := range AllowedShareEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShareEnum value
func (v ShareEnum) Ptr() *ShareEnum {
	return &v
}

type NullableShareEnum struct {
	value *ShareEnum
	isSet bool
}

func (v NullableShareEnum) Get() *ShareEnum {
	return v.value
}

func (v *NullableShareEnum) Set(val *ShareEnum) {
	v.value = val
	v.isSet = true
}

func (v NullableShareEnum) IsSet() bool {
	return v.isSet
}

func (v *NullableShareEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShareEnum(val *ShareEnum) *NullableShareEnum {
	return &NullableShareEnum{value: val, isSet: true}
}

func (v NullableShareEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShareEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

