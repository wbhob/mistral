/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModerationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModerationResponse{}

// ModerationResponse struct for ModerationResponse
type ModerationResponse struct {
	Id string `json:"id"`
	Model string `json:"model"`
	Results []ModerationObject `json:"results"`
}

type _ModerationResponse ModerationResponse

// NewModerationResponse instantiates a new ModerationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModerationResponse(id string, model string, results []ModerationObject) *ModerationResponse {
	this := ModerationResponse{}
	this.Id = id
	this.Model = model
	this.Results = results
	return &this
}

// NewModerationResponseWithDefaults instantiates a new ModerationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModerationResponseWithDefaults() *ModerationResponse {
	this := ModerationResponse{}
	return &this
}

// GetId returns the Id field value
func (o *ModerationResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModerationResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModerationResponse) SetId(v string) {
	o.Id = v
}

// GetModel returns the Model field value
func (o *ModerationResponse) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *ModerationResponse) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *ModerationResponse) SetModel(v string) {
	o.Model = v
}

// GetResults returns the Results field value
func (o *ModerationResponse) GetResults() []ModerationObject {
	if o == nil {
		var ret []ModerationObject
		return ret
	}

	return o.Results
}

// GetResultsOk returns a tuple with the Results field value
// and a boolean to check if the value has been set.
func (o *ModerationResponse) GetResultsOk() ([]ModerationObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Results, true
}

// SetResults sets field value
func (o *ModerationResponse) SetResults(v []ModerationObject) {
	o.Results = v
}

func (o ModerationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModerationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["model"] = o.Model
	toSerialize["results"] = o.Results
	return toSerialize, nil
}

func (o *ModerationResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"model",
		"results",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModerationResponse := _ModerationResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModerationResponse)

	if err != nil {
		return err
	}

	*o = ModerationResponse(varModerationResponse)

	return err
}

type NullableModerationResponse struct {
	value *ModerationResponse
	isSet bool
}

func (v NullableModerationResponse) Get() *ModerationResponse {
	return v.value
}

func (v *NullableModerationResponse) Set(val *ModerationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableModerationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableModerationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModerationResponse(val *ModerationResponse) *NullableModerationResponse {
	return &NullableModerationResponse{value: val, isSet: true}
}

func (v NullableModerationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModerationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


