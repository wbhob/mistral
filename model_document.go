/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// Document Document to run OCR on
type Document struct {
	DocumentURLChunk *DocumentURLChunk
	ImageURLChunk *ImageURLChunk
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Document) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into DocumentURLChunk
	err = json.Unmarshal(data, &dst.DocumentURLChunk);
	if err == nil {
		jsonDocumentURLChunk, _ := json.Marshal(dst.DocumentURLChunk)
		if string(jsonDocumentURLChunk) == "{}" { // empty struct
			dst.DocumentURLChunk = nil
		} else {
			return nil // data stored in dst.DocumentURLChunk, return on the first match
		}
	} else {
		dst.DocumentURLChunk = nil
	}

	// try to unmarshal JSON data into ImageURLChunk
	err = json.Unmarshal(data, &dst.ImageURLChunk);
	if err == nil {
		jsonImageURLChunk, _ := json.Marshal(dst.ImageURLChunk)
		if string(jsonImageURLChunk) == "{}" { // empty struct
			dst.ImageURLChunk = nil
		} else {
			return nil // data stored in dst.ImageURLChunk, return on the first match
		}
	} else {
		dst.ImageURLChunk = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Document)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Document) MarshalJSON() ([]byte, error) {
	if src.DocumentURLChunk != nil {
		return json.Marshal(&src.DocumentURLChunk)
	}

	if src.ImageURLChunk != nil {
		return json.Marshal(&src.ImageURLChunk)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


