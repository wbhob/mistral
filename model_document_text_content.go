/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentTextContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentTextContent{}

// DocumentTextContent struct for DocumentTextContent
type DocumentTextContent struct {
	Text string `json:"text"`
}

type _DocumentTextContent DocumentTextContent

// NewDocumentTextContent instantiates a new DocumentTextContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentTextContent(text string) *DocumentTextContent {
	this := DocumentTextContent{}
	this.Text = text
	return &this
}

// NewDocumentTextContentWithDefaults instantiates a new DocumentTextContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentTextContentWithDefaults() *DocumentTextContent {
	this := DocumentTextContent{}
	return &this
}

// GetText returns the Text field value
func (o *DocumentTextContent) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *DocumentTextContent) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *DocumentTextContent) SetText(v string) {
	o.Text = v
}

func (o DocumentTextContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentTextContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	return toSerialize, nil
}

func (o *DocumentTextContent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentTextContent := _DocumentTextContent{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentTextContent)

	if err != nil {
		return err
	}

	*o = DocumentTextContent(varDocumentTextContent)

	return err
}

type NullableDocumentTextContent struct {
	value *DocumentTextContent
	isSet bool
}

func (v NullableDocumentTextContent) Get() *DocumentTextContent {
	return v.value
}

func (v *NullableDocumentTextContent) Set(val *DocumentTextContent) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentTextContent) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentTextContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentTextContent(val *DocumentTextContent) *NullableDocumentTextContent {
	return &NullableDocumentTextContent{value: val, isSet: true}
}

func (v NullableDocumentTextContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentTextContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


