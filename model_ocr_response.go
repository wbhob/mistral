/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the OCRResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OCRResponse{}

// OCRResponse struct for OCRResponse
type OCRResponse struct {
	// List of OCR info for pages.
	Pages []OCRPageObject `json:"pages"`
	// The model used to generate the OCR.
	Model string `json:"model"`
	// Usage info for the OCR request.
	UsageInfo OCRUsageInfo `json:"usage_info"`
	AdditionalProperties map[string]interface{}
}

type _OCRResponse OCRResponse

// NewOCRResponse instantiates a new OCRResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCRResponse(pages []OCRPageObject, model string, usageInfo OCRUsageInfo) *OCRResponse {
	this := OCRResponse{}
	this.Pages = pages
	this.Model = model
	this.UsageInfo = usageInfo
	return &this
}

// NewOCRResponseWithDefaults instantiates a new OCRResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCRResponseWithDefaults() *OCRResponse {
	this := OCRResponse{}
	return &this
}

// GetPages returns the Pages field value
func (o *OCRResponse) GetPages() []OCRPageObject {
	if o == nil {
		var ret []OCRPageObject
		return ret
	}

	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value
// and a boolean to check if the value has been set.
func (o *OCRResponse) GetPagesOk() ([]OCRPageObject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Pages, true
}

// SetPages sets field value
func (o *OCRResponse) SetPages(v []OCRPageObject) {
	o.Pages = v
}

// GetModel returns the Model field value
func (o *OCRResponse) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *OCRResponse) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *OCRResponse) SetModel(v string) {
	o.Model = v
}

// GetUsageInfo returns the UsageInfo field value
func (o *OCRResponse) GetUsageInfo() OCRUsageInfo {
	if o == nil {
		var ret OCRUsageInfo
		return ret
	}

	return o.UsageInfo
}

// GetUsageInfoOk returns a tuple with the UsageInfo field value
// and a boolean to check if the value has been set.
func (o *OCRResponse) GetUsageInfoOk() (*OCRUsageInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageInfo, true
}

// SetUsageInfo sets field value
func (o *OCRResponse) SetUsageInfo(v OCRUsageInfo) {
	o.UsageInfo = v
}

func (o OCRResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OCRResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pages"] = o.Pages
	toSerialize["model"] = o.Model
	toSerialize["usage_info"] = o.UsageInfo

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OCRResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pages",
		"model",
		"usage_info",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOCRResponse := _OCRResponse{}

	err = json.Unmarshal(data, &varOCRResponse)

	if err != nil {
		return err
	}

	*o = OCRResponse(varOCRResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "pages")
		delete(additionalProperties, "model")
		delete(additionalProperties, "usage_info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOCRResponse struct {
	value *OCRResponse
	isSet bool
}

func (v NullableOCRResponse) Get() *OCRResponse {
	return v.value
}

func (v *NullableOCRResponse) Set(val *OCRResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOCRResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOCRResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCRResponse(val *OCRResponse) *NullableOCRResponse {
	return &NullableOCRResponse{value: val, isSet: true}
}

func (v NullableOCRResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCRResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


