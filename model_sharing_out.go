/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SharingOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharingOut{}

// SharingOut struct for SharingOut
type SharingOut struct {
	LibraryId string `json:"library_id"`
	UserId NullableString `json:"user_id,omitempty"`
	OrgId string `json:"org_id"`
	Role string `json:"role"`
	ShareWithType string `json:"share_with_type"`
	ShareWithUuid string `json:"share_with_uuid"`
}

type _SharingOut SharingOut

// NewSharingOut instantiates a new SharingOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingOut(libraryId string, orgId string, role string, shareWithType string, shareWithUuid string) *SharingOut {
	this := SharingOut{}
	this.LibraryId = libraryId
	this.OrgId = orgId
	this.Role = role
	this.ShareWithType = shareWithType
	this.ShareWithUuid = shareWithUuid
	return &this
}

// NewSharingOutWithDefaults instantiates a new SharingOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingOutWithDefaults() *SharingOut {
	this := SharingOut{}
	return &this
}

// GetLibraryId returns the LibraryId field value
func (o *SharingOut) GetLibraryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LibraryId
}

// GetLibraryIdOk returns a tuple with the LibraryId field value
// and a boolean to check if the value has been set.
func (o *SharingOut) GetLibraryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LibraryId, true
}

// SetLibraryId sets field value
func (o *SharingOut) SetLibraryId(v string) {
	o.LibraryId = v
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SharingOut) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SharingOut) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *SharingOut) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *SharingOut) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *SharingOut) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *SharingOut) UnsetUserId() {
	o.UserId.Unset()
}

// GetOrgId returns the OrgId field value
func (o *SharingOut) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *SharingOut) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *SharingOut) SetOrgId(v string) {
	o.OrgId = v
}

// GetRole returns the Role field value
func (o *SharingOut) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *SharingOut) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *SharingOut) SetRole(v string) {
	o.Role = v
}

// GetShareWithType returns the ShareWithType field value
func (o *SharingOut) GetShareWithType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareWithType
}

// GetShareWithTypeOk returns a tuple with the ShareWithType field value
// and a boolean to check if the value has been set.
func (o *SharingOut) GetShareWithTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareWithType, true
}

// SetShareWithType sets field value
func (o *SharingOut) SetShareWithType(v string) {
	o.ShareWithType = v
}

// GetShareWithUuid returns the ShareWithUuid field value
func (o *SharingOut) GetShareWithUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareWithUuid
}

// GetShareWithUuidOk returns a tuple with the ShareWithUuid field value
// and a boolean to check if the value has been set.
func (o *SharingOut) GetShareWithUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareWithUuid, true
}

// SetShareWithUuid sets field value
func (o *SharingOut) SetShareWithUuid(v string) {
	o.ShareWithUuid = v
}

func (o SharingOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharingOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["library_id"] = o.LibraryId
	if o.UserId.IsSet() {
		toSerialize["user_id"] = o.UserId.Get()
	}
	toSerialize["org_id"] = o.OrgId
	toSerialize["role"] = o.Role
	toSerialize["share_with_type"] = o.ShareWithType
	toSerialize["share_with_uuid"] = o.ShareWithUuid
	return toSerialize, nil
}

func (o *SharingOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"library_id",
		"org_id",
		"role",
		"share_with_type",
		"share_with_uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharingOut := _SharingOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharingOut)

	if err != nil {
		return err
	}

	*o = SharingOut(varSharingOut)

	return err
}

type NullableSharingOut struct {
	value *SharingOut
	isSet bool
}

func (v NullableSharingOut) Get() *SharingOut {
	return v.value
}

func (v *NullableSharingOut) Set(val *SharingOut) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingOut) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingOut(val *SharingOut) *NullableSharingOut {
	return &NullableSharingOut{value: val, isSet: true}
}

func (v NullableSharingOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


