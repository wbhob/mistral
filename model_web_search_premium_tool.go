/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the WebSearchPremiumTool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebSearchPremiumTool{}

// WebSearchPremiumTool struct for WebSearchPremiumTool
type WebSearchPremiumTool struct {
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _WebSearchPremiumTool WebSearchPremiumTool

// NewWebSearchPremiumTool instantiates a new WebSearchPremiumTool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebSearchPremiumTool() *WebSearchPremiumTool {
	this := WebSearchPremiumTool{}
	var type_ string = "web_search_premium"
	this.Type = &type_
	return &this
}

// NewWebSearchPremiumToolWithDefaults instantiates a new WebSearchPremiumTool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebSearchPremiumToolWithDefaults() *WebSearchPremiumTool {
	this := WebSearchPremiumTool{}
	var type_ string = "web_search_premium"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WebSearchPremiumTool) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebSearchPremiumTool) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WebSearchPremiumTool) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WebSearchPremiumTool) SetType(v string) {
	o.Type = &v
}

func (o WebSearchPremiumTool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebSearchPremiumTool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *WebSearchPremiumTool) UnmarshalJSON(data []byte) (err error) {
	varWebSearchPremiumTool := _WebSearchPremiumTool{}

	err = json.Unmarshal(data, &varWebSearchPremiumTool)

	if err != nil {
		return err
	}

	*o = WebSearchPremiumTool(varWebSearchPremiumTool)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableWebSearchPremiumTool struct {
	value *WebSearchPremiumTool
	isSet bool
}

func (v NullableWebSearchPremiumTool) Get() *WebSearchPremiumTool {
	return v.value
}

func (v *NullableWebSearchPremiumTool) Set(val *WebSearchPremiumTool) {
	v.value = val
	v.isSet = true
}

func (v NullableWebSearchPremiumTool) IsSet() bool {
	return v.isSet
}

func (v *NullableWebSearchPremiumTool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebSearchPremiumTool(val *WebSearchPremiumTool) *NullableWebSearchPremiumTool {
	return &NullableWebSearchPremiumTool{value: val, isSet: true}
}

func (v NullableWebSearchPremiumTool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebSearchPremiumTool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


