/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the CompletionTrainingParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionTrainingParameters{}

// CompletionTrainingParameters struct for CompletionTrainingParameters
type CompletionTrainingParameters struct {
	TrainingSteps NullableInt32 `json:"training_steps,omitempty"`
	LearningRate *float32 `json:"learning_rate,omitempty"`
	WeightDecay NullableFloat32 `json:"weight_decay,omitempty"`
	WarmupFraction NullableFloat32 `json:"warmup_fraction,omitempty"`
	Epochs NullableFloat32 `json:"epochs,omitempty"`
	SeqLen NullableInt32 `json:"seq_len,omitempty"`
	FimRatio NullableFloat32 `json:"fim_ratio,omitempty"`
}

// NewCompletionTrainingParameters instantiates a new CompletionTrainingParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionTrainingParameters() *CompletionTrainingParameters {
	this := CompletionTrainingParameters{}
	var learningRate float32 = 1.0E-4
	this.LearningRate = &learningRate
	return &this
}

// NewCompletionTrainingParametersWithDefaults instantiates a new CompletionTrainingParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionTrainingParametersWithDefaults() *CompletionTrainingParameters {
	this := CompletionTrainingParameters{}
	var learningRate float32 = 1.0E-4
	this.LearningRate = &learningRate
	return &this
}

// GetTrainingSteps returns the TrainingSteps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionTrainingParameters) GetTrainingSteps() int32 {
	if o == nil || IsNil(o.TrainingSteps.Get()) {
		var ret int32
		return ret
	}
	return *o.TrainingSteps.Get()
}

// GetTrainingStepsOk returns a tuple with the TrainingSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionTrainingParameters) GetTrainingStepsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrainingSteps.Get(), o.TrainingSteps.IsSet()
}

// HasTrainingSteps returns a boolean if a field has been set.
func (o *CompletionTrainingParameters) HasTrainingSteps() bool {
	if o != nil && o.TrainingSteps.IsSet() {
		return true
	}

	return false
}

// SetTrainingSteps gets a reference to the given NullableInt32 and assigns it to the TrainingSteps field.
func (o *CompletionTrainingParameters) SetTrainingSteps(v int32) {
	o.TrainingSteps.Set(&v)
}
// SetTrainingStepsNil sets the value for TrainingSteps to be an explicit nil
func (o *CompletionTrainingParameters) SetTrainingStepsNil() {
	o.TrainingSteps.Set(nil)
}

// UnsetTrainingSteps ensures that no value is present for TrainingSteps, not even an explicit nil
func (o *CompletionTrainingParameters) UnsetTrainingSteps() {
	o.TrainingSteps.Unset()
}

// GetLearningRate returns the LearningRate field value if set, zero value otherwise.
func (o *CompletionTrainingParameters) GetLearningRate() float32 {
	if o == nil || IsNil(o.LearningRate) {
		var ret float32
		return ret
	}
	return *o.LearningRate
}

// GetLearningRateOk returns a tuple with the LearningRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionTrainingParameters) GetLearningRateOk() (*float32, bool) {
	if o == nil || IsNil(o.LearningRate) {
		return nil, false
	}
	return o.LearningRate, true
}

// HasLearningRate returns a boolean if a field has been set.
func (o *CompletionTrainingParameters) HasLearningRate() bool {
	if o != nil && !IsNil(o.LearningRate) {
		return true
	}

	return false
}

// SetLearningRate gets a reference to the given float32 and assigns it to the LearningRate field.
func (o *CompletionTrainingParameters) SetLearningRate(v float32) {
	o.LearningRate = &v
}

// GetWeightDecay returns the WeightDecay field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionTrainingParameters) GetWeightDecay() float32 {
	if o == nil || IsNil(o.WeightDecay.Get()) {
		var ret float32
		return ret
	}
	return *o.WeightDecay.Get()
}

// GetWeightDecayOk returns a tuple with the WeightDecay field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionTrainingParameters) GetWeightDecayOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeightDecay.Get(), o.WeightDecay.IsSet()
}

// HasWeightDecay returns a boolean if a field has been set.
func (o *CompletionTrainingParameters) HasWeightDecay() bool {
	if o != nil && o.WeightDecay.IsSet() {
		return true
	}

	return false
}

// SetWeightDecay gets a reference to the given NullableFloat32 and assigns it to the WeightDecay field.
func (o *CompletionTrainingParameters) SetWeightDecay(v float32) {
	o.WeightDecay.Set(&v)
}
// SetWeightDecayNil sets the value for WeightDecay to be an explicit nil
func (o *CompletionTrainingParameters) SetWeightDecayNil() {
	o.WeightDecay.Set(nil)
}

// UnsetWeightDecay ensures that no value is present for WeightDecay, not even an explicit nil
func (o *CompletionTrainingParameters) UnsetWeightDecay() {
	o.WeightDecay.Unset()
}

// GetWarmupFraction returns the WarmupFraction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionTrainingParameters) GetWarmupFraction() float32 {
	if o == nil || IsNil(o.WarmupFraction.Get()) {
		var ret float32
		return ret
	}
	return *o.WarmupFraction.Get()
}

// GetWarmupFractionOk returns a tuple with the WarmupFraction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionTrainingParameters) GetWarmupFractionOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WarmupFraction.Get(), o.WarmupFraction.IsSet()
}

// HasWarmupFraction returns a boolean if a field has been set.
func (o *CompletionTrainingParameters) HasWarmupFraction() bool {
	if o != nil && o.WarmupFraction.IsSet() {
		return true
	}

	return false
}

// SetWarmupFraction gets a reference to the given NullableFloat32 and assigns it to the WarmupFraction field.
func (o *CompletionTrainingParameters) SetWarmupFraction(v float32) {
	o.WarmupFraction.Set(&v)
}
// SetWarmupFractionNil sets the value for WarmupFraction to be an explicit nil
func (o *CompletionTrainingParameters) SetWarmupFractionNil() {
	o.WarmupFraction.Set(nil)
}

// UnsetWarmupFraction ensures that no value is present for WarmupFraction, not even an explicit nil
func (o *CompletionTrainingParameters) UnsetWarmupFraction() {
	o.WarmupFraction.Unset()
}

// GetEpochs returns the Epochs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionTrainingParameters) GetEpochs() float32 {
	if o == nil || IsNil(o.Epochs.Get()) {
		var ret float32
		return ret
	}
	return *o.Epochs.Get()
}

// GetEpochsOk returns a tuple with the Epochs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionTrainingParameters) GetEpochsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Epochs.Get(), o.Epochs.IsSet()
}

// HasEpochs returns a boolean if a field has been set.
func (o *CompletionTrainingParameters) HasEpochs() bool {
	if o != nil && o.Epochs.IsSet() {
		return true
	}

	return false
}

// SetEpochs gets a reference to the given NullableFloat32 and assigns it to the Epochs field.
func (o *CompletionTrainingParameters) SetEpochs(v float32) {
	o.Epochs.Set(&v)
}
// SetEpochsNil sets the value for Epochs to be an explicit nil
func (o *CompletionTrainingParameters) SetEpochsNil() {
	o.Epochs.Set(nil)
}

// UnsetEpochs ensures that no value is present for Epochs, not even an explicit nil
func (o *CompletionTrainingParameters) UnsetEpochs() {
	o.Epochs.Unset()
}

// GetSeqLen returns the SeqLen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionTrainingParameters) GetSeqLen() int32 {
	if o == nil || IsNil(o.SeqLen.Get()) {
		var ret int32
		return ret
	}
	return *o.SeqLen.Get()
}

// GetSeqLenOk returns a tuple with the SeqLen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionTrainingParameters) GetSeqLenOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeqLen.Get(), o.SeqLen.IsSet()
}

// HasSeqLen returns a boolean if a field has been set.
func (o *CompletionTrainingParameters) HasSeqLen() bool {
	if o != nil && o.SeqLen.IsSet() {
		return true
	}

	return false
}

// SetSeqLen gets a reference to the given NullableInt32 and assigns it to the SeqLen field.
func (o *CompletionTrainingParameters) SetSeqLen(v int32) {
	o.SeqLen.Set(&v)
}
// SetSeqLenNil sets the value for SeqLen to be an explicit nil
func (o *CompletionTrainingParameters) SetSeqLenNil() {
	o.SeqLen.Set(nil)
}

// UnsetSeqLen ensures that no value is present for SeqLen, not even an explicit nil
func (o *CompletionTrainingParameters) UnsetSeqLen() {
	o.SeqLen.Unset()
}

// GetFimRatio returns the FimRatio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CompletionTrainingParameters) GetFimRatio() float32 {
	if o == nil || IsNil(o.FimRatio.Get()) {
		var ret float32
		return ret
	}
	return *o.FimRatio.Get()
}

// GetFimRatioOk returns a tuple with the FimRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionTrainingParameters) GetFimRatioOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FimRatio.Get(), o.FimRatio.IsSet()
}

// HasFimRatio returns a boolean if a field has been set.
func (o *CompletionTrainingParameters) HasFimRatio() bool {
	if o != nil && o.FimRatio.IsSet() {
		return true
	}

	return false
}

// SetFimRatio gets a reference to the given NullableFloat32 and assigns it to the FimRatio field.
func (o *CompletionTrainingParameters) SetFimRatio(v float32) {
	o.FimRatio.Set(&v)
}
// SetFimRatioNil sets the value for FimRatio to be an explicit nil
func (o *CompletionTrainingParameters) SetFimRatioNil() {
	o.FimRatio.Set(nil)
}

// UnsetFimRatio ensures that no value is present for FimRatio, not even an explicit nil
func (o *CompletionTrainingParameters) UnsetFimRatio() {
	o.FimRatio.Unset()
}

func (o CompletionTrainingParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionTrainingParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TrainingSteps.IsSet() {
		toSerialize["training_steps"] = o.TrainingSteps.Get()
	}
	if !IsNil(o.LearningRate) {
		toSerialize["learning_rate"] = o.LearningRate
	}
	if o.WeightDecay.IsSet() {
		toSerialize["weight_decay"] = o.WeightDecay.Get()
	}
	if o.WarmupFraction.IsSet() {
		toSerialize["warmup_fraction"] = o.WarmupFraction.Get()
	}
	if o.Epochs.IsSet() {
		toSerialize["epochs"] = o.Epochs.Get()
	}
	if o.SeqLen.IsSet() {
		toSerialize["seq_len"] = o.SeqLen.Get()
	}
	if o.FimRatio.IsSet() {
		toSerialize["fim_ratio"] = o.FimRatio.Get()
	}
	return toSerialize, nil
}

type NullableCompletionTrainingParameters struct {
	value *CompletionTrainingParameters
	isSet bool
}

func (v NullableCompletionTrainingParameters) Get() *CompletionTrainingParameters {
	return v.value
}

func (v *NullableCompletionTrainingParameters) Set(val *CompletionTrainingParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionTrainingParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionTrainingParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionTrainingParameters(val *CompletionTrainingParameters) *NullableCompletionTrainingParameters {
	return &NullableCompletionTrainingParameters{value: val, isSet: true}
}

func (v NullableCompletionTrainingParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionTrainingParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


