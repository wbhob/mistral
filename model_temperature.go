/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// Temperature What sampling temperature to use, we recommend between 0.0 and 0.7. Higher values like 0.7 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. We generally recommend altering this or `top_p` but not both. The default value varies depending on the model you are targeting. Call the `/models` endpoint to retrieve the appropriate value.
type Temperature struct {
	Float32 *float32
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Temperature) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	// try to unmarshal JSON data into Float32
	err = json.Unmarshal(data, &dst.Float32);
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			return nil // data stored in dst.Float32, return on the first match
		}
	} else {
		dst.Float32 = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Temperature)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Temperature) MarshalJSON() ([]byte, error) {
	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableTemperature struct {
	value *Temperature
	isSet bool
}

func (v NullableTemperature) Get() *Temperature {
	return v.value
}

func (v *NullableTemperature) Set(val *Temperature) {
	v.value = val
	v.isSet = true
}

func (v NullableTemperature) IsSet() bool {
	return v.isSet
}

func (v *NullableTemperature) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTemperature(val *Temperature) *NullableTemperature {
	return &NullableTemperature{value: val, isSet: true}
}

func (v NullableTemperature) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTemperature) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


