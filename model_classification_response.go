/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the ClassificationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClassificationResponse{}

// ClassificationResponse struct for ClassificationResponse
type ClassificationResponse struct {
	Id *string `json:"id,omitempty"`
	Model *string `json:"model,omitempty"`
	Results []interface{} `json:"results,omitempty"`
}

// NewClassificationResponse instantiates a new ClassificationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClassificationResponse() *ClassificationResponse {
	this := ClassificationResponse{}
	return &this
}

// NewClassificationResponseWithDefaults instantiates a new ClassificationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClassificationResponseWithDefaults() *ClassificationResponse {
	this := ClassificationResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ClassificationResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassificationResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ClassificationResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ClassificationResponse) SetId(v string) {
	o.Id = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *ClassificationResponse) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassificationResponse) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *ClassificationResponse) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *ClassificationResponse) SetModel(v string) {
	o.Model = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *ClassificationResponse) GetResults() []interface{} {
	if o == nil || IsNil(o.Results) {
		var ret []interface{}
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClassificationResponse) GetResultsOk() ([]interface{}, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *ClassificationResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []interface{} and assigns it to the Results field.
func (o *ClassificationResponse) SetResults(v []interface{}) {
	o.Results = v
}

func (o ClassificationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClassificationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableClassificationResponse struct {
	value *ClassificationResponse
	isSet bool
}

func (v NullableClassificationResponse) Get() *ClassificationResponse {
	return v.value
}

func (v *NullableClassificationResponse) Set(val *ClassificationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableClassificationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableClassificationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClassificationResponse(val *ClassificationResponse) *NullableClassificationResponse {
	return &NullableClassificationResponse{value: val, isSet: true}
}

func (v NullableClassificationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClassificationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


