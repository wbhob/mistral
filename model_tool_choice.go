/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// ToolChoice struct for ToolChoice
type ToolChoice struct {
	ToolChoice *ToolChoice
	ToolChoiceEnum *ToolChoiceEnum
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *ToolChoice) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ToolChoice
	err = json.Unmarshal(data, &dst.ToolChoice);
	if err == nil {
		jsonToolChoice, _ := json.Marshal(dst.ToolChoice)
		if string(jsonToolChoice) == "{}" { // empty struct
			dst.ToolChoice = nil
		} else {
			return nil // data stored in dst.ToolChoice, return on the first match
		}
	} else {
		dst.ToolChoice = nil
	}

	// try to unmarshal JSON data into ToolChoiceEnum
	err = json.Unmarshal(data, &dst.ToolChoiceEnum);
	if err == nil {
		jsonToolChoiceEnum, _ := json.Marshal(dst.ToolChoiceEnum)
		if string(jsonToolChoiceEnum) == "{}" { // empty struct
			dst.ToolChoiceEnum = nil
		} else {
			return nil // data stored in dst.ToolChoiceEnum, return on the first match
		}
	} else {
		dst.ToolChoiceEnum = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(ToolChoice)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ToolChoice) MarshalJSON() ([]byte, error) {
	if src.ToolChoice != nil {
		return json.Marshal(&src.ToolChoice)
	}

	if src.ToolChoiceEnum != nil {
		return json.Marshal(&src.ToolChoiceEnum)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableToolChoice struct {
	value *ToolChoice
	isSet bool
}

func (v NullableToolChoice) Get() *ToolChoice {
	return v.value
}

func (v *NullableToolChoice) Set(val *ToolChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableToolChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableToolChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolChoice(val *ToolChoice) *NullableToolChoice {
	return &NullableToolChoice{value: val, isSet: true}
}

func (v NullableToolChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


