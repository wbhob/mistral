/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JobsOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobsOut{}

// JobsOut struct for JobsOut
type JobsOut struct {
	Data []JobOut `json:"data,omitempty"`
	Object *string `json:"object,omitempty"`
	Total int32 `json:"total"`
}

type _JobsOut JobsOut

// NewJobsOut instantiates a new JobsOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobsOut(total int32) *JobsOut {
	this := JobsOut{}
	var object string = "list"
	this.Object = &object
	this.Total = total
	return &this
}

// NewJobsOutWithDefaults instantiates a new JobsOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobsOutWithDefaults() *JobsOut {
	this := JobsOut{}
	var object string = "list"
	this.Object = &object
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *JobsOut) GetData() []JobOut {
	if o == nil || IsNil(o.Data) {
		var ret []JobOut
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsOut) GetDataOk() ([]JobOut, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *JobsOut) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []JobOut and assigns it to the Data field.
func (o *JobsOut) SetData(v []JobOut) {
	o.Data = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *JobsOut) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobsOut) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *JobsOut) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *JobsOut) SetObject(v string) {
	o.Object = &v
}

// GetTotal returns the Total field value
func (o *JobsOut) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *JobsOut) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *JobsOut) SetTotal(v int32) {
	o.Total = v
}

func (o JobsOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobsOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *JobsOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobsOut := _JobsOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobsOut)

	if err != nil {
		return err
	}

	*o = JobsOut(varJobsOut)

	return err
}

type NullableJobsOut struct {
	value *JobsOut
	isSet bool
}

func (v NullableJobsOut) Get() *JobsOut {
	return v.value
}

func (v *NullableJobsOut) Set(val *JobsOut) {
	v.value = val
	v.isSet = true
}

func (v NullableJobsOut) IsSet() bool {
	return v.isSet
}

func (v *NullableJobsOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobsOut(val *JobsOut) *NullableJobsOut {
	return &NullableJobsOut{value: val, isSet: true}
}

func (v NullableJobsOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobsOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


