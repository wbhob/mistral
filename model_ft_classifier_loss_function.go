/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// FTClassifierLossFunction the model 'FTClassifierLossFunction'
type FTClassifierLossFunction string

// List of FTClassifierLossFunction
const (
	FTCLASSIFIERLOSSFUNCTION_SINGLE_CLASS FTClassifierLossFunction = "single_class"
	FTCLASSIFIERLOSSFUNCTION_MULTI_CLASS FTClassifierLossFunction = "multi_class"
)

// All allowed values of FTClassifierLossFunction enum
var AllowedFTClassifierLossFunctionEnumValues = []FTClassifierLossFunction{
	"single_class",
	"multi_class",
}

func (v *FTClassifierLossFunction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FTClassifierLossFunction(value)
	for _, existing := range AllowedFTClassifierLossFunctionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FTClassifierLossFunction", value)
}

// NewFTClassifierLossFunctionFromValue returns a pointer to a valid FTClassifierLossFunction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFTClassifierLossFunctionFromValue(v string) (*FTClassifierLossFunction, error) {
	ev := FTClassifierLossFunction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FTClassifierLossFunction: valid values are %v", v, AllowedFTClassifierLossFunctionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FTClassifierLossFunction) IsValid() bool {
	for _, existing := range AllowedFTClassifierLossFunctionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FTClassifierLossFunction value
func (v FTClassifierLossFunction) Ptr() *FTClassifierLossFunction {
	return &v
}

type NullableFTClassifierLossFunction struct {
	value *FTClassifierLossFunction
	isSet bool
}

func (v NullableFTClassifierLossFunction) Get() *FTClassifierLossFunction {
	return v.value
}

func (v *NullableFTClassifierLossFunction) Set(val *FTClassifierLossFunction) {
	v.value = val
	v.isSet = true
}

func (v NullableFTClassifierLossFunction) IsSet() bool {
	return v.isSet
}

func (v *NullableFTClassifierLossFunction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFTClassifierLossFunction(val *FTClassifierLossFunction) *NullableFTClassifierLossFunction {
	return &NullableFTClassifierLossFunction{value: val, isSet: true}
}

func (v NullableFTClassifierLossFunction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFTClassifierLossFunction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

