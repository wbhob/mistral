/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the OCRRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OCRRequest{}

// OCRRequest struct for OCRRequest
type OCRRequest struct {
	Model NullableString `json:"model"`
	Id *string `json:"id,omitempty"`
	Document Document `json:"document"`
	Pages []int32 `json:"pages,omitempty"`
	IncludeImageBase64 NullableBool `json:"include_image_base64,omitempty"`
	ImageLimit NullableInt32 `json:"image_limit,omitempty"`
	ImageMinSize NullableInt32 `json:"image_min_size,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OCRRequest OCRRequest

// NewOCRRequest instantiates a new OCRRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCRRequest(model NullableString, document Document) *OCRRequest {
	this := OCRRequest{}
	this.Model = model
	this.Document = document
	return &this
}

// NewOCRRequestWithDefaults instantiates a new OCRRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCRRequestWithDefaults() *OCRRequest {
	this := OCRRequest{}
	return &this
}

// GetModel returns the Model field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OCRRequest) GetModel() string {
	if o == nil || o.Model.Get() == nil {
		var ret string
		return ret
	}

	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OCRRequest) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// SetModel sets field value
func (o *OCRRequest) SetModel(v string) {
	o.Model.Set(&v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *OCRRequest) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OCRRequest) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *OCRRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *OCRRequest) SetId(v string) {
	o.Id = &v
}

// GetDocument returns the Document field value
func (o *OCRRequest) GetDocument() Document {
	if o == nil {
		var ret Document
		return ret
	}

	return o.Document
}

// GetDocumentOk returns a tuple with the Document field value
// and a boolean to check if the value has been set.
func (o *OCRRequest) GetDocumentOk() (*Document, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Document, true
}

// SetDocument sets field value
func (o *OCRRequest) SetDocument(v Document) {
	o.Document = v
}

// GetPages returns the Pages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OCRRequest) GetPages() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Pages
}

// GetPagesOk returns a tuple with the Pages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OCRRequest) GetPagesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Pages) {
		return nil, false
	}
	return o.Pages, true
}

// HasPages returns a boolean if a field has been set.
func (o *OCRRequest) HasPages() bool {
	if o != nil && !IsNil(o.Pages) {
		return true
	}

	return false
}

// SetPages gets a reference to the given []int32 and assigns it to the Pages field.
func (o *OCRRequest) SetPages(v []int32) {
	o.Pages = v
}

// GetIncludeImageBase64 returns the IncludeImageBase64 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OCRRequest) GetIncludeImageBase64() bool {
	if o == nil || IsNil(o.IncludeImageBase64.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeImageBase64.Get()
}

// GetIncludeImageBase64Ok returns a tuple with the IncludeImageBase64 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OCRRequest) GetIncludeImageBase64Ok() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeImageBase64.Get(), o.IncludeImageBase64.IsSet()
}

// HasIncludeImageBase64 returns a boolean if a field has been set.
func (o *OCRRequest) HasIncludeImageBase64() bool {
	if o != nil && o.IncludeImageBase64.IsSet() {
		return true
	}

	return false
}

// SetIncludeImageBase64 gets a reference to the given NullableBool and assigns it to the IncludeImageBase64 field.
func (o *OCRRequest) SetIncludeImageBase64(v bool) {
	o.IncludeImageBase64.Set(&v)
}
// SetIncludeImageBase64Nil sets the value for IncludeImageBase64 to be an explicit nil
func (o *OCRRequest) SetIncludeImageBase64Nil() {
	o.IncludeImageBase64.Set(nil)
}

// UnsetIncludeImageBase64 ensures that no value is present for IncludeImageBase64, not even an explicit nil
func (o *OCRRequest) UnsetIncludeImageBase64() {
	o.IncludeImageBase64.Unset()
}

// GetImageLimit returns the ImageLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OCRRequest) GetImageLimit() int32 {
	if o == nil || IsNil(o.ImageLimit.Get()) {
		var ret int32
		return ret
	}
	return *o.ImageLimit.Get()
}

// GetImageLimitOk returns a tuple with the ImageLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OCRRequest) GetImageLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageLimit.Get(), o.ImageLimit.IsSet()
}

// HasImageLimit returns a boolean if a field has been set.
func (o *OCRRequest) HasImageLimit() bool {
	if o != nil && o.ImageLimit.IsSet() {
		return true
	}

	return false
}

// SetImageLimit gets a reference to the given NullableInt32 and assigns it to the ImageLimit field.
func (o *OCRRequest) SetImageLimit(v int32) {
	o.ImageLimit.Set(&v)
}
// SetImageLimitNil sets the value for ImageLimit to be an explicit nil
func (o *OCRRequest) SetImageLimitNil() {
	o.ImageLimit.Set(nil)
}

// UnsetImageLimit ensures that no value is present for ImageLimit, not even an explicit nil
func (o *OCRRequest) UnsetImageLimit() {
	o.ImageLimit.Unset()
}

// GetImageMinSize returns the ImageMinSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OCRRequest) GetImageMinSize() int32 {
	if o == nil || IsNil(o.ImageMinSize.Get()) {
		var ret int32
		return ret
	}
	return *o.ImageMinSize.Get()
}

// GetImageMinSizeOk returns a tuple with the ImageMinSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OCRRequest) GetImageMinSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImageMinSize.Get(), o.ImageMinSize.IsSet()
}

// HasImageMinSize returns a boolean if a field has been set.
func (o *OCRRequest) HasImageMinSize() bool {
	if o != nil && o.ImageMinSize.IsSet() {
		return true
	}

	return false
}

// SetImageMinSize gets a reference to the given NullableInt32 and assigns it to the ImageMinSize field.
func (o *OCRRequest) SetImageMinSize(v int32) {
	o.ImageMinSize.Set(&v)
}
// SetImageMinSizeNil sets the value for ImageMinSize to be an explicit nil
func (o *OCRRequest) SetImageMinSizeNil() {
	o.ImageMinSize.Set(nil)
}

// UnsetImageMinSize ensures that no value is present for ImageMinSize, not even an explicit nil
func (o *OCRRequest) UnsetImageMinSize() {
	o.ImageMinSize.Unset()
}

func (o OCRRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OCRRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model.Get()
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["document"] = o.Document
	if o.Pages != nil {
		toSerialize["pages"] = o.Pages
	}
	if o.IncludeImageBase64.IsSet() {
		toSerialize["include_image_base64"] = o.IncludeImageBase64.Get()
	}
	if o.ImageLimit.IsSet() {
		toSerialize["image_limit"] = o.ImageLimit.Get()
	}
	if o.ImageMinSize.IsSet() {
		toSerialize["image_min_size"] = o.ImageMinSize.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OCRRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"document",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOCRRequest := _OCRRequest{}

	err = json.Unmarshal(data, &varOCRRequest)

	if err != nil {
		return err
	}

	*o = OCRRequest(varOCRRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "model")
		delete(additionalProperties, "id")
		delete(additionalProperties, "document")
		delete(additionalProperties, "pages")
		delete(additionalProperties, "include_image_base64")
		delete(additionalProperties, "image_limit")
		delete(additionalProperties, "image_min_size")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOCRRequest struct {
	value *OCRRequest
	isSet bool
}

func (v NullableOCRRequest) Get() *OCRRequest {
	return v.value
}

func (v *NullableOCRRequest) Set(val *OCRRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOCRRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOCRRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCRRequest(val *OCRRequest) *NullableOCRRequest {
	return &NullableOCRRequest{value: val, isSet: true}
}

func (v NullableOCRRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCRRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


