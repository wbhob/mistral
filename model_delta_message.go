/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the DeltaMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeltaMessage{}

// DeltaMessage struct for DeltaMessage
type DeltaMessage struct {
	Role NullableString `json:"role,omitempty"`
	Content NullableDeltaMessageContent `json:"content,omitempty"`
	ToolCalls []ToolCall `json:"tool_calls,omitempty"`
}

// NewDeltaMessage instantiates a new DeltaMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeltaMessage() *DeltaMessage {
	this := DeltaMessage{}
	return &this
}

// NewDeltaMessageWithDefaults instantiates a new DeltaMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeltaMessageWithDefaults() *DeltaMessage {
	this := DeltaMessage{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeltaMessage) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeltaMessage) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *DeltaMessage) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *DeltaMessage) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *DeltaMessage) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *DeltaMessage) UnsetRole() {
	o.Role.Unset()
}

// GetContent returns the Content field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeltaMessage) GetContent() DeltaMessageContent {
	if o == nil || IsNil(o.Content.Get()) {
		var ret DeltaMessageContent
		return ret
	}
	return *o.Content.Get()
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeltaMessage) GetContentOk() (*DeltaMessageContent, bool) {
	if o == nil {
		return nil, false
	}
	return o.Content.Get(), o.Content.IsSet()
}

// HasContent returns a boolean if a field has been set.
func (o *DeltaMessage) HasContent() bool {
	if o != nil && o.Content.IsSet() {
		return true
	}

	return false
}

// SetContent gets a reference to the given NullableDeltaMessageContent and assigns it to the Content field.
func (o *DeltaMessage) SetContent(v DeltaMessageContent) {
	o.Content.Set(&v)
}
// SetContentNil sets the value for Content to be an explicit nil
func (o *DeltaMessage) SetContentNil() {
	o.Content.Set(nil)
}

// UnsetContent ensures that no value is present for Content, not even an explicit nil
func (o *DeltaMessage) UnsetContent() {
	o.Content.Unset()
}

// GetToolCalls returns the ToolCalls field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeltaMessage) GetToolCalls() []ToolCall {
	if o == nil {
		var ret []ToolCall
		return ret
	}
	return o.ToolCalls
}

// GetToolCallsOk returns a tuple with the ToolCalls field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeltaMessage) GetToolCallsOk() ([]ToolCall, bool) {
	if o == nil || IsNil(o.ToolCalls) {
		return nil, false
	}
	return o.ToolCalls, true
}

// HasToolCalls returns a boolean if a field has been set.
func (o *DeltaMessage) HasToolCalls() bool {
	if o != nil && !IsNil(o.ToolCalls) {
		return true
	}

	return false
}

// SetToolCalls gets a reference to the given []ToolCall and assigns it to the ToolCalls field.
func (o *DeltaMessage) SetToolCalls(v []ToolCall) {
	o.ToolCalls = v
}

func (o DeltaMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeltaMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.Content.IsSet() {
		toSerialize["content"] = o.Content.Get()
	}
	if o.ToolCalls != nil {
		toSerialize["tool_calls"] = o.ToolCalls
	}
	return toSerialize, nil
}

type NullableDeltaMessage struct {
	value *DeltaMessage
	isSet bool
}

func (v NullableDeltaMessage) Get() *DeltaMessage {
	return v.value
}

func (v *NullableDeltaMessage) Set(val *DeltaMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableDeltaMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableDeltaMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeltaMessage(val *DeltaMessage) *NullableDeltaMessage {
	return &NullableDeltaMessage{value: val, isSet: true}
}

func (v NullableDeltaMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeltaMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


