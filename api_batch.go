/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
	"reflect"
)


type BatchAPI interface {

	/*
	JobsApiRoutesBatchCancelBatchJob Cancel Batch Job

	Request the cancellation of a batch job.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId
	@return ApiJobsApiRoutesBatchCancelBatchJobRequest
	*/
	JobsApiRoutesBatchCancelBatchJob(ctx context.Context, jobId string) ApiJobsApiRoutesBatchCancelBatchJobRequest

	// JobsApiRoutesBatchCancelBatchJobExecute executes the request
	//  @return BatchJobOut
	JobsApiRoutesBatchCancelBatchJobExecute(r ApiJobsApiRoutesBatchCancelBatchJobRequest) (*BatchJobOut, *http.Response, error)

	/*
	JobsApiRoutesBatchCreateBatchJob Create Batch Job

	Create a new batch job, it will be queued for processing.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJobsApiRoutesBatchCreateBatchJobRequest
	*/
	JobsApiRoutesBatchCreateBatchJob(ctx context.Context) ApiJobsApiRoutesBatchCreateBatchJobRequest

	// JobsApiRoutesBatchCreateBatchJobExecute executes the request
	//  @return BatchJobOut
	JobsApiRoutesBatchCreateBatchJobExecute(r ApiJobsApiRoutesBatchCreateBatchJobRequest) (*BatchJobOut, *http.Response, error)

	/*
	JobsApiRoutesBatchGetBatchJob Get Batch Job

	Get a batch job details by its UUID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId
	@return ApiJobsApiRoutesBatchGetBatchJobRequest
	*/
	JobsApiRoutesBatchGetBatchJob(ctx context.Context, jobId string) ApiJobsApiRoutesBatchGetBatchJobRequest

	// JobsApiRoutesBatchGetBatchJobExecute executes the request
	//  @return BatchJobOut
	JobsApiRoutesBatchGetBatchJobExecute(r ApiJobsApiRoutesBatchGetBatchJobRequest) (*BatchJobOut, *http.Response, error)

	/*
	JobsApiRoutesBatchGetBatchJobs Get Batch Jobs

	Get a list of batch jobs for your organization and user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJobsApiRoutesBatchGetBatchJobsRequest
	*/
	JobsApiRoutesBatchGetBatchJobs(ctx context.Context) ApiJobsApiRoutesBatchGetBatchJobsRequest

	// JobsApiRoutesBatchGetBatchJobsExecute executes the request
	//  @return BatchJobsOut
	JobsApiRoutesBatchGetBatchJobsExecute(r ApiJobsApiRoutesBatchGetBatchJobsRequest) (*BatchJobsOut, *http.Response, error)
}

// BatchAPIService BatchAPI service
type BatchAPIService service

type ApiJobsApiRoutesBatchCancelBatchJobRequest struct {
	ctx context.Context
	ApiService BatchAPI
	jobId string
}

func (r ApiJobsApiRoutesBatchCancelBatchJobRequest) Execute() (*BatchJobOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesBatchCancelBatchJobExecute(r)
}

/*
JobsApiRoutesBatchCancelBatchJob Cancel Batch Job

Request the cancellation of a batch job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiJobsApiRoutesBatchCancelBatchJobRequest
*/
func (a *BatchAPIService) JobsApiRoutesBatchCancelBatchJob(ctx context.Context, jobId string) ApiJobsApiRoutesBatchCancelBatchJobRequest {
	return ApiJobsApiRoutesBatchCancelBatchJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return BatchJobOut
func (a *BatchAPIService) JobsApiRoutesBatchCancelBatchJobExecute(r ApiJobsApiRoutesBatchCancelBatchJobRequest) (*BatchJobOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchJobOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.JobsApiRoutesBatchCancelBatchJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/batch/jobs/{job_id}/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesBatchCreateBatchJobRequest struct {
	ctx context.Context
	ApiService BatchAPI
	batchJobIn *BatchJobIn
}

func (r ApiJobsApiRoutesBatchCreateBatchJobRequest) BatchJobIn(batchJobIn BatchJobIn) ApiJobsApiRoutesBatchCreateBatchJobRequest {
	r.batchJobIn = &batchJobIn
	return r
}

func (r ApiJobsApiRoutesBatchCreateBatchJobRequest) Execute() (*BatchJobOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesBatchCreateBatchJobExecute(r)
}

/*
JobsApiRoutesBatchCreateBatchJob Create Batch Job

Create a new batch job, it will be queued for processing.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJobsApiRoutesBatchCreateBatchJobRequest
*/
func (a *BatchAPIService) JobsApiRoutesBatchCreateBatchJob(ctx context.Context) ApiJobsApiRoutesBatchCreateBatchJobRequest {
	return ApiJobsApiRoutesBatchCreateBatchJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchJobOut
func (a *BatchAPIService) JobsApiRoutesBatchCreateBatchJobExecute(r ApiJobsApiRoutesBatchCreateBatchJobRequest) (*BatchJobOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchJobOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.JobsApiRoutesBatchCreateBatchJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/batch/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.batchJobIn == nil {
		return localVarReturnValue, nil, reportError("batchJobIn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.batchJobIn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesBatchGetBatchJobRequest struct {
	ctx context.Context
	ApiService BatchAPI
	jobId string
}

func (r ApiJobsApiRoutesBatchGetBatchJobRequest) Execute() (*BatchJobOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesBatchGetBatchJobExecute(r)
}

/*
JobsApiRoutesBatchGetBatchJob Get Batch Job

Get a batch job details by its UUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiJobsApiRoutesBatchGetBatchJobRequest
*/
func (a *BatchAPIService) JobsApiRoutesBatchGetBatchJob(ctx context.Context, jobId string) ApiJobsApiRoutesBatchGetBatchJobRequest {
	return ApiJobsApiRoutesBatchGetBatchJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return BatchJobOut
func (a *BatchAPIService) JobsApiRoutesBatchGetBatchJobExecute(r ApiJobsApiRoutesBatchGetBatchJobRequest) (*BatchJobOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchJobOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.JobsApiRoutesBatchGetBatchJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/batch/jobs/{job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesBatchGetBatchJobsRequest struct {
	ctx context.Context
	ApiService BatchAPI
	page *int32
	pageSize *int32
	model *string
	metadata *map[string]interface{}
	createdAfter *time.Time
	createdByMe *bool
	status *[]BatchJobStatus
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) Page(page int32) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	r.page = &page
	return r
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) PageSize(pageSize int32) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) Model(model string) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	r.model = &model
	return r
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) Metadata(metadata map[string]interface{}) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	r.metadata = &metadata
	return r
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) CreatedAfter(createdAfter time.Time) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	r.createdAfter = &createdAfter
	return r
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) CreatedByMe(createdByMe bool) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	r.createdByMe = &createdByMe
	return r
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) Status(status []BatchJobStatus) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	r.status = &status
	return r
}

func (r ApiJobsApiRoutesBatchGetBatchJobsRequest) Execute() (*BatchJobsOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesBatchGetBatchJobsExecute(r)
}

/*
JobsApiRoutesBatchGetBatchJobs Get Batch Jobs

Get a list of batch jobs for your organization and user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJobsApiRoutesBatchGetBatchJobsRequest
*/
func (a *BatchAPIService) JobsApiRoutesBatchGetBatchJobs(ctx context.Context) ApiJobsApiRoutesBatchGetBatchJobsRequest {
	return ApiJobsApiRoutesBatchGetBatchJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return BatchJobsOut
func (a *BatchAPIService) JobsApiRoutesBatchGetBatchJobsExecute(r ApiJobsApiRoutesBatchGetBatchJobsRequest) (*BatchJobsOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BatchJobsOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BatchAPIService.JobsApiRoutesBatchGetBatchJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/batch/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "form", "")
	}
	if r.metadata != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "metadata", r.metadata, "form", "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_after", r.createdAfter, "form", "")
	}
	if r.createdByMe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_me", r.createdByMe, "form", "")
	} else {
		var defaultValue bool = false
		r.createdByMe = &defaultValue
	}
	if r.status != nil {
		t := *r.status
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "status", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "status", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
