/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the OCRPageDimensions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OCRPageDimensions{}

// OCRPageDimensions struct for OCRPageDimensions
type OCRPageDimensions struct {
	// Dots per inch of the page-image
	Dpi int32 `json:"dpi"`
	// Height of the image in pixels
	Height int32 `json:"height"`
	// Width of the image in pixels
	Width int32 `json:"width"`
	AdditionalProperties map[string]interface{}
}

type _OCRPageDimensions OCRPageDimensions

// NewOCRPageDimensions instantiates a new OCRPageDimensions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOCRPageDimensions(dpi int32, height int32, width int32) *OCRPageDimensions {
	this := OCRPageDimensions{}
	this.Dpi = dpi
	this.Height = height
	this.Width = width
	return &this
}

// NewOCRPageDimensionsWithDefaults instantiates a new OCRPageDimensions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOCRPageDimensionsWithDefaults() *OCRPageDimensions {
	this := OCRPageDimensions{}
	return &this
}

// GetDpi returns the Dpi field value
func (o *OCRPageDimensions) GetDpi() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Dpi
}

// GetDpiOk returns a tuple with the Dpi field value
// and a boolean to check if the value has been set.
func (o *OCRPageDimensions) GetDpiOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dpi, true
}

// SetDpi sets field value
func (o *OCRPageDimensions) SetDpi(v int32) {
	o.Dpi = v
}

// GetHeight returns the Height field value
func (o *OCRPageDimensions) GetHeight() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Height
}

// GetHeightOk returns a tuple with the Height field value
// and a boolean to check if the value has been set.
func (o *OCRPageDimensions) GetHeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Height, true
}

// SetHeight sets field value
func (o *OCRPageDimensions) SetHeight(v int32) {
	o.Height = v
}

// GetWidth returns the Width field value
func (o *OCRPageDimensions) GetWidth() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Width
}

// GetWidthOk returns a tuple with the Width field value
// and a boolean to check if the value has been set.
func (o *OCRPageDimensions) GetWidthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Width, true
}

// SetWidth sets field value
func (o *OCRPageDimensions) SetWidth(v int32) {
	o.Width = v
}

func (o OCRPageDimensions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OCRPageDimensions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dpi"] = o.Dpi
	toSerialize["height"] = o.Height
	toSerialize["width"] = o.Width

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OCRPageDimensions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dpi",
		"height",
		"width",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOCRPageDimensions := _OCRPageDimensions{}

	err = json.Unmarshal(data, &varOCRPageDimensions)

	if err != nil {
		return err
	}

	*o = OCRPageDimensions(varOCRPageDimensions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dpi")
		delete(additionalProperties, "height")
		delete(additionalProperties, "width")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOCRPageDimensions struct {
	value *OCRPageDimensions
	isSet bool
}

func (v NullableOCRPageDimensions) Get() *OCRPageDimensions {
	return v.value
}

func (v *NullableOCRPageDimensions) Set(val *OCRPageDimensions) {
	v.value = val
	v.isSet = true
}

func (v NullableOCRPageDimensions) IsSet() bool {
	return v.isSet
}

func (v *NullableOCRPageDimensions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOCRPageDimensions(val *OCRPageDimensions) *NullableOCRPageDimensions {
	return &NullableOCRPageDimensions{value: val, isSet: true}
}

func (v NullableOCRPageDimensions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOCRPageDimensions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


