/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompletionResponseStreamChoice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionResponseStreamChoice{}

// CompletionResponseStreamChoice struct for CompletionResponseStreamChoice
type CompletionResponseStreamChoice struct {
	Index int32 `json:"index"`
	Delta DeltaMessage `json:"delta"`
	FinishReason NullableString `json:"finish_reason"`
}

type _CompletionResponseStreamChoice CompletionResponseStreamChoice

// NewCompletionResponseStreamChoice instantiates a new CompletionResponseStreamChoice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionResponseStreamChoice(index int32, delta DeltaMessage, finishReason NullableString) *CompletionResponseStreamChoice {
	this := CompletionResponseStreamChoice{}
	this.Index = index
	this.Delta = delta
	this.FinishReason = finishReason
	return &this
}

// NewCompletionResponseStreamChoiceWithDefaults instantiates a new CompletionResponseStreamChoice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionResponseStreamChoiceWithDefaults() *CompletionResponseStreamChoice {
	this := CompletionResponseStreamChoice{}
	return &this
}

// GetIndex returns the Index field value
func (o *CompletionResponseStreamChoice) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *CompletionResponseStreamChoice) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *CompletionResponseStreamChoice) SetIndex(v int32) {
	o.Index = v
}

// GetDelta returns the Delta field value
func (o *CompletionResponseStreamChoice) GetDelta() DeltaMessage {
	if o == nil {
		var ret DeltaMessage
		return ret
	}

	return o.Delta
}

// GetDeltaOk returns a tuple with the Delta field value
// and a boolean to check if the value has been set.
func (o *CompletionResponseStreamChoice) GetDeltaOk() (*DeltaMessage, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delta, true
}

// SetDelta sets field value
func (o *CompletionResponseStreamChoice) SetDelta(v DeltaMessage) {
	o.Delta = v
}

// GetFinishReason returns the FinishReason field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CompletionResponseStreamChoice) GetFinishReason() string {
	if o == nil || o.FinishReason.Get() == nil {
		var ret string
		return ret
	}

	return *o.FinishReason.Get()
}

// GetFinishReasonOk returns a tuple with the FinishReason field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CompletionResponseStreamChoice) GetFinishReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishReason.Get(), o.FinishReason.IsSet()
}

// SetFinishReason sets field value
func (o *CompletionResponseStreamChoice) SetFinishReason(v string) {
	o.FinishReason.Set(&v)
}

func (o CompletionResponseStreamChoice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionResponseStreamChoice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["index"] = o.Index
	toSerialize["delta"] = o.Delta
	toSerialize["finish_reason"] = o.FinishReason.Get()
	return toSerialize, nil
}

func (o *CompletionResponseStreamChoice) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"index",
		"delta",
		"finish_reason",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletionResponseStreamChoice := _CompletionResponseStreamChoice{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompletionResponseStreamChoice)

	if err != nil {
		return err
	}

	*o = CompletionResponseStreamChoice(varCompletionResponseStreamChoice)

	return err
}

type NullableCompletionResponseStreamChoice struct {
	value *CompletionResponseStreamChoice
	isSet bool
}

func (v NullableCompletionResponseStreamChoice) Get() *CompletionResponseStreamChoice {
	return v.value
}

func (v *NullableCompletionResponseStreamChoice) Set(val *CompletionResponseStreamChoice) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionResponseStreamChoice) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionResponseStreamChoice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionResponseStreamChoice(val *CompletionResponseStreamChoice) *NullableCompletionResponseStreamChoice {
	return &NullableCompletionResponseStreamChoice{value: val, isSet: true}
}

func (v NullableCompletionResponseStreamChoice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionResponseStreamChoice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


