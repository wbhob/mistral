/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the ToolReferenceChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolReferenceChunk{}

// ToolReferenceChunk struct for ToolReferenceChunk
type ToolReferenceChunk struct {
	Type *string `json:"type,omitempty"`
	Tool BuiltInConnectors `json:"tool"`
	Title string `json:"title"`
	Url NullableString `json:"url,omitempty"`
	Source NullableString `json:"source,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ToolReferenceChunk ToolReferenceChunk

// NewToolReferenceChunk instantiates a new ToolReferenceChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolReferenceChunk(tool BuiltInConnectors, title string) *ToolReferenceChunk {
	this := ToolReferenceChunk{}
	var type_ string = "tool_reference"
	this.Type = &type_
	this.Tool = tool
	this.Title = title
	return &this
}

// NewToolReferenceChunkWithDefaults instantiates a new ToolReferenceChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolReferenceChunkWithDefaults() *ToolReferenceChunk {
	this := ToolReferenceChunk{}
	var type_ string = "tool_reference"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ToolReferenceChunk) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolReferenceChunk) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ToolReferenceChunk) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ToolReferenceChunk) SetType(v string) {
	o.Type = &v
}

// GetTool returns the Tool field value
func (o *ToolReferenceChunk) GetTool() BuiltInConnectors {
	if o == nil {
		var ret BuiltInConnectors
		return ret
	}

	return o.Tool
}

// GetToolOk returns a tuple with the Tool field value
// and a boolean to check if the value has been set.
func (o *ToolReferenceChunk) GetToolOk() (*BuiltInConnectors, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tool, true
}

// SetTool sets field value
func (o *ToolReferenceChunk) SetTool(v BuiltInConnectors) {
	o.Tool = v
}

// GetTitle returns the Title field value
func (o *ToolReferenceChunk) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ToolReferenceChunk) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ToolReferenceChunk) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolReferenceChunk) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolReferenceChunk) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *ToolReferenceChunk) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *ToolReferenceChunk) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *ToolReferenceChunk) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *ToolReferenceChunk) UnsetUrl() {
	o.Url.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolReferenceChunk) GetSource() string {
	if o == nil || IsNil(o.Source.Get()) {
		var ret string
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolReferenceChunk) GetSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *ToolReferenceChunk) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableString and assigns it to the Source field.
func (o *ToolReferenceChunk) SetSource(v string) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *ToolReferenceChunk) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *ToolReferenceChunk) UnsetSource() {
	o.Source.Unset()
}

func (o ToolReferenceChunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolReferenceChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["tool"] = o.Tool
	toSerialize["title"] = o.Title
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToolReferenceChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolReferenceChunk := _ToolReferenceChunk{}

	err = json.Unmarshal(data, &varToolReferenceChunk)

	if err != nil {
		return err
	}

	*o = ToolReferenceChunk(varToolReferenceChunk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "tool")
		delete(additionalProperties, "title")
		delete(additionalProperties, "url")
		delete(additionalProperties, "source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToolReferenceChunk struct {
	value *ToolReferenceChunk
	isSet bool
}

func (v NullableToolReferenceChunk) Get() *ToolReferenceChunk {
	return v.value
}

func (v *NullableToolReferenceChunk) Set(val *ToolReferenceChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableToolReferenceChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableToolReferenceChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolReferenceChunk(val *ToolReferenceChunk) *NullableToolReferenceChunk {
	return &NullableToolReferenceChunk{value: val, isSet: true}
}

func (v NullableToolReferenceChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolReferenceChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


