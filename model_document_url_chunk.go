/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the DocumentURLChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentURLChunk{}

// DocumentURLChunk struct for DocumentURLChunk
type DocumentURLChunk struct {
	DocumentUrl string `json:"document_url"`
	DocumentName NullableString `json:"document_name,omitempty"`
	Type *string `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DocumentURLChunk DocumentURLChunk

// NewDocumentURLChunk instantiates a new DocumentURLChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentURLChunk(documentUrl string) *DocumentURLChunk {
	this := DocumentURLChunk{}
	this.DocumentUrl = documentUrl
	var type_ string = "document_url"
	this.Type = &type_
	return &this
}

// NewDocumentURLChunkWithDefaults instantiates a new DocumentURLChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentURLChunkWithDefaults() *DocumentURLChunk {
	this := DocumentURLChunk{}
	var type_ string = "document_url"
	this.Type = &type_
	return &this
}

// GetDocumentUrl returns the DocumentUrl field value
func (o *DocumentURLChunk) GetDocumentUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentUrl
}

// GetDocumentUrlOk returns a tuple with the DocumentUrl field value
// and a boolean to check if the value has been set.
func (o *DocumentURLChunk) GetDocumentUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentUrl, true
}

// SetDocumentUrl sets field value
func (o *DocumentURLChunk) SetDocumentUrl(v string) {
	o.DocumentUrl = v
}

// GetDocumentName returns the DocumentName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentURLChunk) GetDocumentName() string {
	if o == nil || IsNil(o.DocumentName.Get()) {
		var ret string
		return ret
	}
	return *o.DocumentName.Get()
}

// GetDocumentNameOk returns a tuple with the DocumentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentURLChunk) GetDocumentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentName.Get(), o.DocumentName.IsSet()
}

// HasDocumentName returns a boolean if a field has been set.
func (o *DocumentURLChunk) HasDocumentName() bool {
	if o != nil && o.DocumentName.IsSet() {
		return true
	}

	return false
}

// SetDocumentName gets a reference to the given NullableString and assigns it to the DocumentName field.
func (o *DocumentURLChunk) SetDocumentName(v string) {
	o.DocumentName.Set(&v)
}
// SetDocumentNameNil sets the value for DocumentName to be an explicit nil
func (o *DocumentURLChunk) SetDocumentNameNil() {
	o.DocumentName.Set(nil)
}

// UnsetDocumentName ensures that no value is present for DocumentName, not even an explicit nil
func (o *DocumentURLChunk) UnsetDocumentName() {
	o.DocumentName.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DocumentURLChunk) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentURLChunk) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DocumentURLChunk) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DocumentURLChunk) SetType(v string) {
	o.Type = &v
}

func (o DocumentURLChunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentURLChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["document_url"] = o.DocumentUrl
	if o.DocumentName.IsSet() {
		toSerialize["document_name"] = o.DocumentName.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DocumentURLChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"document_url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentURLChunk := _DocumentURLChunk{}

	err = json.Unmarshal(data, &varDocumentURLChunk)

	if err != nil {
		return err
	}

	*o = DocumentURLChunk(varDocumentURLChunk)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "document_url")
		delete(additionalProperties, "document_name")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDocumentURLChunk struct {
	value *DocumentURLChunk
	isSet bool
}

func (v NullableDocumentURLChunk) Get() *DocumentURLChunk {
	return v.value
}

func (v *NullableDocumentURLChunk) Set(val *DocumentURLChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentURLChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentURLChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentURLChunk(val *DocumentURLChunk) *NullableDocumentURLChunk {
	return &NullableDocumentURLChunk{value: val, isSet: true}
}

func (v NullableDocumentURLChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentURLChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


