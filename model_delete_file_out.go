/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteFileOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteFileOut{}

// DeleteFileOut struct for DeleteFileOut
type DeleteFileOut struct {
	// The ID of the deleted file.
	Id string `json:"id"`
	// The object type that was deleted
	Object string `json:"object"`
	// The deletion status.
	Deleted bool `json:"deleted"`
}

type _DeleteFileOut DeleteFileOut

// NewDeleteFileOut instantiates a new DeleteFileOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteFileOut(id string, object string, deleted bool) *DeleteFileOut {
	this := DeleteFileOut{}
	this.Id = id
	this.Object = object
	this.Deleted = deleted
	return &this
}

// NewDeleteFileOutWithDefaults instantiates a new DeleteFileOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteFileOutWithDefaults() *DeleteFileOut {
	this := DeleteFileOut{}
	return &this
}

// GetId returns the Id field value
func (o *DeleteFileOut) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DeleteFileOut) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DeleteFileOut) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value
func (o *DeleteFileOut) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *DeleteFileOut) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *DeleteFileOut) SetObject(v string) {
	o.Object = v
}

// GetDeleted returns the Deleted field value
func (o *DeleteFileOut) GetDeleted() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Deleted
}

// GetDeletedOk returns a tuple with the Deleted field value
// and a boolean to check if the value has been set.
func (o *DeleteFileOut) GetDeletedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Deleted, true
}

// SetDeleted sets field value
func (o *DeleteFileOut) SetDeleted(v bool) {
	o.Deleted = v
}

func (o DeleteFileOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteFileOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["object"] = o.Object
	toSerialize["deleted"] = o.Deleted
	return toSerialize, nil
}

func (o *DeleteFileOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"object",
		"deleted",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteFileOut := _DeleteFileOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteFileOut)

	if err != nil {
		return err
	}

	*o = DeleteFileOut(varDeleteFileOut)

	return err
}

type NullableDeleteFileOut struct {
	value *DeleteFileOut
	isSet bool
}

func (v NullableDeleteFileOut) Get() *DeleteFileOut {
	return v.value
}

func (v *NullableDeleteFileOut) Set(val *DeleteFileOut) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteFileOut) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteFileOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteFileOut(val *DeleteFileOut) *NullableDeleteFileOut {
	return &NullableDeleteFileOut{value: val, isSet: true}
}

func (v NullableDeleteFileOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteFileOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


