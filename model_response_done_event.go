/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ResponseDoneEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseDoneEvent{}

// ResponseDoneEvent struct for ResponseDoneEvent
type ResponseDoneEvent struct {
	Type *string `json:"type,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Usage ConversationUsageInfo `json:"usage"`
	AdditionalProperties map[string]interface{}
}

type _ResponseDoneEvent ResponseDoneEvent

// NewResponseDoneEvent instantiates a new ResponseDoneEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseDoneEvent(usage ConversationUsageInfo) *ResponseDoneEvent {
	this := ResponseDoneEvent{}
	var type_ string = "conversation.response.done"
	this.Type = &type_
	this.Usage = usage
	return &this
}

// NewResponseDoneEventWithDefaults instantiates a new ResponseDoneEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseDoneEventWithDefaults() *ResponseDoneEvent {
	this := ResponseDoneEvent{}
	var type_ string = "conversation.response.done"
	this.Type = &type_
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResponseDoneEvent) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseDoneEvent) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResponseDoneEvent) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ResponseDoneEvent) SetType(v string) {
	o.Type = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ResponseDoneEvent) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseDoneEvent) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ResponseDoneEvent) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ResponseDoneEvent) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUsage returns the Usage field value
func (o *ResponseDoneEvent) GetUsage() ConversationUsageInfo {
	if o == nil {
		var ret ConversationUsageInfo
		return ret
	}

	return o.Usage
}

// GetUsageOk returns a tuple with the Usage field value
// and a boolean to check if the value has been set.
func (o *ResponseDoneEvent) GetUsageOk() (*ConversationUsageInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Usage, true
}

// SetUsage sets field value
func (o *ResponseDoneEvent) SetUsage(v ConversationUsageInfo) {
	o.Usage = v
}

func (o ResponseDoneEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseDoneEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	toSerialize["usage"] = o.Usage

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseDoneEvent) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"usage",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResponseDoneEvent := _ResponseDoneEvent{}

	err = json.Unmarshal(data, &varResponseDoneEvent)

	if err != nil {
		return err
	}

	*o = ResponseDoneEvent(varResponseDoneEvent)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "usage")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseDoneEvent struct {
	value *ResponseDoneEvent
	isSet bool
}

func (v NullableResponseDoneEvent) Get() *ResponseDoneEvent {
	return v.value
}

func (v *NullableResponseDoneEvent) Set(val *ResponseDoneEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseDoneEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseDoneEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseDoneEvent(val *ResponseDoneEvent) *NullableResponseDoneEvent {
	return &NullableResponseDoneEvent{value: val, isSet: true}
}

func (v NullableResponseDoneEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseDoneEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


