/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the ConversationMessages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversationMessages{}

// ConversationMessages Similar to the conversation history but only keep the messages
type ConversationMessages struct {
	Object *string `json:"object,omitempty"`
	ConversationId string `json:"conversation_id"`
	Messages []MessageEntriesInner `json:"messages"`
	AdditionalProperties map[string]interface{}
}

type _ConversationMessages ConversationMessages

// NewConversationMessages instantiates a new ConversationMessages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationMessages(conversationId string, messages []MessageEntriesInner) *ConversationMessages {
	this := ConversationMessages{}
	var object string = "conversation.messages"
	this.Object = &object
	this.ConversationId = conversationId
	this.Messages = messages
	return &this
}

// NewConversationMessagesWithDefaults instantiates a new ConversationMessages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationMessagesWithDefaults() *ConversationMessages {
	this := ConversationMessages{}
	var object string = "conversation.messages"
	this.Object = &object
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ConversationMessages) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationMessages) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ConversationMessages) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *ConversationMessages) SetObject(v string) {
	o.Object = &v
}

// GetConversationId returns the ConversationId field value
func (o *ConversationMessages) GetConversationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConversationId
}

// GetConversationIdOk returns a tuple with the ConversationId field value
// and a boolean to check if the value has been set.
func (o *ConversationMessages) GetConversationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConversationId, true
}

// SetConversationId sets field value
func (o *ConversationMessages) SetConversationId(v string) {
	o.ConversationId = v
}

// GetMessages returns the Messages field value
func (o *ConversationMessages) GetMessages() []MessageEntriesInner {
	if o == nil {
		var ret []MessageEntriesInner
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *ConversationMessages) GetMessagesOk() ([]MessageEntriesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *ConversationMessages) SetMessages(v []MessageEntriesInner) {
	o.Messages = v
}

func (o ConversationMessages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversationMessages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	toSerialize["conversation_id"] = o.ConversationId
	toSerialize["messages"] = o.Messages

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ConversationMessages) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"conversation_id",
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversationMessages := _ConversationMessages{}

	err = json.Unmarshal(data, &varConversationMessages)

	if err != nil {
		return err
	}

	*o = ConversationMessages(varConversationMessages)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "object")
		delete(additionalProperties, "conversation_id")
		delete(additionalProperties, "messages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableConversationMessages struct {
	value *ConversationMessages
	isSet bool
}

func (v NullableConversationMessages) Get() *ConversationMessages {
	return v.value
}

func (v *NullableConversationMessages) Set(val *ConversationMessages) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationMessages) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationMessages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationMessages(val *ConversationMessages) *NullableConversationMessages {
	return &NullableConversationMessages{value: val, isSet: true}
}

func (v NullableConversationMessages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationMessages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


