/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// SampleType the model 'SampleType'
type SampleType string

// List of SampleType
const (
	SAMPLETYPE_PRETRAIN SampleType = "pretrain"
	SAMPLETYPE_INSTRUCT SampleType = "instruct"
	SAMPLETYPE_BATCH_REQUEST SampleType = "batch_request"
	SAMPLETYPE_BATCH_RESULT SampleType = "batch_result"
	SAMPLETYPE_BATCH_ERROR SampleType = "batch_error"
)

// All allowed values of SampleType enum
var AllowedSampleTypeEnumValues = []SampleType{
	"pretrain",
	"instruct",
	"batch_request",
	"batch_result",
	"batch_error",
}

func (v *SampleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SampleType(value)
	for _, existing := range AllowedSampleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SampleType", value)
}

// NewSampleTypeFromValue returns a pointer to a valid SampleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSampleTypeFromValue(v string) (*SampleType, error) {
	ev := SampleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SampleType: valid values are %v", v, AllowedSampleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SampleType) IsValid() bool {
	for _, existing := range AllowedSampleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SampleType value
func (v SampleType) Ptr() *SampleType {
	return &v
}

type NullableSampleType struct {
	value *SampleType
	isSet bool
}

func (v NullableSampleType) Get() *SampleType {
	return v.value
}

func (v *NullableSampleType) Set(val *SampleType) {
	v.value = val
	v.isSet = true
}

func (v NullableSampleType) IsSet() bool {
	return v.isSet
}

func (v *NullableSampleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSampleType(val *SampleType) *NullableSampleType {
	return &NullableSampleType{value: val, isSet: true}
}

func (v NullableSampleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSampleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

