/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ListFilesOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListFilesOut{}

// ListFilesOut struct for ListFilesOut
type ListFilesOut struct {
	Data []FileSchema `json:"data"`
	Object string `json:"object"`
	Total int32 `json:"total"`
}

type _ListFilesOut ListFilesOut

// NewListFilesOut instantiates a new ListFilesOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListFilesOut(data []FileSchema, object string, total int32) *ListFilesOut {
	this := ListFilesOut{}
	this.Data = data
	this.Object = object
	this.Total = total
	return &this
}

// NewListFilesOutWithDefaults instantiates a new ListFilesOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListFilesOutWithDefaults() *ListFilesOut {
	this := ListFilesOut{}
	return &this
}

// GetData returns the Data field value
func (o *ListFilesOut) GetData() []FileSchema {
	if o == nil {
		var ret []FileSchema
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *ListFilesOut) GetDataOk() ([]FileSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.Data, true
}

// SetData sets field value
func (o *ListFilesOut) SetData(v []FileSchema) {
	o.Data = v
}

// GetObject returns the Object field value
func (o *ListFilesOut) GetObject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *ListFilesOut) GetObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *ListFilesOut) SetObject(v string) {
	o.Object = v
}

// GetTotal returns the Total field value
func (o *ListFilesOut) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *ListFilesOut) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *ListFilesOut) SetTotal(v int32) {
	o.Total = v
}

func (o ListFilesOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListFilesOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["data"] = o.Data
	toSerialize["object"] = o.Object
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *ListFilesOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"data",
		"object",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varListFilesOut := _ListFilesOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varListFilesOut)

	if err != nil {
		return err
	}

	*o = ListFilesOut(varListFilesOut)

	return err
}

type NullableListFilesOut struct {
	value *ListFilesOut
	isSet bool
}

func (v NullableListFilesOut) Get() *ListFilesOut {
	return v.value
}

func (v *NullableListFilesOut) Set(val *ListFilesOut) {
	v.value = val
	v.isSet = true
}

func (v NullableListFilesOut) IsSet() bool {
	return v.isSet
}

func (v *NullableListFilesOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListFilesOut(val *ListFilesOut) *NullableListFilesOut {
	return &NullableListFilesOut{value: val, isSet: true}
}

func (v NullableListFilesOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListFilesOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


