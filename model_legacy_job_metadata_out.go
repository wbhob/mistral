/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LegacyJobMetadataOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegacyJobMetadataOut{}

// LegacyJobMetadataOut struct for LegacyJobMetadataOut
type LegacyJobMetadataOut struct {
	ExpectedDurationSeconds NullableInt32 `json:"expected_duration_seconds,omitempty"`
	Cost NullableFloat32 `json:"cost,omitempty"`
	CostCurrency NullableString `json:"cost_currency,omitempty"`
	TrainTokensPerStep NullableInt32 `json:"train_tokens_per_step,omitempty"`
	TrainTokens NullableInt32 `json:"train_tokens,omitempty"`
	DataTokens NullableInt32 `json:"data_tokens,omitempty"`
	EstimatedStartTime NullableInt32 `json:"estimated_start_time,omitempty"`
	Deprecated *bool `json:"deprecated,omitempty"`
	Details string `json:"details"`
	Epochs NullableFloat32 `json:"epochs,omitempty"`
	TrainingSteps NullableInt32 `json:"training_steps,omitempty"`
	Object *string `json:"object,omitempty"`
}

type _LegacyJobMetadataOut LegacyJobMetadataOut

// NewLegacyJobMetadataOut instantiates a new LegacyJobMetadataOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegacyJobMetadataOut(details string) *LegacyJobMetadataOut {
	this := LegacyJobMetadataOut{}
	var deprecated bool = true
	this.Deprecated = &deprecated
	this.Details = details
	var object string = "job.metadata"
	this.Object = &object
	return &this
}

// NewLegacyJobMetadataOutWithDefaults instantiates a new LegacyJobMetadataOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegacyJobMetadataOutWithDefaults() *LegacyJobMetadataOut {
	this := LegacyJobMetadataOut{}
	var deprecated bool = true
	this.Deprecated = &deprecated
	var object string = "job.metadata"
	this.Object = &object
	return &this
}

// GetExpectedDurationSeconds returns the ExpectedDurationSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetExpectedDurationSeconds() int32 {
	if o == nil || IsNil(o.ExpectedDurationSeconds.Get()) {
		var ret int32
		return ret
	}
	return *o.ExpectedDurationSeconds.Get()
}

// GetExpectedDurationSecondsOk returns a tuple with the ExpectedDurationSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetExpectedDurationSecondsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpectedDurationSeconds.Get(), o.ExpectedDurationSeconds.IsSet()
}

// HasExpectedDurationSeconds returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasExpectedDurationSeconds() bool {
	if o != nil && o.ExpectedDurationSeconds.IsSet() {
		return true
	}

	return false
}

// SetExpectedDurationSeconds gets a reference to the given NullableInt32 and assigns it to the ExpectedDurationSeconds field.
func (o *LegacyJobMetadataOut) SetExpectedDurationSeconds(v int32) {
	o.ExpectedDurationSeconds.Set(&v)
}
// SetExpectedDurationSecondsNil sets the value for ExpectedDurationSeconds to be an explicit nil
func (o *LegacyJobMetadataOut) SetExpectedDurationSecondsNil() {
	o.ExpectedDurationSeconds.Set(nil)
}

// UnsetExpectedDurationSeconds ensures that no value is present for ExpectedDurationSeconds, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetExpectedDurationSeconds() {
	o.ExpectedDurationSeconds.Unset()
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetCost() float32 {
	if o == nil || IsNil(o.Cost.Get()) {
		var ret float32
		return ret
	}
	return *o.Cost.Get()
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetCostOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cost.Get(), o.Cost.IsSet()
}

// HasCost returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasCost() bool {
	if o != nil && o.Cost.IsSet() {
		return true
	}

	return false
}

// SetCost gets a reference to the given NullableFloat32 and assigns it to the Cost field.
func (o *LegacyJobMetadataOut) SetCost(v float32) {
	o.Cost.Set(&v)
}
// SetCostNil sets the value for Cost to be an explicit nil
func (o *LegacyJobMetadataOut) SetCostNil() {
	o.Cost.Set(nil)
}

// UnsetCost ensures that no value is present for Cost, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetCost() {
	o.Cost.Unset()
}

// GetCostCurrency returns the CostCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetCostCurrency() string {
	if o == nil || IsNil(o.CostCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.CostCurrency.Get()
}

// GetCostCurrencyOk returns a tuple with the CostCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetCostCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CostCurrency.Get(), o.CostCurrency.IsSet()
}

// HasCostCurrency returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasCostCurrency() bool {
	if o != nil && o.CostCurrency.IsSet() {
		return true
	}

	return false
}

// SetCostCurrency gets a reference to the given NullableString and assigns it to the CostCurrency field.
func (o *LegacyJobMetadataOut) SetCostCurrency(v string) {
	o.CostCurrency.Set(&v)
}
// SetCostCurrencyNil sets the value for CostCurrency to be an explicit nil
func (o *LegacyJobMetadataOut) SetCostCurrencyNil() {
	o.CostCurrency.Set(nil)
}

// UnsetCostCurrency ensures that no value is present for CostCurrency, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetCostCurrency() {
	o.CostCurrency.Unset()
}

// GetTrainTokensPerStep returns the TrainTokensPerStep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetTrainTokensPerStep() int32 {
	if o == nil || IsNil(o.TrainTokensPerStep.Get()) {
		var ret int32
		return ret
	}
	return *o.TrainTokensPerStep.Get()
}

// GetTrainTokensPerStepOk returns a tuple with the TrainTokensPerStep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetTrainTokensPerStepOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrainTokensPerStep.Get(), o.TrainTokensPerStep.IsSet()
}

// HasTrainTokensPerStep returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasTrainTokensPerStep() bool {
	if o != nil && o.TrainTokensPerStep.IsSet() {
		return true
	}

	return false
}

// SetTrainTokensPerStep gets a reference to the given NullableInt32 and assigns it to the TrainTokensPerStep field.
func (o *LegacyJobMetadataOut) SetTrainTokensPerStep(v int32) {
	o.TrainTokensPerStep.Set(&v)
}
// SetTrainTokensPerStepNil sets the value for TrainTokensPerStep to be an explicit nil
func (o *LegacyJobMetadataOut) SetTrainTokensPerStepNil() {
	o.TrainTokensPerStep.Set(nil)
}

// UnsetTrainTokensPerStep ensures that no value is present for TrainTokensPerStep, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetTrainTokensPerStep() {
	o.TrainTokensPerStep.Unset()
}

// GetTrainTokens returns the TrainTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetTrainTokens() int32 {
	if o == nil || IsNil(o.TrainTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.TrainTokens.Get()
}

// GetTrainTokensOk returns a tuple with the TrainTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetTrainTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrainTokens.Get(), o.TrainTokens.IsSet()
}

// HasTrainTokens returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasTrainTokens() bool {
	if o != nil && o.TrainTokens.IsSet() {
		return true
	}

	return false
}

// SetTrainTokens gets a reference to the given NullableInt32 and assigns it to the TrainTokens field.
func (o *LegacyJobMetadataOut) SetTrainTokens(v int32) {
	o.TrainTokens.Set(&v)
}
// SetTrainTokensNil sets the value for TrainTokens to be an explicit nil
func (o *LegacyJobMetadataOut) SetTrainTokensNil() {
	o.TrainTokens.Set(nil)
}

// UnsetTrainTokens ensures that no value is present for TrainTokens, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetTrainTokens() {
	o.TrainTokens.Unset()
}

// GetDataTokens returns the DataTokens field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetDataTokens() int32 {
	if o == nil || IsNil(o.DataTokens.Get()) {
		var ret int32
		return ret
	}
	return *o.DataTokens.Get()
}

// GetDataTokensOk returns a tuple with the DataTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetDataTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataTokens.Get(), o.DataTokens.IsSet()
}

// HasDataTokens returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasDataTokens() bool {
	if o != nil && o.DataTokens.IsSet() {
		return true
	}

	return false
}

// SetDataTokens gets a reference to the given NullableInt32 and assigns it to the DataTokens field.
func (o *LegacyJobMetadataOut) SetDataTokens(v int32) {
	o.DataTokens.Set(&v)
}
// SetDataTokensNil sets the value for DataTokens to be an explicit nil
func (o *LegacyJobMetadataOut) SetDataTokensNil() {
	o.DataTokens.Set(nil)
}

// UnsetDataTokens ensures that no value is present for DataTokens, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetDataTokens() {
	o.DataTokens.Unset()
}

// GetEstimatedStartTime returns the EstimatedStartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetEstimatedStartTime() int32 {
	if o == nil || IsNil(o.EstimatedStartTime.Get()) {
		var ret int32
		return ret
	}
	return *o.EstimatedStartTime.Get()
}

// GetEstimatedStartTimeOk returns a tuple with the EstimatedStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetEstimatedStartTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedStartTime.Get(), o.EstimatedStartTime.IsSet()
}

// HasEstimatedStartTime returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasEstimatedStartTime() bool {
	if o != nil && o.EstimatedStartTime.IsSet() {
		return true
	}

	return false
}

// SetEstimatedStartTime gets a reference to the given NullableInt32 and assigns it to the EstimatedStartTime field.
func (o *LegacyJobMetadataOut) SetEstimatedStartTime(v int32) {
	o.EstimatedStartTime.Set(&v)
}
// SetEstimatedStartTimeNil sets the value for EstimatedStartTime to be an explicit nil
func (o *LegacyJobMetadataOut) SetEstimatedStartTimeNil() {
	o.EstimatedStartTime.Set(nil)
}

// UnsetEstimatedStartTime ensures that no value is present for EstimatedStartTime, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetEstimatedStartTime() {
	o.EstimatedStartTime.Unset()
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *LegacyJobMetadataOut) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyJobMetadataOut) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *LegacyJobMetadataOut) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetDetails returns the Details field value
func (o *LegacyJobMetadataOut) GetDetails() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value
// and a boolean to check if the value has been set.
func (o *LegacyJobMetadataOut) GetDetailsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Details, true
}

// SetDetails sets field value
func (o *LegacyJobMetadataOut) SetDetails(v string) {
	o.Details = v
}

// GetEpochs returns the Epochs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetEpochs() float32 {
	if o == nil || IsNil(o.Epochs.Get()) {
		var ret float32
		return ret
	}
	return *o.Epochs.Get()
}

// GetEpochsOk returns a tuple with the Epochs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetEpochsOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Epochs.Get(), o.Epochs.IsSet()
}

// HasEpochs returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasEpochs() bool {
	if o != nil && o.Epochs.IsSet() {
		return true
	}

	return false
}

// SetEpochs gets a reference to the given NullableFloat32 and assigns it to the Epochs field.
func (o *LegacyJobMetadataOut) SetEpochs(v float32) {
	o.Epochs.Set(&v)
}
// SetEpochsNil sets the value for Epochs to be an explicit nil
func (o *LegacyJobMetadataOut) SetEpochsNil() {
	o.Epochs.Set(nil)
}

// UnsetEpochs ensures that no value is present for Epochs, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetEpochs() {
	o.Epochs.Unset()
}

// GetTrainingSteps returns the TrainingSteps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LegacyJobMetadataOut) GetTrainingSteps() int32 {
	if o == nil || IsNil(o.TrainingSteps.Get()) {
		var ret int32
		return ret
	}
	return *o.TrainingSteps.Get()
}

// GetTrainingStepsOk returns a tuple with the TrainingSteps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LegacyJobMetadataOut) GetTrainingStepsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrainingSteps.Get(), o.TrainingSteps.IsSet()
}

// HasTrainingSteps returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasTrainingSteps() bool {
	if o != nil && o.TrainingSteps.IsSet() {
		return true
	}

	return false
}

// SetTrainingSteps gets a reference to the given NullableInt32 and assigns it to the TrainingSteps field.
func (o *LegacyJobMetadataOut) SetTrainingSteps(v int32) {
	o.TrainingSteps.Set(&v)
}
// SetTrainingStepsNil sets the value for TrainingSteps to be an explicit nil
func (o *LegacyJobMetadataOut) SetTrainingStepsNil() {
	o.TrainingSteps.Set(nil)
}

// UnsetTrainingSteps ensures that no value is present for TrainingSteps, not even an explicit nil
func (o *LegacyJobMetadataOut) UnsetTrainingSteps() {
	o.TrainingSteps.Unset()
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *LegacyJobMetadataOut) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegacyJobMetadataOut) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *LegacyJobMetadataOut) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *LegacyJobMetadataOut) SetObject(v string) {
	o.Object = &v
}

func (o LegacyJobMetadataOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegacyJobMetadataOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpectedDurationSeconds.IsSet() {
		toSerialize["expected_duration_seconds"] = o.ExpectedDurationSeconds.Get()
	}
	if o.Cost.IsSet() {
		toSerialize["cost"] = o.Cost.Get()
	}
	if o.CostCurrency.IsSet() {
		toSerialize["cost_currency"] = o.CostCurrency.Get()
	}
	if o.TrainTokensPerStep.IsSet() {
		toSerialize["train_tokens_per_step"] = o.TrainTokensPerStep.Get()
	}
	if o.TrainTokens.IsSet() {
		toSerialize["train_tokens"] = o.TrainTokens.Get()
	}
	if o.DataTokens.IsSet() {
		toSerialize["data_tokens"] = o.DataTokens.Get()
	}
	if o.EstimatedStartTime.IsSet() {
		toSerialize["estimated_start_time"] = o.EstimatedStartTime.Get()
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	toSerialize["details"] = o.Details
	if o.Epochs.IsSet() {
		toSerialize["epochs"] = o.Epochs.Get()
	}
	if o.TrainingSteps.IsSet() {
		toSerialize["training_steps"] = o.TrainingSteps.Get()
	}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	return toSerialize, nil
}

func (o *LegacyJobMetadataOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"details",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLegacyJobMetadataOut := _LegacyJobMetadataOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLegacyJobMetadataOut)

	if err != nil {
		return err
	}

	*o = LegacyJobMetadataOut(varLegacyJobMetadataOut)

	return err
}

type NullableLegacyJobMetadataOut struct {
	value *LegacyJobMetadataOut
	isSet bool
}

func (v NullableLegacyJobMetadataOut) Get() *LegacyJobMetadataOut {
	return v.value
}

func (v *NullableLegacyJobMetadataOut) Set(val *LegacyJobMetadataOut) {
	v.value = val
	v.isSet = true
}

func (v NullableLegacyJobMetadataOut) IsSet() bool {
	return v.isSet
}

func (v *NullableLegacyJobMetadataOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegacyJobMetadataOut(val *LegacyJobMetadataOut) *NullableLegacyJobMetadataOut {
	return &NullableLegacyJobMetadataOut{value: val, isSet: true}
}

func (v NullableLegacyJobMetadataOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegacyJobMetadataOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


