/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CompletionChunk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompletionChunk{}

// CompletionChunk struct for CompletionChunk
type CompletionChunk struct {
	Id string `json:"id"`
	Object *string `json:"object,omitempty"`
	Created *int32 `json:"created,omitempty"`
	Model string `json:"model"`
	Usage *UsageInfo `json:"usage,omitempty"`
	Choices []CompletionResponseStreamChoice `json:"choices"`
}

type _CompletionChunk CompletionChunk

// NewCompletionChunk instantiates a new CompletionChunk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompletionChunk(id string, model string, choices []CompletionResponseStreamChoice) *CompletionChunk {
	this := CompletionChunk{}
	this.Id = id
	this.Model = model
	this.Choices = choices
	return &this
}

// NewCompletionChunkWithDefaults instantiates a new CompletionChunk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompletionChunkWithDefaults() *CompletionChunk {
	this := CompletionChunk{}
	return &this
}

// GetId returns the Id field value
func (o *CompletionChunk) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CompletionChunk) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CompletionChunk) SetId(v string) {
	o.Id = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *CompletionChunk) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionChunk) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *CompletionChunk) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *CompletionChunk) SetObject(v string) {
	o.Object = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *CompletionChunk) GetCreated() int32 {
	if o == nil || IsNil(o.Created) {
		var ret int32
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionChunk) GetCreatedOk() (*int32, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *CompletionChunk) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given int32 and assigns it to the Created field.
func (o *CompletionChunk) SetCreated(v int32) {
	o.Created = &v
}

// GetModel returns the Model field value
func (o *CompletionChunk) GetModel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *CompletionChunk) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *CompletionChunk) SetModel(v string) {
	o.Model = v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *CompletionChunk) GetUsage() UsageInfo {
	if o == nil || IsNil(o.Usage) {
		var ret UsageInfo
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompletionChunk) GetUsageOk() (*UsageInfo, bool) {
	if o == nil || IsNil(o.Usage) {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *CompletionChunk) HasUsage() bool {
	if o != nil && !IsNil(o.Usage) {
		return true
	}

	return false
}

// SetUsage gets a reference to the given UsageInfo and assigns it to the Usage field.
func (o *CompletionChunk) SetUsage(v UsageInfo) {
	o.Usage = &v
}

// GetChoices returns the Choices field value
func (o *CompletionChunk) GetChoices() []CompletionResponseStreamChoice {
	if o == nil {
		var ret []CompletionResponseStreamChoice
		return ret
	}

	return o.Choices
}

// GetChoicesOk returns a tuple with the Choices field value
// and a boolean to check if the value has been set.
func (o *CompletionChunk) GetChoicesOk() ([]CompletionResponseStreamChoice, bool) {
	if o == nil {
		return nil, false
	}
	return o.Choices, true
}

// SetChoices sets field value
func (o *CompletionChunk) SetChoices(v []CompletionResponseStreamChoice) {
	o.Choices = v
}

func (o CompletionChunk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompletionChunk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	toSerialize["model"] = o.Model
	if !IsNil(o.Usage) {
		toSerialize["usage"] = o.Usage
	}
	toSerialize["choices"] = o.Choices
	return toSerialize, nil
}

func (o *CompletionChunk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"model",
		"choices",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompletionChunk := _CompletionChunk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompletionChunk)

	if err != nil {
		return err
	}

	*o = CompletionChunk(varCompletionChunk)

	return err
}

type NullableCompletionChunk struct {
	value *CompletionChunk
	isSet bool
}

func (v NullableCompletionChunk) Get() *CompletionChunk {
	return v.value
}

func (v *NullableCompletionChunk) Set(val *CompletionChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableCompletionChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableCompletionChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompletionChunk(val *CompletionChunk) *NullableCompletionChunk {
	return &NullableCompletionChunk{value: val, isSet: true}
}

func (v NullableCompletionChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompletionChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


