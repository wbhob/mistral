/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the ResponseFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResponseFormat{}

// ResponseFormat struct for ResponseFormat
type ResponseFormat struct {
	Type *ResponseFormats `json:"type,omitempty"`
	JsonSchema NullableJsonSchema `json:"json_schema,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ResponseFormat ResponseFormat

// NewResponseFormat instantiates a new ResponseFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponseFormat() *ResponseFormat {
	this := ResponseFormat{}
	return &this
}

// NewResponseFormatWithDefaults instantiates a new ResponseFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseFormatWithDefaults() *ResponseFormat {
	this := ResponseFormat{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ResponseFormat) GetType() ResponseFormats {
	if o == nil || IsNil(o.Type) {
		var ret ResponseFormats
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResponseFormat) GetTypeOk() (*ResponseFormats, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ResponseFormat) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ResponseFormats and assigns it to the Type field.
func (o *ResponseFormat) SetType(v ResponseFormats) {
	o.Type = &v
}

// GetJsonSchema returns the JsonSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResponseFormat) GetJsonSchema() JsonSchema {
	if o == nil || IsNil(o.JsonSchema.Get()) {
		var ret JsonSchema
		return ret
	}
	return *o.JsonSchema.Get()
}

// GetJsonSchemaOk returns a tuple with the JsonSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResponseFormat) GetJsonSchemaOk() (*JsonSchema, bool) {
	if o == nil {
		return nil, false
	}
	return o.JsonSchema.Get(), o.JsonSchema.IsSet()
}

// HasJsonSchema returns a boolean if a field has been set.
func (o *ResponseFormat) HasJsonSchema() bool {
	if o != nil && o.JsonSchema.IsSet() {
		return true
	}

	return false
}

// SetJsonSchema gets a reference to the given NullableJsonSchema and assigns it to the JsonSchema field.
func (o *ResponseFormat) SetJsonSchema(v JsonSchema) {
	o.JsonSchema.Set(&v)
}
// SetJsonSchemaNil sets the value for JsonSchema to be an explicit nil
func (o *ResponseFormat) SetJsonSchemaNil() {
	o.JsonSchema.Set(nil)
}

// UnsetJsonSchema ensures that no value is present for JsonSchema, not even an explicit nil
func (o *ResponseFormat) UnsetJsonSchema() {
	o.JsonSchema.Unset()
}

func (o ResponseFormat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResponseFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.JsonSchema.IsSet() {
		toSerialize["json_schema"] = o.JsonSchema.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ResponseFormat) UnmarshalJSON(data []byte) (err error) {
	varResponseFormat := _ResponseFormat{}

	err = json.Unmarshal(data, &varResponseFormat)

	if err != nil {
		return err
	}

	*o = ResponseFormat(varResponseFormat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "json_schema")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableResponseFormat struct {
	value *ResponseFormat
	isSet bool
}

func (v NullableResponseFormat) Get() *ResponseFormat {
	return v.value
}

func (v *NullableResponseFormat) Set(val *ResponseFormat) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseFormat(val *ResponseFormat) *NullableResponseFormat {
	return &NullableResponseFormat{value: val, isSet: true}
}

func (v NullableResponseFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


