/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// Stop1 Stop generation if this token is detected. Or if one of these tokens is detected when providing an array
type Stop1 struct {
	ArrayOfString *[]string
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Stop1) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArrayOfString
	err = json.Unmarshal(data, &dst.ArrayOfString);
	if err == nil {
		jsonArrayOfString, _ := json.Marshal(dst.ArrayOfString)
		if string(jsonArrayOfString) == "{}" { // empty struct
			dst.ArrayOfString = nil
		} else {
			return nil // data stored in dst.ArrayOfString, return on the first match
		}
	} else {
		dst.ArrayOfString = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Stop1)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Stop1) MarshalJSON() ([]byte, error) {
	if src.ArrayOfString != nil {
		return json.Marshal(&src.ArrayOfString)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableStop1 struct {
	value *Stop1
	isSet bool
}

func (v NullableStop1) Get() *Stop1 {
	return v.value
}

func (v *NullableStop1) Set(val *Stop1) {
	v.value = val
	v.isSet = true
}

func (v NullableStop1) IsSet() bool {
	return v.isSet
}

func (v *NullableStop1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStop1(val *Stop1) *NullableStop1 {
	return &NullableStop1{value: val, isSet: true}
}

func (v NullableStop1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStop1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


