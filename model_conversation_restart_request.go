/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConversationRestartRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConversationRestartRequest{}

// ConversationRestartRequest struct for ConversationRestartRequest
type ConversationRestartRequest struct {
	Inputs ConversationInputs `json:"inputs"`
	Stream *bool `json:"stream,omitempty"`
	// Whether to store the results into our servers or not.
	Store *bool `json:"store,omitempty"`
	HandoffExecution *string `json:"handoff_execution,omitempty"`
	FromEntryId string `json:"from_entry_id"`
	// Completion arguments that will be used to generate assistant responses. Can be overridden at each message request.
	CompletionArgs *CompletionArgs `json:"completion_args,omitempty"`
}

type _ConversationRestartRequest ConversationRestartRequest

// NewConversationRestartRequest instantiates a new ConversationRestartRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationRestartRequest(inputs ConversationInputs, fromEntryId string) *ConversationRestartRequest {
	this := ConversationRestartRequest{}
	this.Inputs = inputs
	var stream bool = false
	this.Stream = &stream
	var store bool = true
	this.Store = &store
	var handoffExecution string = "server"
	this.HandoffExecution = &handoffExecution
	this.FromEntryId = fromEntryId
	return &this
}

// NewConversationRestartRequestWithDefaults instantiates a new ConversationRestartRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationRestartRequestWithDefaults() *ConversationRestartRequest {
	this := ConversationRestartRequest{}
	var stream bool = false
	this.Stream = &stream
	var store bool = true
	this.Store = &store
	var handoffExecution string = "server"
	this.HandoffExecution = &handoffExecution
	return &this
}

// GetInputs returns the Inputs field value
func (o *ConversationRestartRequest) GetInputs() ConversationInputs {
	if o == nil {
		var ret ConversationInputs
		return ret
	}

	return o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value
// and a boolean to check if the value has been set.
func (o *ConversationRestartRequest) GetInputsOk() (*ConversationInputs, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Inputs, true
}

// SetInputs sets field value
func (o *ConversationRestartRequest) SetInputs(v ConversationInputs) {
	o.Inputs = v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *ConversationRestartRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationRestartRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *ConversationRestartRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *ConversationRestartRequest) SetStream(v bool) {
	o.Stream = &v
}

// GetStore returns the Store field value if set, zero value otherwise.
func (o *ConversationRestartRequest) GetStore() bool {
	if o == nil || IsNil(o.Store) {
		var ret bool
		return ret
	}
	return *o.Store
}

// GetStoreOk returns a tuple with the Store field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationRestartRequest) GetStoreOk() (*bool, bool) {
	if o == nil || IsNil(o.Store) {
		return nil, false
	}
	return o.Store, true
}

// HasStore returns a boolean if a field has been set.
func (o *ConversationRestartRequest) HasStore() bool {
	if o != nil && !IsNil(o.Store) {
		return true
	}

	return false
}

// SetStore gets a reference to the given bool and assigns it to the Store field.
func (o *ConversationRestartRequest) SetStore(v bool) {
	o.Store = &v
}

// GetHandoffExecution returns the HandoffExecution field value if set, zero value otherwise.
func (o *ConversationRestartRequest) GetHandoffExecution() string {
	if o == nil || IsNil(o.HandoffExecution) {
		var ret string
		return ret
	}
	return *o.HandoffExecution
}

// GetHandoffExecutionOk returns a tuple with the HandoffExecution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationRestartRequest) GetHandoffExecutionOk() (*string, bool) {
	if o == nil || IsNil(o.HandoffExecution) {
		return nil, false
	}
	return o.HandoffExecution, true
}

// HasHandoffExecution returns a boolean if a field has been set.
func (o *ConversationRestartRequest) HasHandoffExecution() bool {
	if o != nil && !IsNil(o.HandoffExecution) {
		return true
	}

	return false
}

// SetHandoffExecution gets a reference to the given string and assigns it to the HandoffExecution field.
func (o *ConversationRestartRequest) SetHandoffExecution(v string) {
	o.HandoffExecution = &v
}

// GetFromEntryId returns the FromEntryId field value
func (o *ConversationRestartRequest) GetFromEntryId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FromEntryId
}

// GetFromEntryIdOk returns a tuple with the FromEntryId field value
// and a boolean to check if the value has been set.
func (o *ConversationRestartRequest) GetFromEntryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FromEntryId, true
}

// SetFromEntryId sets field value
func (o *ConversationRestartRequest) SetFromEntryId(v string) {
	o.FromEntryId = v
}

// GetCompletionArgs returns the CompletionArgs field value if set, zero value otherwise.
func (o *ConversationRestartRequest) GetCompletionArgs() CompletionArgs {
	if o == nil || IsNil(o.CompletionArgs) {
		var ret CompletionArgs
		return ret
	}
	return *o.CompletionArgs
}

// GetCompletionArgsOk returns a tuple with the CompletionArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationRestartRequest) GetCompletionArgsOk() (*CompletionArgs, bool) {
	if o == nil || IsNil(o.CompletionArgs) {
		return nil, false
	}
	return o.CompletionArgs, true
}

// HasCompletionArgs returns a boolean if a field has been set.
func (o *ConversationRestartRequest) HasCompletionArgs() bool {
	if o != nil && !IsNil(o.CompletionArgs) {
		return true
	}

	return false
}

// SetCompletionArgs gets a reference to the given CompletionArgs and assigns it to the CompletionArgs field.
func (o *ConversationRestartRequest) SetCompletionArgs(v CompletionArgs) {
	o.CompletionArgs = &v
}

func (o ConversationRestartRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConversationRestartRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["inputs"] = o.Inputs
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Store) {
		toSerialize["store"] = o.Store
	}
	if !IsNil(o.HandoffExecution) {
		toSerialize["handoff_execution"] = o.HandoffExecution
	}
	toSerialize["from_entry_id"] = o.FromEntryId
	if !IsNil(o.CompletionArgs) {
		toSerialize["completion_args"] = o.CompletionArgs
	}
	return toSerialize, nil
}

func (o *ConversationRestartRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"inputs",
		"from_entry_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConversationRestartRequest := _ConversationRestartRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConversationRestartRequest)

	if err != nil {
		return err
	}

	*o = ConversationRestartRequest(varConversationRestartRequest)

	return err
}

type NullableConversationRestartRequest struct {
	value *ConversationRestartRequest
	isSet bool
}

func (v NullableConversationRestartRequest) Get() *ConversationRestartRequest {
	return v.value
}

func (v *NullableConversationRestartRequest) Set(val *ConversationRestartRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationRestartRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationRestartRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationRestartRequest(val *ConversationRestartRequest) *NullableConversationRestartRequest {
	return &NullableConversationRestartRequest{value: val, isSet: true}
}

func (v NullableConversationRestartRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationRestartRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


