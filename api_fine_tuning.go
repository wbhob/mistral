/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


type FineTuningAPI interface {

	/*
	JobsApiRoutesFineTuningCancelFineTuningJob Cancel Fine Tuning Job

	Request the cancellation of a fine tuning job.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId The ID of the job to cancel.
	@return ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest
	*/
	JobsApiRoutesFineTuningCancelFineTuningJob(ctx context.Context, jobId string) ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest

	// JobsApiRoutesFineTuningCancelFineTuningJobExecute executes the request
	//  @return DetailedJobOut
	JobsApiRoutesFineTuningCancelFineTuningJobExecute(r ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest) (*DetailedJobOut, *http.Response, error)

	/*
	JobsApiRoutesFineTuningCreateFineTuningJob Create Fine Tuning Job

	Create a new fine-tuning job, it will be queued for processing.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest
	*/
	JobsApiRoutesFineTuningCreateFineTuningJob(ctx context.Context) ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest

	// JobsApiRoutesFineTuningCreateFineTuningJobExecute executes the request
	//  @return Response
	JobsApiRoutesFineTuningCreateFineTuningJobExecute(r ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest) (*Response, *http.Response, error)

	/*
	JobsApiRoutesFineTuningGetFineTuningJob Get Fine Tuning Job

	Get a fine-tuned job details by its UUID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId The ID of the job to analyse.
	@return ApiJobsApiRoutesFineTuningGetFineTuningJobRequest
	*/
	JobsApiRoutesFineTuningGetFineTuningJob(ctx context.Context, jobId string) ApiJobsApiRoutesFineTuningGetFineTuningJobRequest

	// JobsApiRoutesFineTuningGetFineTuningJobExecute executes the request
	//  @return DetailedJobOut
	JobsApiRoutesFineTuningGetFineTuningJobExecute(r ApiJobsApiRoutesFineTuningGetFineTuningJobRequest) (*DetailedJobOut, *http.Response, error)

	/*
	JobsApiRoutesFineTuningGetFineTuningJobs Get Fine Tuning Jobs

	Get a list of fine-tuning jobs for your organization and user.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest
	*/
	JobsApiRoutesFineTuningGetFineTuningJobs(ctx context.Context) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest

	// JobsApiRoutesFineTuningGetFineTuningJobsExecute executes the request
	//  @return JobsOut
	JobsApiRoutesFineTuningGetFineTuningJobsExecute(r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) (*JobsOut, *http.Response, error)

	/*
	JobsApiRoutesFineTuningStartFineTuningJob Start Fine Tuning Job

	Request the start of a validated fine tuning job.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param jobId
	@return ApiJobsApiRoutesFineTuningStartFineTuningJobRequest
	*/
	JobsApiRoutesFineTuningStartFineTuningJob(ctx context.Context, jobId string) ApiJobsApiRoutesFineTuningStartFineTuningJobRequest

	// JobsApiRoutesFineTuningStartFineTuningJobExecute executes the request
	//  @return DetailedJobOut
	JobsApiRoutesFineTuningStartFineTuningJobExecute(r ApiJobsApiRoutesFineTuningStartFineTuningJobRequest) (*DetailedJobOut, *http.Response, error)
}

// FineTuningAPIService FineTuningAPI service
type FineTuningAPIService service

type ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest struct {
	ctx context.Context
	ApiService FineTuningAPI
	jobId string
}

func (r ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest) Execute() (*DetailedJobOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningCancelFineTuningJobExecute(r)
}

/*
JobsApiRoutesFineTuningCancelFineTuningJob Cancel Fine Tuning Job

Request the cancellation of a fine tuning job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId The ID of the job to cancel.
 @return ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest
*/
func (a *FineTuningAPIService) JobsApiRoutesFineTuningCancelFineTuningJob(ctx context.Context, jobId string) ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest {
	return ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return DetailedJobOut
func (a *FineTuningAPIService) JobsApiRoutesFineTuningCancelFineTuningJobExecute(r ApiJobsApiRoutesFineTuningCancelFineTuningJobRequest) (*DetailedJobOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DetailedJobOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FineTuningAPIService.JobsApiRoutesFineTuningCancelFineTuningJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/jobs/{job_id}/cancel"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest struct {
	ctx context.Context
	ApiService FineTuningAPI
	jobIn *JobIn
	dryRun *bool
}

func (r ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest) JobIn(jobIn JobIn) ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest {
	r.jobIn = &jobIn
	return r
}

// * If &#x60;true&#x60; the job is not spawned, instead the query returns a handful of useful metadata   for the user to perform sanity checks (see &#x60;LegacyJobMetadataOut&#x60; response). * Otherwise, the job is started and the query returns the job ID along with some of the   input parameters (see &#x60;JobOut&#x60; response). 
func (r ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest) DryRun(dryRun bool) ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest {
	r.dryRun = &dryRun
	return r
}

func (r ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest) Execute() (*Response, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningCreateFineTuningJobExecute(r)
}

/*
JobsApiRoutesFineTuningCreateFineTuningJob Create Fine Tuning Job

Create a new fine-tuning job, it will be queued for processing.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest
*/
func (a *FineTuningAPIService) JobsApiRoutesFineTuningCreateFineTuningJob(ctx context.Context) ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest {
	return ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return Response
func (a *FineTuningAPIService) JobsApiRoutesFineTuningCreateFineTuningJobExecute(r ApiJobsApiRoutesFineTuningCreateFineTuningJobRequest) (*Response, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Response
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FineTuningAPIService.JobsApiRoutesFineTuningCreateFineTuningJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jobIn == nil {
		return localVarReturnValue, nil, reportError("jobIn is required and must be specified")
	}

	if r.dryRun != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "dry_run", r.dryRun, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jobIn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesFineTuningGetFineTuningJobRequest struct {
	ctx context.Context
	ApiService FineTuningAPI
	jobId string
}

func (r ApiJobsApiRoutesFineTuningGetFineTuningJobRequest) Execute() (*DetailedJobOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningGetFineTuningJobExecute(r)
}

/*
JobsApiRoutesFineTuningGetFineTuningJob Get Fine Tuning Job

Get a fine-tuned job details by its UUID.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId The ID of the job to analyse.
 @return ApiJobsApiRoutesFineTuningGetFineTuningJobRequest
*/
func (a *FineTuningAPIService) JobsApiRoutesFineTuningGetFineTuningJob(ctx context.Context, jobId string) ApiJobsApiRoutesFineTuningGetFineTuningJobRequest {
	return ApiJobsApiRoutesFineTuningGetFineTuningJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return DetailedJobOut
func (a *FineTuningAPIService) JobsApiRoutesFineTuningGetFineTuningJobExecute(r ApiJobsApiRoutesFineTuningGetFineTuningJobRequest) (*DetailedJobOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DetailedJobOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FineTuningAPIService.JobsApiRoutesFineTuningGetFineTuningJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/jobs/{job_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest struct {
	ctx context.Context
	ApiService FineTuningAPI
	page *int32
	pageSize *int32
	model *string
	createdAfter *time.Time
	createdByMe *bool
	status *string
	wandbProject *string
	wandbName *string
	suffix *string
}

// The page number of the results to be returned.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) Page(page int32) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.page = &page
	return r
}

// The number of items to return per page.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) PageSize(pageSize int32) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.pageSize = &pageSize
	return r
}

// The model name used for fine-tuning to filter on. When set, the other results are not displayed.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) Model(model string) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.model = &model
	return r
}

// The date/time to filter on. When set, the results for previous creation times are not displayed.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) CreatedAfter(createdAfter time.Time) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.createdAfter = &createdAfter
	return r
}

// When set, only return results for jobs created by the API caller. Other results are not displayed.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) CreatedByMe(createdByMe bool) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.createdByMe = &createdByMe
	return r
}

// The current job state to filter on. When set, the other results are not displayed.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) Status(status string) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.status = &status
	return r
}

// The Weights and Biases project to filter on. When set, the other results are not displayed.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) WandbProject(wandbProject string) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.wandbProject = &wandbProject
	return r
}

// The Weight and Biases run name to filter on. When set, the other results are not displayed.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) WandbName(wandbName string) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.wandbName = &wandbName
	return r
}

// The model suffix to filter on. When set, the other results are not displayed.
func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) Suffix(suffix string) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	r.suffix = &suffix
	return r
}

func (r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) Execute() (*JobsOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningGetFineTuningJobsExecute(r)
}

/*
JobsApiRoutesFineTuningGetFineTuningJobs Get Fine Tuning Jobs

Get a list of fine-tuning jobs for your organization and user.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest
*/
func (a *FineTuningAPIService) JobsApiRoutesFineTuningGetFineTuningJobs(ctx context.Context) ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest {
	return ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JobsOut
func (a *FineTuningAPIService) JobsApiRoutesFineTuningGetFineTuningJobsExecute(r ApiJobsApiRoutesFineTuningGetFineTuningJobsRequest) (*JobsOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JobsOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FineTuningAPIService.JobsApiRoutesFineTuningGetFineTuningJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "form", "")
	} else {
		var defaultValue int32 = 0
		r.page = &defaultValue
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "form", "")
	} else {
		var defaultValue int32 = 100
		r.pageSize = &defaultValue
	}
	if r.model != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "model", r.model, "form", "")
	}
	if r.createdAfter != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_after", r.createdAfter, "form", "")
	}
	if r.createdByMe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_by_me", r.createdByMe, "form", "")
	} else {
		var defaultValue bool = false
		r.createdByMe = &defaultValue
	}
	if r.status != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status", r.status, "form", "")
	}
	if r.wandbProject != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wandb_project", r.wandbProject, "form", "")
	}
	if r.wandbName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "wandb_name", r.wandbName, "form", "")
	}
	if r.suffix != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "suffix", r.suffix, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJobsApiRoutesFineTuningStartFineTuningJobRequest struct {
	ctx context.Context
	ApiService FineTuningAPI
	jobId string
}

func (r ApiJobsApiRoutesFineTuningStartFineTuningJobRequest) Execute() (*DetailedJobOut, *http.Response, error) {
	return r.ApiService.JobsApiRoutesFineTuningStartFineTuningJobExecute(r)
}

/*
JobsApiRoutesFineTuningStartFineTuningJob Start Fine Tuning Job

Request the start of a validated fine tuning job.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param jobId
 @return ApiJobsApiRoutesFineTuningStartFineTuningJobRequest
*/
func (a *FineTuningAPIService) JobsApiRoutesFineTuningStartFineTuningJob(ctx context.Context, jobId string) ApiJobsApiRoutesFineTuningStartFineTuningJobRequest {
	return ApiJobsApiRoutesFineTuningStartFineTuningJobRequest{
		ApiService: a,
		ctx: ctx,
		jobId: jobId,
	}
}

// Execute executes the request
//  @return DetailedJobOut
func (a *FineTuningAPIService) JobsApiRoutesFineTuningStartFineTuningJobExecute(r ApiJobsApiRoutesFineTuningStartFineTuningJobRequest) (*DetailedJobOut, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DetailedJobOut
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FineTuningAPIService.JobsApiRoutesFineTuningStartFineTuningJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/fine_tuning/jobs/{job_id}/start"
	localVarPath = strings.Replace(localVarPath, "{"+"job_id"+"}", url.PathEscape(parameterValueToString(r.jobId, "jobId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
