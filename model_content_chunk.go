/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// ContentChunk - struct for ContentChunk
type ContentChunk struct {
	DocumentURLChunk *DocumentURLChunk
	FileChunk *FileChunk
	ImageURLChunk *ImageURLChunk
	ReferenceChunk *ReferenceChunk
	TextChunk *TextChunk
}

// DocumentURLChunkAsContentChunk is a convenience function that returns DocumentURLChunk wrapped in ContentChunk
func DocumentURLChunkAsContentChunk(v *DocumentURLChunk) ContentChunk {
	return ContentChunk{
		DocumentURLChunk: v,
	}
}

// FileChunkAsContentChunk is a convenience function that returns FileChunk wrapped in ContentChunk
func FileChunkAsContentChunk(v *FileChunk) ContentChunk {
	return ContentChunk{
		FileChunk: v,
	}
}

// ImageURLChunkAsContentChunk is a convenience function that returns ImageURLChunk wrapped in ContentChunk
func ImageURLChunkAsContentChunk(v *ImageURLChunk) ContentChunk {
	return ContentChunk{
		ImageURLChunk: v,
	}
}

// ReferenceChunkAsContentChunk is a convenience function that returns ReferenceChunk wrapped in ContentChunk
func ReferenceChunkAsContentChunk(v *ReferenceChunk) ContentChunk {
	return ContentChunk{
		ReferenceChunk: v,
	}
}

// TextChunkAsContentChunk is a convenience function that returns TextChunk wrapped in ContentChunk
func TextChunkAsContentChunk(v *TextChunk) ContentChunk {
	return ContentChunk{
		TextChunk: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContentChunk) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DocumentURLChunk
	err = newStrictDecoder(data).Decode(&dst.DocumentURLChunk)
	if err == nil {
		jsonDocumentURLChunk, _ := json.Marshal(dst.DocumentURLChunk)
		if string(jsonDocumentURLChunk) == "{}" { // empty struct
			dst.DocumentURLChunk = nil
		} else {
			if err = validator.Validate(dst.DocumentURLChunk); err != nil {
				dst.DocumentURLChunk = nil
			} else {
				match++
			}
		}
	} else {
		dst.DocumentURLChunk = nil
	}

	// try to unmarshal data into FileChunk
	err = newStrictDecoder(data).Decode(&dst.FileChunk)
	if err == nil {
		jsonFileChunk, _ := json.Marshal(dst.FileChunk)
		if string(jsonFileChunk) == "{}" { // empty struct
			dst.FileChunk = nil
		} else {
			if err = validator.Validate(dst.FileChunk); err != nil {
				dst.FileChunk = nil
			} else {
				match++
			}
		}
	} else {
		dst.FileChunk = nil
	}

	// try to unmarshal data into ImageURLChunk
	err = newStrictDecoder(data).Decode(&dst.ImageURLChunk)
	if err == nil {
		jsonImageURLChunk, _ := json.Marshal(dst.ImageURLChunk)
		if string(jsonImageURLChunk) == "{}" { // empty struct
			dst.ImageURLChunk = nil
		} else {
			if err = validator.Validate(dst.ImageURLChunk); err != nil {
				dst.ImageURLChunk = nil
			} else {
				match++
			}
		}
	} else {
		dst.ImageURLChunk = nil
	}

	// try to unmarshal data into ReferenceChunk
	err = newStrictDecoder(data).Decode(&dst.ReferenceChunk)
	if err == nil {
		jsonReferenceChunk, _ := json.Marshal(dst.ReferenceChunk)
		if string(jsonReferenceChunk) == "{}" { // empty struct
			dst.ReferenceChunk = nil
		} else {
			if err = validator.Validate(dst.ReferenceChunk); err != nil {
				dst.ReferenceChunk = nil
			} else {
				match++
			}
		}
	} else {
		dst.ReferenceChunk = nil
	}

	// try to unmarshal data into TextChunk
	err = newStrictDecoder(data).Decode(&dst.TextChunk)
	if err == nil {
		jsonTextChunk, _ := json.Marshal(dst.TextChunk)
		if string(jsonTextChunk) == "{}" { // empty struct
			dst.TextChunk = nil
		} else {
			if err = validator.Validate(dst.TextChunk); err != nil {
				dst.TextChunk = nil
			} else {
				match++
			}
		}
	} else {
		dst.TextChunk = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DocumentURLChunk = nil
		dst.FileChunk = nil
		dst.ImageURLChunk = nil
		dst.ReferenceChunk = nil
		dst.TextChunk = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContentChunk)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContentChunk)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContentChunk) MarshalJSON() ([]byte, error) {
	if src.DocumentURLChunk != nil {
		return json.Marshal(&src.DocumentURLChunk)
	}

	if src.FileChunk != nil {
		return json.Marshal(&src.FileChunk)
	}

	if src.ImageURLChunk != nil {
		return json.Marshal(&src.ImageURLChunk)
	}

	if src.ReferenceChunk != nil {
		return json.Marshal(&src.ReferenceChunk)
	}

	if src.TextChunk != nil {
		return json.Marshal(&src.TextChunk)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContentChunk) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DocumentURLChunk != nil {
		return obj.DocumentURLChunk
	}

	if obj.FileChunk != nil {
		return obj.FileChunk
	}

	if obj.ImageURLChunk != nil {
		return obj.ImageURLChunk
	}

	if obj.ReferenceChunk != nil {
		return obj.ReferenceChunk
	}

	if obj.TextChunk != nil {
		return obj.TextChunk
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj ContentChunk) GetActualInstanceValue() (interface{}) {
	if obj.DocumentURLChunk != nil {
		return *obj.DocumentURLChunk
	}

	if obj.FileChunk != nil {
		return *obj.FileChunk
	}

	if obj.ImageURLChunk != nil {
		return *obj.ImageURLChunk
	}

	if obj.ReferenceChunk != nil {
		return *obj.ReferenceChunk
	}

	if obj.TextChunk != nil {
		return *obj.TextChunk
	}

	// all schemas are nil
	return nil
}

type NullableContentChunk struct {
	value *ContentChunk
	isSet bool
}

func (v NullableContentChunk) Get() *ContentChunk {
	return v.value
}

func (v *NullableContentChunk) Set(val *ContentChunk) {
	v.value = val
	v.isSet = true
}

func (v NullableContentChunk) IsSet() bool {
	return v.isSet
}

func (v *NullableContentChunk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContentChunk(val *ContentChunk) *NullableContentChunk {
	return &NullableContentChunk{value: val, isSet: true}
}

func (v NullableContentChunk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContentChunk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


