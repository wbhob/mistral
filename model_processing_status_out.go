/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProcessingStatusOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessingStatusOut{}

// ProcessingStatusOut struct for ProcessingStatusOut
type ProcessingStatusOut struct {
	DocumentId string `json:"document_id"`
	ProcessingStatus string `json:"processing_status"`
}

type _ProcessingStatusOut ProcessingStatusOut

// NewProcessingStatusOut instantiates a new ProcessingStatusOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessingStatusOut(documentId string, processingStatus string) *ProcessingStatusOut {
	this := ProcessingStatusOut{}
	this.DocumentId = documentId
	this.ProcessingStatus = processingStatus
	return &this
}

// NewProcessingStatusOutWithDefaults instantiates a new ProcessingStatusOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessingStatusOutWithDefaults() *ProcessingStatusOut {
	this := ProcessingStatusOut{}
	return &this
}

// GetDocumentId returns the DocumentId field value
func (o *ProcessingStatusOut) GetDocumentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value
// and a boolean to check if the value has been set.
func (o *ProcessingStatusOut) GetDocumentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentId, true
}

// SetDocumentId sets field value
func (o *ProcessingStatusOut) SetDocumentId(v string) {
	o.DocumentId = v
}

// GetProcessingStatus returns the ProcessingStatus field value
func (o *ProcessingStatusOut) GetProcessingStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProcessingStatus
}

// GetProcessingStatusOk returns a tuple with the ProcessingStatus field value
// and a boolean to check if the value has been set.
func (o *ProcessingStatusOut) GetProcessingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProcessingStatus, true
}

// SetProcessingStatus sets field value
func (o *ProcessingStatusOut) SetProcessingStatus(v string) {
	o.ProcessingStatus = v
}

func (o ProcessingStatusOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessingStatusOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["document_id"] = o.DocumentId
	toSerialize["processing_status"] = o.ProcessingStatus
	return toSerialize, nil
}

func (o *ProcessingStatusOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"document_id",
		"processing_status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProcessingStatusOut := _ProcessingStatusOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProcessingStatusOut)

	if err != nil {
		return err
	}

	*o = ProcessingStatusOut(varProcessingStatusOut)

	return err
}

type NullableProcessingStatusOut struct {
	value *ProcessingStatusOut
	isSet bool
}

func (v NullableProcessingStatusOut) Get() *ProcessingStatusOut {
	return v.value
}

func (v *NullableProcessingStatusOut) Set(val *ProcessingStatusOut) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessingStatusOut) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessingStatusOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessingStatusOut(val *ProcessingStatusOut) *NullableProcessingStatusOut {
	return &NullableProcessingStatusOut{value: val, isSet: true}
}

func (v NullableProcessingStatusOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessingStatusOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


