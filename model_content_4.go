/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// Content4 struct for Content4
type Content4 struct {
	ArrayOfTextChunk *[]TextChunk
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Content4) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into ArrayOfTextChunk
	err = json.Unmarshal(data, &dst.ArrayOfTextChunk);
	if err == nil {
		jsonArrayOfTextChunk, _ := json.Marshal(dst.ArrayOfTextChunk)
		if string(jsonArrayOfTextChunk) == "{}" { // empty struct
			dst.ArrayOfTextChunk = nil
		} else {
			return nil // data stored in dst.ArrayOfTextChunk, return on the first match
		}
	} else {
		dst.ArrayOfTextChunk = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Content4)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Content4) MarshalJSON() ([]byte, error) {
	if src.ArrayOfTextChunk != nil {
		return json.Marshal(&src.ArrayOfTextChunk)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableContent4 struct {
	value *Content4
	isSet bool
}

func (v NullableContent4) Get() *Content4 {
	return v.value
}

func (v *NullableContent4) Set(val *Content4) {
	v.value = val
	v.isSet = true
}

func (v NullableContent4) IsSet() bool {
	return v.isSet
}

func (v *NullableContent4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContent4(val *Content4) *NullableContent4 {
	return &NullableContent4{value: val, isSet: true}
}

func (v NullableContent4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContent4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


