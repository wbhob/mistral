/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Response1 - struct for Response1
type Response1 struct {
	ClassifierDetailedJobOut *ClassifierDetailedJobOut
	CompletionDetailedJobOut *CompletionDetailedJobOut
}

// ClassifierDetailedJobOutAsResponse1 is a convenience function that returns ClassifierDetailedJobOut wrapped in Response1
func ClassifierDetailedJobOutAsResponse1(v *ClassifierDetailedJobOut) Response1 {
	return Response1{
		ClassifierDetailedJobOut: v,
	}
}

// CompletionDetailedJobOutAsResponse1 is a convenience function that returns CompletionDetailedJobOut wrapped in Response1
func CompletionDetailedJobOutAsResponse1(v *CompletionDetailedJobOut) Response1 {
	return Response1{
		CompletionDetailedJobOut: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Response1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ClassifierDetailedJobOut
	err = newStrictDecoder(data).Decode(&dst.ClassifierDetailedJobOut)
	if err == nil {
		jsonClassifierDetailedJobOut, _ := json.Marshal(dst.ClassifierDetailedJobOut)
		if string(jsonClassifierDetailedJobOut) == "{}" { // empty struct
			dst.ClassifierDetailedJobOut = nil
		} else {
			if err = validator.Validate(dst.ClassifierDetailedJobOut); err != nil {
				dst.ClassifierDetailedJobOut = nil
			} else {
				match++
			}
		}
	} else {
		dst.ClassifierDetailedJobOut = nil
	}

	// try to unmarshal data into CompletionDetailedJobOut
	err = newStrictDecoder(data).Decode(&dst.CompletionDetailedJobOut)
	if err == nil {
		jsonCompletionDetailedJobOut, _ := json.Marshal(dst.CompletionDetailedJobOut)
		if string(jsonCompletionDetailedJobOut) == "{}" { // empty struct
			dst.CompletionDetailedJobOut = nil
		} else {
			if err = validator.Validate(dst.CompletionDetailedJobOut); err != nil {
				dst.CompletionDetailedJobOut = nil
			} else {
				match++
			}
		}
	} else {
		dst.CompletionDetailedJobOut = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ClassifierDetailedJobOut = nil
		dst.CompletionDetailedJobOut = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Response1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Response1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Response1) MarshalJSON() ([]byte, error) {
	if src.ClassifierDetailedJobOut != nil {
		return json.Marshal(&src.ClassifierDetailedJobOut)
	}

	if src.CompletionDetailedJobOut != nil {
		return json.Marshal(&src.CompletionDetailedJobOut)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Response1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ClassifierDetailedJobOut != nil {
		return obj.ClassifierDetailedJobOut
	}

	if obj.CompletionDetailedJobOut != nil {
		return obj.CompletionDetailedJobOut
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Response1) GetActualInstanceValue() (interface{}) {
	if obj.ClassifierDetailedJobOut != nil {
		return *obj.ClassifierDetailedJobOut
	}

	if obj.CompletionDetailedJobOut != nil {
		return *obj.CompletionDetailedJobOut
	}

	// all schemas are nil
	return nil
}

type NullableResponse1 struct {
	value *Response1
	isSet bool
}

func (v NullableResponse1) Get() *Response1 {
	return v.value
}

func (v *NullableResponse1) Set(val *Response1) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse1) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse1(val *Response1) *NullableResponse1 {
	return &NullableResponse1{value: val, isSet: true}
}

func (v NullableResponse1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


