/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// FilePurpose the model 'FilePurpose'
type FilePurpose string

// List of FilePurpose
const (
	FILEPURPOSE_FINE_TUNE FilePurpose = "fine-tune"
	FILEPURPOSE_BATCH FilePurpose = "batch"
	FILEPURPOSE_OCR FilePurpose = "ocr"
)

// All allowed values of FilePurpose enum
var AllowedFilePurposeEnumValues = []FilePurpose{
	"fine-tune",
	"batch",
	"ocr",
}

func (v *FilePurpose) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FilePurpose(value)
	for _, existing := range AllowedFilePurposeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FilePurpose", value)
}

// NewFilePurposeFromValue returns a pointer to a valid FilePurpose
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFilePurposeFromValue(v string) (*FilePurpose, error) {
	ev := FilePurpose(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FilePurpose: valid values are %v", v, AllowedFilePurposeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FilePurpose) IsValid() bool {
	for _, existing := range AllowedFilePurposeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FilePurpose value
func (v FilePurpose) Ptr() *FilePurpose {
	return &v
}

type NullableFilePurpose struct {
	value *FilePurpose
	isSet bool
}

func (v NullableFilePurpose) Get() *FilePurpose {
	return v.value
}

func (v *NullableFilePurpose) Set(val *FilePurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableFilePurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableFilePurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilePurpose(val *FilePurpose) *NullableFilePurpose {
	return &NullableFilePurpose{value: val, isSet: true}
}

func (v NullableFilePurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilePurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

