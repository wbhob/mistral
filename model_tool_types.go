/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// ToolTypes the model 'ToolTypes'
type ToolTypes string

// List of ToolTypes
const (
	TOOLTYPES_FUNCTION ToolTypes = "function"
)

// All allowed values of ToolTypes enum
var AllowedToolTypesEnumValues = []ToolTypes{
	"function",
}

func (v *ToolTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ToolTypes(value)
	for _, existing := range AllowedToolTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ToolTypes", value)
}

// NewToolTypesFromValue returns a pointer to a valid ToolTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewToolTypesFromValue(v string) (*ToolTypes, error) {
	ev := ToolTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ToolTypes: valid values are %v", v, AllowedToolTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ToolTypes) IsValid() bool {
	for _, existing := range AllowedToolTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ToolTypes value
func (v ToolTypes) Ptr() *ToolTypes {
	return &v
}

type NullableToolTypes struct {
	value *ToolTypes
	isSet bool
}

func (v NullableToolTypes) Get() *ToolTypes {
	return v.value
}

func (v *NullableToolTypes) Set(val *ToolTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableToolTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableToolTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolTypes(val *ToolTypes) *NullableToolTypes {
	return &NullableToolTypes{value: val, isSet: true}
}

func (v NullableToolTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

