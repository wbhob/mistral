/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// EmbeddingDtype the model 'EmbeddingDtype'
type EmbeddingDtype string

// List of EmbeddingDtype
const (
	EMBEDDINGDTYPE_FLOAT EmbeddingDtype = "float"
	EMBEDDINGDTYPE_INT8 EmbeddingDtype = "int8"
	EMBEDDINGDTYPE_UINT8 EmbeddingDtype = "uint8"
	EMBEDDINGDTYPE_BINARY EmbeddingDtype = "binary"
	EMBEDDINGDTYPE_UBINARY EmbeddingDtype = "ubinary"
)

// All allowed values of EmbeddingDtype enum
var AllowedEmbeddingDtypeEnumValues = []EmbeddingDtype{
	"float",
	"int8",
	"uint8",
	"binary",
	"ubinary",
}

func (v *EmbeddingDtype) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := EmbeddingDtype(value)
	for _, existing := range AllowedEmbeddingDtypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid EmbeddingDtype", value)
}

// NewEmbeddingDtypeFromValue returns a pointer to a valid EmbeddingDtype
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEmbeddingDtypeFromValue(v string) (*EmbeddingDtype, error) {
	ev := EmbeddingDtype(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for EmbeddingDtype: valid values are %v", v, AllowedEmbeddingDtypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EmbeddingDtype) IsValid() bool {
	for _, existing := range AllowedEmbeddingDtypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to EmbeddingDtype value
func (v EmbeddingDtype) Ptr() *EmbeddingDtype {
	return &v
}

type NullableEmbeddingDtype struct {
	value *EmbeddingDtype
	isSet bool
}

func (v NullableEmbeddingDtype) Get() *EmbeddingDtype {
	return v.value
}

func (v *NullableEmbeddingDtype) Set(val *EmbeddingDtype) {
	v.value = val
	v.isSet = true
}

func (v NullableEmbeddingDtype) IsSet() bool {
	return v.isSet
}

func (v *NullableEmbeddingDtype) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmbeddingDtype(val *EmbeddingDtype) *NullableEmbeddingDtype {
	return &NullableEmbeddingDtype{value: val, isSet: true}
}

func (v NullableEmbeddingDtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmbeddingDtype) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

