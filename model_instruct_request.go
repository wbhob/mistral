/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the InstructRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InstructRequest{}

// InstructRequest struct for InstructRequest
type InstructRequest struct {
	Messages []MessagesInner `json:"messages"`
	AdditionalProperties map[string]interface{}
}

type _InstructRequest InstructRequest

// NewInstructRequest instantiates a new InstructRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstructRequest(messages []MessagesInner) *InstructRequest {
	this := InstructRequest{}
	this.Messages = messages
	return &this
}

// NewInstructRequestWithDefaults instantiates a new InstructRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstructRequestWithDefaults() *InstructRequest {
	this := InstructRequest{}
	return &this
}

// GetMessages returns the Messages field value
func (o *InstructRequest) GetMessages() []MessagesInner {
	if o == nil {
		var ret []MessagesInner
		return ret
	}

	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value
// and a boolean to check if the value has been set.
func (o *InstructRequest) GetMessagesOk() ([]MessagesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Messages, true
}

// SetMessages sets field value
func (o *InstructRequest) SetMessages(v []MessagesInner) {
	o.Messages = v
}

func (o InstructRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InstructRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["messages"] = o.Messages

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InstructRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"messages",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInstructRequest := _InstructRequest{}

	err = json.Unmarshal(data, &varInstructRequest)

	if err != nil {
		return err
	}

	*o = InstructRequest(varInstructRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "messages")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInstructRequest struct {
	value *InstructRequest
	isSet bool
}

func (v NullableInstructRequest) Get() *InstructRequest {
	return v.value
}

func (v *NullableInstructRequest) Set(val *InstructRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableInstructRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableInstructRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstructRequest(val *InstructRequest) *NullableInstructRequest {
	return &NullableInstructRequest{value: val, isSet: true}
}

func (v NullableInstructRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstructRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


