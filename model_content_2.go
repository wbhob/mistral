/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)


// Content2 struct for Content2
type Content2 struct {
	OutputContentChunks *OutputContentChunks
	String *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Content2) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into OutputContentChunks
	err = json.Unmarshal(data, &dst.OutputContentChunks);
	if err == nil {
		jsonOutputContentChunks, _ := json.Marshal(dst.OutputContentChunks)
		if string(jsonOutputContentChunks) == "{}" { // empty struct
			dst.OutputContentChunks = nil
		} else {
			return nil // data stored in dst.OutputContentChunks, return on the first match
		}
	} else {
		dst.OutputContentChunks = nil
	}

	// try to unmarshal JSON data into String
	err = json.Unmarshal(data, &dst.String);
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			return nil // data stored in dst.String, return on the first match
		}
	} else {
		dst.String = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Content2)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Content2) MarshalJSON() ([]byte, error) {
	if src.OutputContentChunks != nil {
		return json.Marshal(&src.OutputContentChunks)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableContent2 struct {
	value *Content2
	isSet bool
}

func (v NullableContent2) Get() *Content2 {
	return v.value
}

func (v *NullableContent2) Set(val *Content2) {
	v.value = val
	v.isSet = true
}

func (v NullableContent2) IsSet() bool {
	return v.isSet
}

func (v *NullableContent2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContent2(val *Content2) *NullableContent2 {
	return &NullableContent2{value: val, isSet: true}
}

func (v NullableContent2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContent2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


