/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 0.0.2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CheckpointOut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckpointOut{}

// CheckpointOut struct for CheckpointOut
type CheckpointOut struct {
	Metrics MetricOut `json:"metrics"`
	// The step number that the checkpoint was created at.
	StepNumber int32 `json:"step_number"`
	// The UNIX timestamp (in seconds) for when the checkpoint was created.
	CreatedAt int32 `json:"created_at"`
}

type _CheckpointOut CheckpointOut

// NewCheckpointOut instantiates a new CheckpointOut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckpointOut(metrics MetricOut, stepNumber int32, createdAt int32) *CheckpointOut {
	this := CheckpointOut{}
	this.Metrics = metrics
	this.StepNumber = stepNumber
	this.CreatedAt = createdAt
	return &this
}

// NewCheckpointOutWithDefaults instantiates a new CheckpointOut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckpointOutWithDefaults() *CheckpointOut {
	this := CheckpointOut{}
	return &this
}

// GetMetrics returns the Metrics field value
func (o *CheckpointOut) GetMetrics() MetricOut {
	if o == nil {
		var ret MetricOut
		return ret
	}

	return o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value
// and a boolean to check if the value has been set.
func (o *CheckpointOut) GetMetricsOk() (*MetricOut, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metrics, true
}

// SetMetrics sets field value
func (o *CheckpointOut) SetMetrics(v MetricOut) {
	o.Metrics = v
}

// GetStepNumber returns the StepNumber field value
func (o *CheckpointOut) GetStepNumber() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.StepNumber
}

// GetStepNumberOk returns a tuple with the StepNumber field value
// and a boolean to check if the value has been set.
func (o *CheckpointOut) GetStepNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StepNumber, true
}

// SetStepNumber sets field value
func (o *CheckpointOut) SetStepNumber(v int32) {
	o.StepNumber = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *CheckpointOut) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *CheckpointOut) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *CheckpointOut) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

func (o CheckpointOut) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckpointOut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metrics"] = o.Metrics
	toSerialize["step_number"] = o.StepNumber
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *CheckpointOut) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metrics",
		"step_number",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCheckpointOut := _CheckpointOut{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCheckpointOut)

	if err != nil {
		return err
	}

	*o = CheckpointOut(varCheckpointOut)

	return err
}

type NullableCheckpointOut struct {
	value *CheckpointOut
	isSet bool
}

func (v NullableCheckpointOut) Get() *CheckpointOut {
	return v.value
}

func (v *NullableCheckpointOut) Set(val *CheckpointOut) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckpointOut) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckpointOut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckpointOut(val *CheckpointOut) *NullableCheckpointOut {
	return &NullableCheckpointOut{value: val, isSet: true}
}

func (v NullableCheckpointOut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckpointOut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


