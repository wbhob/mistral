/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JobIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobIn{}

// JobIn struct for JobIn
type JobIn struct {
	Model FineTuneableModel `json:"model"`
	TrainingFiles []TrainingFile `json:"training_files,omitempty"`
	ValidationFiles []string `json:"validation_files,omitempty"`
	Suffix NullableString `json:"suffix,omitempty"`
	Integrations []JobInIntegrationsInner `json:"integrations,omitempty"`
	// This field will be required in a future release.
	AutoStart *bool `json:"auto_start,omitempty"`
	InvalidSampleSkipPercentage *float32 `json:"invalid_sample_skip_percentage,omitempty"`
	JobType NullableFineTuneableModelType `json:"job_type,omitempty"`
	Hyperparameters Hyperparameters `json:"hyperparameters"`
	Repositories []JobInRepositoriesInner `json:"repositories,omitempty"`
	ClassifierTargets []ClassifierTargetIn `json:"classifier_targets,omitempty"`
}

type _JobIn JobIn

// NewJobIn instantiates a new JobIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobIn(model FineTuneableModel, hyperparameters Hyperparameters) *JobIn {
	this := JobIn{}
	this.Model = model
	var invalidSampleSkipPercentage float32 = 0
	this.InvalidSampleSkipPercentage = &invalidSampleSkipPercentage
	this.Hyperparameters = hyperparameters
	return &this
}

// NewJobInWithDefaults instantiates a new JobIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobInWithDefaults() *JobIn {
	this := JobIn{}
	var invalidSampleSkipPercentage float32 = 0
	this.InvalidSampleSkipPercentage = &invalidSampleSkipPercentage
	return &this
}

// GetModel returns the Model field value
func (o *JobIn) GetModel() FineTuneableModel {
	if o == nil {
		var ret FineTuneableModel
		return ret
	}

	return o.Model
}

// GetModelOk returns a tuple with the Model field value
// and a boolean to check if the value has been set.
func (o *JobIn) GetModelOk() (*FineTuneableModel, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Model, true
}

// SetModel sets field value
func (o *JobIn) SetModel(v FineTuneableModel) {
	o.Model = v
}

// GetTrainingFiles returns the TrainingFiles field value if set, zero value otherwise.
func (o *JobIn) GetTrainingFiles() []TrainingFile {
	if o == nil || IsNil(o.TrainingFiles) {
		var ret []TrainingFile
		return ret
	}
	return o.TrainingFiles
}

// GetTrainingFilesOk returns a tuple with the TrainingFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetTrainingFilesOk() ([]TrainingFile, bool) {
	if o == nil || IsNil(o.TrainingFiles) {
		return nil, false
	}
	return o.TrainingFiles, true
}

// HasTrainingFiles returns a boolean if a field has been set.
func (o *JobIn) HasTrainingFiles() bool {
	if o != nil && !IsNil(o.TrainingFiles) {
		return true
	}

	return false
}

// SetTrainingFiles gets a reference to the given []TrainingFile and assigns it to the TrainingFiles field.
func (o *JobIn) SetTrainingFiles(v []TrainingFile) {
	o.TrainingFiles = v
}

// GetValidationFiles returns the ValidationFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobIn) GetValidationFiles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ValidationFiles
}

// GetValidationFilesOk returns a tuple with the ValidationFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobIn) GetValidationFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.ValidationFiles) {
		return nil, false
	}
	return o.ValidationFiles, true
}

// HasValidationFiles returns a boolean if a field has been set.
func (o *JobIn) HasValidationFiles() bool {
	if o != nil && !IsNil(o.ValidationFiles) {
		return true
	}

	return false
}

// SetValidationFiles gets a reference to the given []string and assigns it to the ValidationFiles field.
func (o *JobIn) SetValidationFiles(v []string) {
	o.ValidationFiles = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobIn) GetSuffix() string {
	if o == nil || IsNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobIn) GetSuffixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *JobIn) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *JobIn) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *JobIn) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *JobIn) UnsetSuffix() {
	o.Suffix.Unset()
}

// GetIntegrations returns the Integrations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobIn) GetIntegrations() []JobInIntegrationsInner {
	if o == nil {
		var ret []JobInIntegrationsInner
		return ret
	}
	return o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobIn) GetIntegrationsOk() ([]JobInIntegrationsInner, bool) {
	if o == nil || IsNil(o.Integrations) {
		return nil, false
	}
	return o.Integrations, true
}

// HasIntegrations returns a boolean if a field has been set.
func (o *JobIn) HasIntegrations() bool {
	if o != nil && !IsNil(o.Integrations) {
		return true
	}

	return false
}

// SetIntegrations gets a reference to the given []JobInIntegrationsInner and assigns it to the Integrations field.
func (o *JobIn) SetIntegrations(v []JobInIntegrationsInner) {
	o.Integrations = v
}

// GetAutoStart returns the AutoStart field value if set, zero value otherwise.
func (o *JobIn) GetAutoStart() bool {
	if o == nil || IsNil(o.AutoStart) {
		var ret bool
		return ret
	}
	return *o.AutoStart
}

// GetAutoStartOk returns a tuple with the AutoStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetAutoStartOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoStart) {
		return nil, false
	}
	return o.AutoStart, true
}

// HasAutoStart returns a boolean if a field has been set.
func (o *JobIn) HasAutoStart() bool {
	if o != nil && !IsNil(o.AutoStart) {
		return true
	}

	return false
}

// SetAutoStart gets a reference to the given bool and assigns it to the AutoStart field.
func (o *JobIn) SetAutoStart(v bool) {
	o.AutoStart = &v
}

// GetInvalidSampleSkipPercentage returns the InvalidSampleSkipPercentage field value if set, zero value otherwise.
func (o *JobIn) GetInvalidSampleSkipPercentage() float32 {
	if o == nil || IsNil(o.InvalidSampleSkipPercentage) {
		var ret float32
		return ret
	}
	return *o.InvalidSampleSkipPercentage
}

// GetInvalidSampleSkipPercentageOk returns a tuple with the InvalidSampleSkipPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobIn) GetInvalidSampleSkipPercentageOk() (*float32, bool) {
	if o == nil || IsNil(o.InvalidSampleSkipPercentage) {
		return nil, false
	}
	return o.InvalidSampleSkipPercentage, true
}

// HasInvalidSampleSkipPercentage returns a boolean if a field has been set.
func (o *JobIn) HasInvalidSampleSkipPercentage() bool {
	if o != nil && !IsNil(o.InvalidSampleSkipPercentage) {
		return true
	}

	return false
}

// SetInvalidSampleSkipPercentage gets a reference to the given float32 and assigns it to the InvalidSampleSkipPercentage field.
func (o *JobIn) SetInvalidSampleSkipPercentage(v float32) {
	o.InvalidSampleSkipPercentage = &v
}

// GetJobType returns the JobType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobIn) GetJobType() FineTuneableModelType {
	if o == nil || IsNil(o.JobType.Get()) {
		var ret FineTuneableModelType
		return ret
	}
	return *o.JobType.Get()
}

// GetJobTypeOk returns a tuple with the JobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobIn) GetJobTypeOk() (*FineTuneableModelType, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobType.Get(), o.JobType.IsSet()
}

// HasJobType returns a boolean if a field has been set.
func (o *JobIn) HasJobType() bool {
	if o != nil && o.JobType.IsSet() {
		return true
	}

	return false
}

// SetJobType gets a reference to the given NullableFineTuneableModelType and assigns it to the JobType field.
func (o *JobIn) SetJobType(v FineTuneableModelType) {
	o.JobType.Set(&v)
}
// SetJobTypeNil sets the value for JobType to be an explicit nil
func (o *JobIn) SetJobTypeNil() {
	o.JobType.Set(nil)
}

// UnsetJobType ensures that no value is present for JobType, not even an explicit nil
func (o *JobIn) UnsetJobType() {
	o.JobType.Unset()
}

// GetHyperparameters returns the Hyperparameters field value
func (o *JobIn) GetHyperparameters() Hyperparameters {
	if o == nil {
		var ret Hyperparameters
		return ret
	}

	return o.Hyperparameters
}

// GetHyperparametersOk returns a tuple with the Hyperparameters field value
// and a boolean to check if the value has been set.
func (o *JobIn) GetHyperparametersOk() (*Hyperparameters, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hyperparameters, true
}

// SetHyperparameters sets field value
func (o *JobIn) SetHyperparameters(v Hyperparameters) {
	o.Hyperparameters = v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobIn) GetRepositories() []JobInRepositoriesInner {
	if o == nil {
		var ret []JobInRepositoriesInner
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobIn) GetRepositoriesOk() ([]JobInRepositoriesInner, bool) {
	if o == nil || IsNil(o.Repositories) {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *JobIn) HasRepositories() bool {
	if o != nil && !IsNil(o.Repositories) {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []JobInRepositoriesInner and assigns it to the Repositories field.
func (o *JobIn) SetRepositories(v []JobInRepositoriesInner) {
	o.Repositories = v
}

// GetClassifierTargets returns the ClassifierTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobIn) GetClassifierTargets() []ClassifierTargetIn {
	if o == nil {
		var ret []ClassifierTargetIn
		return ret
	}
	return o.ClassifierTargets
}

// GetClassifierTargetsOk returns a tuple with the ClassifierTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobIn) GetClassifierTargetsOk() ([]ClassifierTargetIn, bool) {
	if o == nil || IsNil(o.ClassifierTargets) {
		return nil, false
	}
	return o.ClassifierTargets, true
}

// HasClassifierTargets returns a boolean if a field has been set.
func (o *JobIn) HasClassifierTargets() bool {
	if o != nil && !IsNil(o.ClassifierTargets) {
		return true
	}

	return false
}

// SetClassifierTargets gets a reference to the given []ClassifierTargetIn and assigns it to the ClassifierTargets field.
func (o *JobIn) SetClassifierTargets(v []ClassifierTargetIn) {
	o.ClassifierTargets = v
}

func (o JobIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["model"] = o.Model
	if !IsNil(o.TrainingFiles) {
		toSerialize["training_files"] = o.TrainingFiles
	}
	if o.ValidationFiles != nil {
		toSerialize["validation_files"] = o.ValidationFiles
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	if o.Integrations != nil {
		toSerialize["integrations"] = o.Integrations
	}
	if !IsNil(o.AutoStart) {
		toSerialize["auto_start"] = o.AutoStart
	}
	if !IsNil(o.InvalidSampleSkipPercentage) {
		toSerialize["invalid_sample_skip_percentage"] = o.InvalidSampleSkipPercentage
	}
	if o.JobType.IsSet() {
		toSerialize["job_type"] = o.JobType.Get()
	}
	toSerialize["hyperparameters"] = o.Hyperparameters
	if o.Repositories != nil {
		toSerialize["repositories"] = o.Repositories
	}
	if o.ClassifierTargets != nil {
		toSerialize["classifier_targets"] = o.ClassifierTargets
	}
	return toSerialize, nil
}

func (o *JobIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"model",
		"hyperparameters",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobIn := _JobIn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobIn)

	if err != nil {
		return err
	}

	*o = JobIn(varJobIn)

	return err
}

type NullableJobIn struct {
	value *JobIn
	isSet bool
}

func (v NullableJobIn) Get() *JobIn {
	return v.value
}

func (v *NullableJobIn) Set(val *JobIn) {
	v.value = val
	v.isSet = true
}

func (v NullableJobIn) IsSet() bool {
	return v.isSet
}

func (v *NullableJobIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobIn(val *JobIn) *NullableJobIn {
	return &NullableJobIn{value: val, isSet: true}
}

func (v NullableJobIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


