/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SharingIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharingIn{}

// SharingIn struct for SharingIn
type SharingIn struct {
	OrgId string `json:"org_id"`
	Level ShareEnum `json:"level"`
	// The id of the entity (user, workspace or organization) to share with
	ShareWithUuid string `json:"share_with_uuid"`
	ShareWithType EntityType `json:"share_with_type"`
}

type _SharingIn SharingIn

// NewSharingIn instantiates a new SharingIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharingIn(orgId string, level ShareEnum, shareWithUuid string, shareWithType EntityType) *SharingIn {
	this := SharingIn{}
	this.OrgId = orgId
	this.Level = level
	this.ShareWithUuid = shareWithUuid
	this.ShareWithType = shareWithType
	return &this
}

// NewSharingInWithDefaults instantiates a new SharingIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingInWithDefaults() *SharingIn {
	this := SharingIn{}
	return &this
}

// GetOrgId returns the OrgId field value
func (o *SharingIn) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *SharingIn) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *SharingIn) SetOrgId(v string) {
	o.OrgId = v
}

// GetLevel returns the Level field value
func (o *SharingIn) GetLevel() ShareEnum {
	if o == nil {
		var ret ShareEnum
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *SharingIn) GetLevelOk() (*ShareEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *SharingIn) SetLevel(v ShareEnum) {
	o.Level = v
}

// GetShareWithUuid returns the ShareWithUuid field value
func (o *SharingIn) GetShareWithUuid() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ShareWithUuid
}

// GetShareWithUuidOk returns a tuple with the ShareWithUuid field value
// and a boolean to check if the value has been set.
func (o *SharingIn) GetShareWithUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareWithUuid, true
}

// SetShareWithUuid sets field value
func (o *SharingIn) SetShareWithUuid(v string) {
	o.ShareWithUuid = v
}

// GetShareWithType returns the ShareWithType field value
func (o *SharingIn) GetShareWithType() EntityType {
	if o == nil {
		var ret EntityType
		return ret
	}

	return o.ShareWithType
}

// GetShareWithTypeOk returns a tuple with the ShareWithType field value
// and a boolean to check if the value has been set.
func (o *SharingIn) GetShareWithTypeOk() (*EntityType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ShareWithType, true
}

// SetShareWithType sets field value
func (o *SharingIn) SetShareWithType(v EntityType) {
	o.ShareWithType = v
}

func (o SharingIn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharingIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["org_id"] = o.OrgId
	toSerialize["level"] = o.Level
	toSerialize["share_with_uuid"] = o.ShareWithUuid
	toSerialize["share_with_type"] = o.ShareWithType
	return toSerialize, nil
}

func (o *SharingIn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"org_id",
		"level",
		"share_with_uuid",
		"share_with_type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSharingIn := _SharingIn{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSharingIn)

	if err != nil {
		return err
	}

	*o = SharingIn(varSharingIn)

	return err
}

type NullableSharingIn struct {
	value *SharingIn
	isSet bool
}

func (v NullableSharingIn) Get() *SharingIn {
	return v.value
}

func (v *NullableSharingIn) Set(val *SharingIn) {
	v.value = val
	v.isSet = true
}

func (v NullableSharingIn) IsSet() bool {
	return v.isSet
}

func (v *NullableSharingIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharingIn(val *SharingIn) *NullableSharingIn {
	return &NullableSharingIn{value: val, isSet: true}
}

func (v NullableSharingIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharingIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


