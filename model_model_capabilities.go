/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
)

// checks if the ModelCapabilities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelCapabilities{}

// ModelCapabilities struct for ModelCapabilities
type ModelCapabilities struct {
	CompletionChat *bool `json:"completion_chat,omitempty"`
	CompletionFim *bool `json:"completion_fim,omitempty"`
	FunctionCalling *bool `json:"function_calling,omitempty"`
	FineTuning *bool `json:"fine_tuning,omitempty"`
	Vision *bool `json:"vision,omitempty"`
}

// NewModelCapabilities instantiates a new ModelCapabilities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelCapabilities() *ModelCapabilities {
	this := ModelCapabilities{}
	var completionChat bool = true
	this.CompletionChat = &completionChat
	var completionFim bool = false
	this.CompletionFim = &completionFim
	var functionCalling bool = true
	this.FunctionCalling = &functionCalling
	var fineTuning bool = false
	this.FineTuning = &fineTuning
	var vision bool = false
	this.Vision = &vision
	return &this
}

// NewModelCapabilitiesWithDefaults instantiates a new ModelCapabilities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelCapabilitiesWithDefaults() *ModelCapabilities {
	this := ModelCapabilities{}
	var completionChat bool = true
	this.CompletionChat = &completionChat
	var completionFim bool = false
	this.CompletionFim = &completionFim
	var functionCalling bool = true
	this.FunctionCalling = &functionCalling
	var fineTuning bool = false
	this.FineTuning = &fineTuning
	var vision bool = false
	this.Vision = &vision
	return &this
}

// GetCompletionChat returns the CompletionChat field value if set, zero value otherwise.
func (o *ModelCapabilities) GetCompletionChat() bool {
	if o == nil || IsNil(o.CompletionChat) {
		var ret bool
		return ret
	}
	return *o.CompletionChat
}

// GetCompletionChatOk returns a tuple with the CompletionChat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCapabilities) GetCompletionChatOk() (*bool, bool) {
	if o == nil || IsNil(o.CompletionChat) {
		return nil, false
	}
	return o.CompletionChat, true
}

// HasCompletionChat returns a boolean if a field has been set.
func (o *ModelCapabilities) HasCompletionChat() bool {
	if o != nil && !IsNil(o.CompletionChat) {
		return true
	}

	return false
}

// SetCompletionChat gets a reference to the given bool and assigns it to the CompletionChat field.
func (o *ModelCapabilities) SetCompletionChat(v bool) {
	o.CompletionChat = &v
}

// GetCompletionFim returns the CompletionFim field value if set, zero value otherwise.
func (o *ModelCapabilities) GetCompletionFim() bool {
	if o == nil || IsNil(o.CompletionFim) {
		var ret bool
		return ret
	}
	return *o.CompletionFim
}

// GetCompletionFimOk returns a tuple with the CompletionFim field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCapabilities) GetCompletionFimOk() (*bool, bool) {
	if o == nil || IsNil(o.CompletionFim) {
		return nil, false
	}
	return o.CompletionFim, true
}

// HasCompletionFim returns a boolean if a field has been set.
func (o *ModelCapabilities) HasCompletionFim() bool {
	if o != nil && !IsNil(o.CompletionFim) {
		return true
	}

	return false
}

// SetCompletionFim gets a reference to the given bool and assigns it to the CompletionFim field.
func (o *ModelCapabilities) SetCompletionFim(v bool) {
	o.CompletionFim = &v
}

// GetFunctionCalling returns the FunctionCalling field value if set, zero value otherwise.
func (o *ModelCapabilities) GetFunctionCalling() bool {
	if o == nil || IsNil(o.FunctionCalling) {
		var ret bool
		return ret
	}
	return *o.FunctionCalling
}

// GetFunctionCallingOk returns a tuple with the FunctionCalling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCapabilities) GetFunctionCallingOk() (*bool, bool) {
	if o == nil || IsNil(o.FunctionCalling) {
		return nil, false
	}
	return o.FunctionCalling, true
}

// HasFunctionCalling returns a boolean if a field has been set.
func (o *ModelCapabilities) HasFunctionCalling() bool {
	if o != nil && !IsNil(o.FunctionCalling) {
		return true
	}

	return false
}

// SetFunctionCalling gets a reference to the given bool and assigns it to the FunctionCalling field.
func (o *ModelCapabilities) SetFunctionCalling(v bool) {
	o.FunctionCalling = &v
}

// GetFineTuning returns the FineTuning field value if set, zero value otherwise.
func (o *ModelCapabilities) GetFineTuning() bool {
	if o == nil || IsNil(o.FineTuning) {
		var ret bool
		return ret
	}
	return *o.FineTuning
}

// GetFineTuningOk returns a tuple with the FineTuning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCapabilities) GetFineTuningOk() (*bool, bool) {
	if o == nil || IsNil(o.FineTuning) {
		return nil, false
	}
	return o.FineTuning, true
}

// HasFineTuning returns a boolean if a field has been set.
func (o *ModelCapabilities) HasFineTuning() bool {
	if o != nil && !IsNil(o.FineTuning) {
		return true
	}

	return false
}

// SetFineTuning gets a reference to the given bool and assigns it to the FineTuning field.
func (o *ModelCapabilities) SetFineTuning(v bool) {
	o.FineTuning = &v
}

// GetVision returns the Vision field value if set, zero value otherwise.
func (o *ModelCapabilities) GetVision() bool {
	if o == nil || IsNil(o.Vision) {
		var ret bool
		return ret
	}
	return *o.Vision
}

// GetVisionOk returns a tuple with the Vision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelCapabilities) GetVisionOk() (*bool, bool) {
	if o == nil || IsNil(o.Vision) {
		return nil, false
	}
	return o.Vision, true
}

// HasVision returns a boolean if a field has been set.
func (o *ModelCapabilities) HasVision() bool {
	if o != nil && !IsNil(o.Vision) {
		return true
	}

	return false
}

// SetVision gets a reference to the given bool and assigns it to the Vision field.
func (o *ModelCapabilities) SetVision(v bool) {
	o.Vision = &v
}

func (o ModelCapabilities) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelCapabilities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompletionChat) {
		toSerialize["completion_chat"] = o.CompletionChat
	}
	if !IsNil(o.CompletionFim) {
		toSerialize["completion_fim"] = o.CompletionFim
	}
	if !IsNil(o.FunctionCalling) {
		toSerialize["function_calling"] = o.FunctionCalling
	}
	if !IsNil(o.FineTuning) {
		toSerialize["fine_tuning"] = o.FineTuning
	}
	if !IsNil(o.Vision) {
		toSerialize["vision"] = o.Vision
	}
	return toSerialize, nil
}

type NullableModelCapabilities struct {
	value *ModelCapabilities
	isSet bool
}

func (v NullableModelCapabilities) Get() *ModelCapabilities {
	return v.value
}

func (v *NullableModelCapabilities) Set(val *ModelCapabilities) {
	v.value = val
	v.isSet = true
}

func (v NullableModelCapabilities) IsSet() bool {
	return v.isSet
}

func (v *NullableModelCapabilities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelCapabilities(val *ModelCapabilities) *NullableModelCapabilities {
	return &NullableModelCapabilities{value: val, isSet: true}
}

func (v NullableModelCapabilities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelCapabilities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


