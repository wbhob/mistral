/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the FunctionResultEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FunctionResultEntry{}

// FunctionResultEntry struct for FunctionResultEntry
type FunctionResultEntry struct {
	Object *string `json:"object,omitempty"`
	Type *string `json:"type,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	CompletedAt NullableTime `json:"completed_at,omitempty"`
	Id *string `json:"id,omitempty"`
	ToolCallId string `json:"tool_call_id"`
	Result string `json:"result"`
	AdditionalProperties map[string]interface{}
}

type _FunctionResultEntry FunctionResultEntry

// NewFunctionResultEntry instantiates a new FunctionResultEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFunctionResultEntry(toolCallId string, result string) *FunctionResultEntry {
	this := FunctionResultEntry{}
	var object string = "entry"
	this.Object = &object
	var type_ string = "function.result"
	this.Type = &type_
	this.ToolCallId = toolCallId
	this.Result = result
	return &this
}

// NewFunctionResultEntryWithDefaults instantiates a new FunctionResultEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFunctionResultEntryWithDefaults() *FunctionResultEntry {
	this := FunctionResultEntry{}
	var object string = "entry"
	this.Object = &object
	var type_ string = "function.result"
	this.Type = &type_
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *FunctionResultEntry) GetObject() string {
	if o == nil || IsNil(o.Object) {
		var ret string
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionResultEntry) GetObjectOk() (*string, bool) {
	if o == nil || IsNil(o.Object) {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *FunctionResultEntry) HasObject() bool {
	if o != nil && !IsNil(o.Object) {
		return true
	}

	return false
}

// SetObject gets a reference to the given string and assigns it to the Object field.
func (o *FunctionResultEntry) SetObject(v string) {
	o.Object = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FunctionResultEntry) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionResultEntry) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FunctionResultEntry) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FunctionResultEntry) SetType(v string) {
	o.Type = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FunctionResultEntry) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionResultEntry) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FunctionResultEntry) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *FunctionResultEntry) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetCompletedAt returns the CompletedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FunctionResultEntry) GetCompletedAt() time.Time {
	if o == nil || IsNil(o.CompletedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.CompletedAt.Get()
}

// GetCompletedAtOk returns a tuple with the CompletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FunctionResultEntry) GetCompletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.CompletedAt.Get(), o.CompletedAt.IsSet()
}

// HasCompletedAt returns a boolean if a field has been set.
func (o *FunctionResultEntry) HasCompletedAt() bool {
	if o != nil && o.CompletedAt.IsSet() {
		return true
	}

	return false
}

// SetCompletedAt gets a reference to the given NullableTime and assigns it to the CompletedAt field.
func (o *FunctionResultEntry) SetCompletedAt(v time.Time) {
	o.CompletedAt.Set(&v)
}
// SetCompletedAtNil sets the value for CompletedAt to be an explicit nil
func (o *FunctionResultEntry) SetCompletedAtNil() {
	o.CompletedAt.Set(nil)
}

// UnsetCompletedAt ensures that no value is present for CompletedAt, not even an explicit nil
func (o *FunctionResultEntry) UnsetCompletedAt() {
	o.CompletedAt.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FunctionResultEntry) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FunctionResultEntry) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FunctionResultEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FunctionResultEntry) SetId(v string) {
	o.Id = &v
}

// GetToolCallId returns the ToolCallId field value
func (o *FunctionResultEntry) GetToolCallId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ToolCallId
}

// GetToolCallIdOk returns a tuple with the ToolCallId field value
// and a boolean to check if the value has been set.
func (o *FunctionResultEntry) GetToolCallIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ToolCallId, true
}

// SetToolCallId sets field value
func (o *FunctionResultEntry) SetToolCallId(v string) {
	o.ToolCallId = v
}

// GetResult returns the Result field value
func (o *FunctionResultEntry) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *FunctionResultEntry) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *FunctionResultEntry) SetResult(v string) {
	o.Result = v
}

func (o FunctionResultEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FunctionResultEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Object) {
		toSerialize["object"] = o.Object
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.CompletedAt.IsSet() {
		toSerialize["completed_at"] = o.CompletedAt.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["tool_call_id"] = o.ToolCallId
	toSerialize["result"] = o.Result

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FunctionResultEntry) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tool_call_id",
		"result",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFunctionResultEntry := _FunctionResultEntry{}

	err = json.Unmarshal(data, &varFunctionResultEntry)

	if err != nil {
		return err
	}

	*o = FunctionResultEntry(varFunctionResultEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "object")
		delete(additionalProperties, "type")
		delete(additionalProperties, "created_at")
		delete(additionalProperties, "completed_at")
		delete(additionalProperties, "id")
		delete(additionalProperties, "tool_call_id")
		delete(additionalProperties, "result")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFunctionResultEntry struct {
	value *FunctionResultEntry
	isSet bool
}

func (v NullableFunctionResultEntry) Get() *FunctionResultEntry {
	return v.value
}

func (v *NullableFunctionResultEntry) Set(val *FunctionResultEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFunctionResultEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFunctionResultEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFunctionResultEntry(val *FunctionResultEntry) *NullableFunctionResultEntry {
	return &NullableFunctionResultEntry{value: val, isSet: true}
}

func (v NullableFunctionResultEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFunctionResultEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


