/*
Mistral AI API

Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mistral

import (
	"encoding/json"
	"fmt"
)

// checks if the ToolCall type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolCall{}

// ToolCall struct for ToolCall
type ToolCall struct {
	Id *string `json:"id,omitempty"`
	Type *ToolTypes `json:"type,omitempty"`
	Function FunctionCall `json:"function"`
	Index *int32 `json:"index,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ToolCall ToolCall

// NewToolCall instantiates a new ToolCall object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolCall(function FunctionCall) *ToolCall {
	this := ToolCall{}
	var id string = "null"
	this.Id = &id
	this.Function = function
	var index int32 = 0
	this.Index = &index
	return &this
}

// NewToolCallWithDefaults instantiates a new ToolCall object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolCallWithDefaults() *ToolCall {
	this := ToolCall{}
	var id string = "null"
	this.Id = &id
	var index int32 = 0
	this.Index = &index
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ToolCall) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolCall) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ToolCall) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ToolCall) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ToolCall) GetType() ToolTypes {
	if o == nil || IsNil(o.Type) {
		var ret ToolTypes
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolCall) GetTypeOk() (*ToolTypes, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ToolCall) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ToolTypes and assigns it to the Type field.
func (o *ToolCall) SetType(v ToolTypes) {
	o.Type = &v
}

// GetFunction returns the Function field value
func (o *ToolCall) GetFunction() FunctionCall {
	if o == nil {
		var ret FunctionCall
		return ret
	}

	return o.Function
}

// GetFunctionOk returns a tuple with the Function field value
// and a boolean to check if the value has been set.
func (o *ToolCall) GetFunctionOk() (*FunctionCall, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Function, true
}

// SetFunction sets field value
func (o *ToolCall) SetFunction(v FunctionCall) {
	o.Function = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ToolCall) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ToolCall) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ToolCall) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *ToolCall) SetIndex(v int32) {
	o.Index = &v
}

func (o ToolCall) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolCall) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["function"] = o.Function
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ToolCall) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"function",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolCall := _ToolCall{}

	err = json.Unmarshal(data, &varToolCall)

	if err != nil {
		return err
	}

	*o = ToolCall(varToolCall)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "type")
		delete(additionalProperties, "function")
		delete(additionalProperties, "index")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableToolCall struct {
	value *ToolCall
	isSet bool
}

func (v NullableToolCall) Get() *ToolCall {
	return v.value
}

func (v *NullableToolCall) Set(val *ToolCall) {
	v.value = val
	v.isSet = true
}

func (v NullableToolCall) IsSet() bool {
	return v.isSet
}

func (v *NullableToolCall) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolCall(val *ToolCall) *NullableToolCall {
	return &NullableToolCall{value: val, isSet: true}
}

func (v NullableToolCall) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolCall) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


